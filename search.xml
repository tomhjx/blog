<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHP Version 1.0 Published</title>
    <url>/1995/06/08/PHP-Version-1-0-Published/</url>
    <content><![CDATA[<h1 id="有什么变化"><a class="header-anchor" href="#有什么变化">¶</a>有什么变化</h1>
<p>PHP（Personal Home Page），是Rasmus Lerdorf 为了要维护个人网页，在1994年开始开发，而用C语言开发的一些CGI工具程序集，来取代原先使用的Perl程序，专为「动态 Web 开发」而生。最初这些工具程序用来显示Rasmus Lerdorf的个人履历，以及统计网页流量。他将这些程序和一些窗体解释器集成起来，称为 PHP/FI（Personal Home Page/Forms Interpreter）。为了可以通过社群来加速程序开发与查找错误，Rasmus Lerdorf将 PHP/FI 公开发布 “Personal Home Page Tools (PHP Tools) version 1.0”。</p>
<p><a href="https://groups.google.com/g/comp.infosystems.www.authoring.cgi/c/PyJ25gZ6z7A/m/M9FkTUVDfcwJ">https://groups.google.com/g/comp.infosystems.www.authoring.cgi/c/PyJ25gZ6z7A/m/M9FkTUVDfcwJ</a></p>
<h1 id="为了解决什么问题"><a class="header-anchor" href="#为了解决什么问题">¶</a>为了解决什么问题</h1>
<ul>
<li>Perl能支持web开发，但是不能嵌入HTML中开发，开发效率低</li>
</ul>
<h1 id="关键思路是什么"><a class="header-anchor" href="#关键思路是什么">¶</a>关键思路是什么</h1>
<ul>
<li>使用集成的方案提高开发效率，基于轻量、简单设计逻辑，降低维护成本</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 2.0 Published</title>
    <url>/1996/04/16/PHP-Version-2-0-Published/</url>
    <content><![CDATA[<p>针对PHP 1.0的改进版，速度更快、体积更小，更容易产生动态网页。</p>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 3.0 Published</title>
    <url>/1998/06/06/PHP-Version-3-0-Published/</url>
    <content><![CDATA[<h1 id="有什么变化"><a class="header-anchor" href="#有什么变化">¶</a>有什么变化</h1>
<p>PHP 3.0 是类似于当今 PHP 语法结构的第一个版本。Andi Gutmans 和 Zeev Suraski 在为一所大学的项目中开发电子商务程序时发现 PHP/FI 2.0 功能明显不足，于是他们重写了代码。这就是 PHP 3.0。经过Andi，Rasmus 和 Zeev 一系列的努力，考虑到 PHP/FI 已存在的用户群，他们决定联合发布 PHP 3.0 作为 PHP/FI 2.0 的官方后继版本。而 PHP/FI 2.0 的进一步开发几乎终止了。</p>
<p>PHP 3.0 的一个最强大的功能是它的可扩展性。除了给最终用户提供数据库、协议和 API 的基础结构，它的可扩展性还吸引了大量的开发人员加入并提交新的模块。后来证实，这是 PHP 3.0 取得巨大成功的关键。PHP 3.0 中的其它关键功能包括面向对象的支持和更强大和协调的语法结构。</p>
<p>这个全新的语言伴随着一个新的名称发布。它从 PHP/FI 2.0 的名称中移去了暗含“本语言只限于个人使用”的部分。它被命名为简单的缩写“PHP”。这是一种递归的缩写，它的全称是——PHP: Hypertext Preprocessor。</p>
<p>1998 年末，PHP 的安装人数几近 10,000，有大约 100,000 个网站报告他们使用了 PHP。在 PHP 3.0 的顶峰，Internet 上 10% 的 web 服务器上都安装了它。</p>
<p>约九个月的公开测试后，官方于 1998 年 6 月正式发布 PHP 3.0。</p>
<p>开发方式改成多人共同参与。</p>
<p>Zeev Suraski和Andi Gutmans，开始重写PHP的语法分析器。</p>
<h1 id="为了解决什么问题"><a class="header-anchor" href="#为了解决什么问题">¶</a>为了解决什么问题</h1>
<ul>
<li>应用于真实的工业应用场景（电子商务等），功能不足，开发效率较低</li>
</ul>
<h1 id="关键思路是什么"><a class="header-anchor" href="#关键思路是什么">¶</a>关键思路是什么</h1>
<ul>
<li>面向开放，开发方式由“个人”转换为“多人”</li>
<li>提高可扩展性，吸引更多的维护者加入进来</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 4.0 Beta 1 Published</title>
    <url>/1999/06/19/PHP-Version-4-0-Beta-1-Published/</url>
    <content><![CDATA[<h1 id="有什么变化"><a class="header-anchor" href="#有什么变化">¶</a>有什么变化</h1>
<p>1998 年的冬天，PHP 3.0 官方发布不久，Andi Gutmans 和 Zeev Suraski 开始重新编写 PHP 代码。设计目标是增强复杂程序运行时的性能和 PHP 自身代码的模块性。PHP 3.0 的新功能和广泛的第三方数据库、API的支持使得这样程序的编写成为可能，但是 PHP 3.0 没有高效处理如此复杂程序的能力。</p>
<p>Andi Gutmans 和 Zeev Suraski 重写了PHP词法解析器，称为“Zend Engine”（这是 Zeev 和 Andi 的缩写）</p>
<p>源码提交到了github（<a href="https://github.com/php/php-src%EF%BC%89">https://github.com/php/php-src）</a></p>
<h2 id="新增了什么"><a class="header-anchor" href="#新增了什么">¶</a>新增了什么</h2>
<ul>
<li>Zend Engine</li>
</ul>
<p>在PHP运行过程中引入了“Zend虚拟机”后，PHP架构发生了变化</p>
<p><img src="http://segmentfault.com/img/bVcGi8" alt=""></p>
<h1 id="为了解决什么问题"><a class="header-anchor" href="#为了解决什么问题">¶</a>为了解决什么问题</h1>
<ul>
<li>PHP3 采用的是边解释、边执行的运行方式，运行效率很差，故此没法提供高效处理如此复杂程序的能力。</li>
<li>代码整体耦合度比较高，可扩展性也不够好，维护成本将会越来越高。</li>
<li>需要支持多线程的场景。</li>
</ul>
<h1 id="关键思路是什么"><a class="header-anchor" href="#关键思路是什么">¶</a>关键思路是什么</h1>
<ul>
<li>
<p>模块化设计实现解耦</p>
</li>
<li>
<p>词法解析器的核心优化：执行机制划分为编译和执行，先进行预编译(Compile)，然后再执行(Execute)</p>
</li>
</ul>
<h1 id="演进思路是什么"><a class="header-anchor" href="#演进思路是什么">¶</a>演进思路是什么</h1>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 4.0 Beta 2 Published</title>
    <url>/1999/08/09/PHP-Version-4-0-Beta-2-Published/</url>
    <content><![CDATA[<h1 id="有什么变化"><a class="header-anchor" href="#有什么变化">¶</a>有什么变化</h1>
<h2 id="新增了什么"><a class="header-anchor" href="#新增了什么">¶</a>新增了什么</h2>
<ul>
<li>Made the IMAP module work with PHP 4.0 (Zeev)</li>
<li>Added get_class($obj), get_parent_class($obj) and method_exists($obj,“name”) (Andi &amp; Zeev)</li>
<li>Added function entries for strip_tags() and similar_text() (Andrei)</li>
<li>Ported strtotime() function from PHP 3.0 (Andrei)</li>
<li>buildconf now checks your installation (Stig)</li>
<li>XML module now built dynamically with --with-xml=shared (Stig)</li>
<li>Added a check for freetype.h - fixed build on RedHat 6.0 (Zeev)</li>
<li>Ported all remaining date() format options from PHP 3.0 (Andrei)</li>
<li>$php_errormsg now works (Andrei)</li>
<li>Added locale support for Perl Compatible Regexp functions (Andrei)</li>
<li>Informix module ported (Danny)</li>
<li>Added patch for reverse lookup table in base64_decode (Sascha) Submitted by <a href="mailto:bfranklin@dct.com">bfranklin@dct.com</a></li>
<li>Added DBA module (Sascha)</li>
<li>Added session id detection within REQUEST_URI (Sascha)</li>
<li>Added missing E_ error level constants (Zeev, Zend Engine)</li>
<li>Gave PHP 4.0’s SNMP extension all the functionality of PHP 3.0.12 (SteveL)</li>
</ul>
<h2 id="移除了什么"><a class="header-anchor" href="#移除了什么">¶</a>移除了什么</h2>
<ul>
<li>Remove --with-shared-apache (Sascha)</li>
</ul>
<h2 id="修改了什么"><a class="header-anchor" href="#修改了什么">¶</a>修改了什么</h2>
<ul>
<li>
<p>Win32 builds now include the ODBC module built-in (Zeev)</p>
</li>
<li>
<p>Updated hyperwave module, made it thread safe</p>
</li>
<li>
<p>Updated pdflib module, version 0.6 of pdflib no longer supported</p>
</li>
<li>
<p>Updated fdf module</p>
</li>
<li>
<p>Built-in phpinfo() links are now turned off by default. They can be turned on using the allow_builtin_links INI directive (Zeev)</p>
</li>
<li>
<p>Changed phpinfo() to list modules that have no info function (Zeev)</p>
</li>
<li>
<p>Modified array_walk() function so that the userland callback is passed a key and possible user data in addition to the value (Andrei)</p>
</li>
<li>
<p>Children now inherit their parent’s constructor, if they do not supply a constructor of their own.</p>
</li>
<li>
<p>Apache php_flag values only recognized ‘On’ (case sensitive) - changed to case insensitive (Zeev)</p>
</li>
<li>
<p>Merged in gdttf stuff from PHP 3.0 (Sascha)</p>
</li>
<li>
<p>Merged in PHP 3.0 version of str_replace (Sascha)</p>
</li>
<li>
<p>Merged in HP-UX/ANSI compatibility switch from PHP 3.0 (Sascha)</p>
</li>
<li>
<p>Improved register_shutdown_function() - you may now supply arguments that will be passed to the shutdown function (Zeev)</p>
</li>
<li>
<p>Improved call_user_func() and call_user_method() - they now support passing arguments by reference (Zeev)</p>
</li>
<li>
<p>Improved ISAPI module to supprt large server variables (Zeev)</p>
</li>
</ul>
<h2 id="修复了什么BUG"><a class="header-anchor" href="#修复了什么BUG">¶</a>修复了什么BUG</h2>
<ul>
<li>Fixed a problem when sending HTTP/1.x header lines using header() (Zeev)</li>
<li>Fixed SYSV-SHM interface (Thies).</li>
<li>Fixed ldap_search(), ldap_read() and ldap_list() (Zeev)</li>
<li>Fixed Apache information in phpinfo() (<a href="mailto:sam@breakfree.com">sam@breakfree.com</a>)</li>
<li>Fixed usort() and uksort() (Zeev)</li>
<li>Fixed md5() in the Apache module (Thies)</li>
<li>Fixed sybase_fetch_object() (Zeev)</li>
<li>Fixed a problem with include()/require() of URLs (Sascha, Zeev)</li>
<li>Fixed a bug in implode() that caused it to corrupt its arguments (Zeev)</li>
<li>Fixed various inheritance problems (Andi &amp; Zeev, Zend Engine)</li>
<li>Fixed runtime inheritance of classes (parent methods/properties were overriding their children) (Zeev, Zend Engine)</li>
<li>Fixed backwards incompatibility with the “new” operator (Andi, Zend Engine)</li>
<li>Fixed bugs in uksort() and ksort() sort ordering (Andrei)</li>
<li>Fixed a memory leak when using assignment-op operators with lvalue of type string (Zeev, Zend Engine)</li>
<li>Fixed a problem in inheritance from classes that are defined in include()d files (Zeev, Zend Engine)</li>
<li>Fixed a problem with the PHP error handler that could result in a crash on certain operating systems (Zeev)</li>
<li>Fixed a memory leak with switch statement containing return statements (Andi &amp; Zeev, Zend Engine)</li>
<li>Fixed a crash problem in switch statements that had a string offset as a conditional (Andi &amp; Zeev, Zend Engine)</li>
<li>Imported PHP 3.0 fixes for problem with PHP as a dynamic module and Redhat libc2.1 in zlib module (Stefan)</li>
<li>Imported PHP 3.0 fixes for rand() and mt_rand() (Rasmus)</li>
<li>Fixed a bug in WDDX that would cause a crash if a number was passed in instead of a variable name (Andrei)</li>
<li>Fixed array_walk() to work in PHP 4.0 (Andrei)</li>
<li>Fixed rpath handling for utilitites built during Apache build (Sascha)</li>
<li>Fixed a bug in sending multiple HTTP Cookies under Apache (Zeev)</li>
<li>Fixed implicit connect on the MySQL, mSQL, PostgreSQL and Sybase modules (Zeev)</li>
</ul>
<h1 id="为了解决什么问题"><a class="header-anchor" href="#为了解决什么问题">¶</a>为了解决什么问题</h1>
<ul>
<li>BUG</li>
<li>从PHP3.0过渡到PHP4.0的迭代维护</li>
</ul>
<h1 id="关键思路是什么"><a class="header-anchor" href="#关键思路是什么">¶</a>关键思路是什么</h1>
<ul>
<li>
<p>向后兼容</p>
</li>
<li>
<p>轻量化，减少更多的自启动，提供按需使用的空间</p>
</li>
<li>
<p>开放更多的可扩展性</p>
<ul>
<li>数据库驱动</li>
<li>提供编写钩子的空间</li>
</ul>
</li>
<li>
<p>优化查错体系</p>
<ul>
<li>补充并前置环境、依赖的查错</li>
<li>规范化，完善错误日志等级</li>
<li>补充错误信息提取手段</li>
</ul>
</li>
<li>
<p>关注关键问题</p>
<ul>
<li>内存泄露</li>
<li>线程安全</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 4.0 Beta 3 Published</title>
    <url>/1999/11/16/PHP-Version-4-0-Beta-3-Published/</url>
    <content><![CDATA[<h1 id="有什么变化"><a class="header-anchor" href="#有什么变化">¶</a>有什么变化</h1>
<h2 id="新增了什么"><a class="header-anchor" href="#新增了什么">¶</a>新增了什么</h2>
<ul>
<li>
<p>Added Win32 build files for Informix driver and make it compile with ZTS (danny)</p>
</li>
<li>
<p>Added tmpfile() function (Stig)</p>
</li>
<li>
<p>min(),max(),a[r]sort(),[r]sort(),k[r]sort() now work consistent with the language-core. (Thies)</p>
</li>
<li>
<p>tempnam() now uses mkstemp() if available (Stig)</p>
</li>
<li>
<p>serialize() and var_dump() now honor the precision as set in php.ini for doubles. (Thies)</p>
</li>
<li>
<p>Added Microsoft SQL Server module for Win32 (Frank)</p>
</li>
<li>
<p>Added support for forcing a variable number of internal function arguments by reference. (Andi &amp; Zeev, Zend Engine)</p>
</li>
<li>
<p>Implemented getprotoby{name,number} (Evan)</p>
</li>
<li>
<p>Added array_pad() function. (Andrei)</p>
</li>
<li>
<p>Added new getservby{name,port} functions. (Evan)</p>
</li>
<li>
<p>Added session.cookie_path and session.cookie_domain (Sascha)</p>
</li>
<li>
<p>Continue processing PHP_INI_SYSTEM knownDirectives after extension= (Sam Ruby)</p>
</li>
<li>
<p>Enable IBM DB2 support - Tested against DB2 6.1 UDB on Linux (Rasmus)</p>
</li>
<li>
<p>Added new str_repeat() function. (Andrei)</p>
</li>
<li>
<p>implemented OCI8 $lob-&gt;WriteToFile() function - very useful for streaming large amounts of LOB-Data without to need of a huge buffer. (Thies)</p>
</li>
<li>
<p>Added session.use_cookies option (Sascha)</p>
</li>
<li>
<p>Added getcwd() function. (Thies)</p>
</li>
<li>
<p>added === operator support. (Andi &amp; Thies, Zend Engine)</p>
</li>
<li>
<p>Added is_resource(), is_bool() functions. (Thies)</p>
</li>
<li>
<p>Thies introduced ZEND_FETCH_RESOURCE2 (Danny).</p>
</li>
<li>
<p>Added Informix driver to list of maintained extensions. (Danny).</p>
</li>
<li>
<p>IXF_LIBDIR environment variable specifies alternate Informix library path for configure (Danny).</p>
</li>
<li>
<p>You can use resources as array-indices again (Thies, Zend Engine)</p>
</li>
<li>
<p>fdf support ported; not completely tested with latest version 4.0 for glibc (Uwe)</p>
</li>
<li>
<p>OCI8 connections are now kept open as long as they are referenced (Thies)</p>
</li>
<li>
<p>Ported range() and shuffle() from PHP 3 to PHP 4 (Andrei)</p>
</li>
<li>
<p>Added the ability to use variable references in the array() construct. For example, array(“foo” =&gt; &amp;$foo). (Andi, Zend Engine)</p>
</li>
<li>
<p>Added array_reverse() function (Andrei)</p>
</li>
<li>
<p>Generalized server-API build procedure on UNIX (Stig)</p>
</li>
<li>
<p>Added ‘–disable-rpath’ option (Sascha)</p>
</li>
<li>
<p>Added AOLserver SAPI module (Sascha)</p>
</li>
<li>
<p>Added support for the Easysoft ODBC-ODCB Bridge (<a href="mailto:martin@easysoft.com">martin@easysoft.com</a>)</p>
</li>
<li>
<p>Added extra metadata functions to ODBC, SQLTables etc (<a href="mailto:nick@easysoft.com">nick@easysoft.com</a>)</p>
</li>
<li>
<p>Implemented object serialization/deserialization in WDDX (Andrei)</p>
</li>
<li>
<p>Added krsort() function (Thies)</p>
</li>
<li>
<p>Added func_num_args(), func_get_arg() and func_get_args() for standard access to variable number of arguments functions (Zeev)</p>
</li>
<li>
<p>Added FTP support (Andrew Skalski)</p>
</li>
<li>
<p>Added optional allowable_tags arguments to strip_tags(), gzgetss() and fgetss() to allow you to specify a string of tags that are not to be stripped (Rasmus)</p>
</li>
<li>
<p>Added array_count_values() function. (Thies)</p>
</li>
<li>
<p>snmp, pgsql, mysql and gd modules can be built as dynamically loaded modules (Greg)</p>
</li>
<li>
<p>Added user-level callbacks for session module (Sascha)</p>
</li>
<li>
<p>Added support for unknown POST content types (Zeev)</p>
</li>
<li>
<p>Added “wddx” serialization handler for session module (Sascha) (automatically enabled, if you compile with --with-wddx)</p>
</li>
<li>
<p>PHP 4.0 now serializes Objects as ‘O’ (not understood by PHP 3.0), but unserializes PHP 3.0 serialized objects as expected. (Thies)</p>
</li>
<li>
<p>Made serialize/unserialize work on classes. If the class is known at unserialize() time, you’ll get back a fully working object! (Thies)</p>
</li>
<li>
<p>Made it possible to specify external location of PCRE library (Andrei)</p>
</li>
<li>
<p>OCI8 supports appending and positioning when saving LOBs (Thies)</p>
</li>
<li>
<p>Added metaphone support (Thies)</p>
</li>
<li>
<p>OCI8 Driver now supports LOBs like PHP 3.0. (Thies)</p>
</li>
<li>
<p>var_dump now dumps the properties of an object (Thies)</p>
</li>
<li>
<p>Added support for transparent session id propagation (Sascha)</p>
</li>
<li>
<p>Made WDDX serialize object properties properly (Andrei)</p>
</li>
<li>
<p>Added session_unset() function (Andrei)</p>
</li>
<li>
<p>Added gpc_globals variable directive to php.ini. By default it is On, but if it is set to Off, GET, POST and Cookie variables will not be inserted to the global scope. Mostly makes sense when coupled with track_vars (Zeev)</p>
</li>
<li>
<p>Added versioning support for shared library (Sascha) This allows concurrent use of PHP 3.0 and PHP 4.0 as Apache modules. See the end of the INSTALL file for more information.</p>
</li>
<li>
<p>Added second parameter to array_keys which specifies search value for which the key should be returned (Andrei)</p>
</li>
<li>
<p>Make set_time_limit() work on Unix (Rasmus)</p>
</li>
<li>
<p>Added connection handling support (Rasmus)</p>
</li>
<li>
<p>Added shared memory module for session data storage (Sascha)</p>
</li>
<li>
<p>Ported newest GetImageSize (Thies)</p>
</li>
<li>
<p>Added session compile support in Win32 (Andi)</p>
</li>
<li>
<p>Added -d switch to the CGI binary that allows overriding php.ini values from the command line (Zeev)</p>
</li>
<li>
<p>Added output_buffering directive to php.ini, to enable output buffering for all PHP scripts - default is off (Zeev).</p>
</li>
<li>
<p>Added session.extern_referer_chk which checks whether session ids were referred to by an external site and eliminates them (Sascha)</p>
</li>
<li>
<p>Introduced general combined linear congruential generator (Sascha)</p>
</li>
<li>
<p>Made ldap_close back into an alias for ldap_unbind (Andrei)</p>
</li>
</ul>
<h2 id="移除了什么"><a class="header-anchor" href="#移除了什么">¶</a>移除了什么</h2>
<ul>
<li>Cleaned up File-Module (Thies)</li>
<li>Cleaned up Directory-Module (Thies)</li>
</ul>
<h2 id="修改了什么"><a class="header-anchor" href="#修改了什么">¶</a>修改了什么</h2>
<ul>
<li>
<p>ucfirst()/ucwords() no longer modify arg1 (Thies)</p>
</li>
<li>
<p>Upgraded regex library to alpha3.8 (Sascha)</p>
</li>
<li>
<p>Output-Buffering system is now Thread-Safe. (Thies)</p>
</li>
<li>
<p>XML_Parse_Into_Struct no longer eats data. (Thies)</p>
</li>
<li>
<p>unserialize() now gives a notice when passed invalid data. (Thies)</p>
</li>
<li>
<p>Improved the Win32 COM module to support [out] parameters (Boris Wedl)</p>
</li>
<li>
<p>setlocale doesn’t anymore screw up things if you forgot to change it back to the original settings. (Jouni)</p>
</li>
<li>
<p>Switched to new system where ChangeLog is automagically updated from commit messages. NEWS file is now the place for public announcements. (Andrei)</p>
</li>
<li>
<p>Improved UNIX build system. Now utilizes libtool (Sascha)</p>
</li>
<li>
<p>Updated Zend garbage collection with a much more thorough method. (Andi, Zend Engine)</p>
</li>
<li>
<p>Some more XML fixes/cleanups (Thies)</p>
</li>
<li>
<p>Updated preg_replace() so that if any argument passed in is an array it will make a copy of each entry before converting it to string so that the original is intact. If the subject is an array then it will preserve the keys in the output as well (Andrei)</p>
</li>
<li>
<p>Configure speedup (Stig)</p>
</li>
<li>
<p>Upgrade some more internal functions to use new Zend function API. (Thies, Zend Engine)</p>
</li>
<li>
<p>Informix driver : Changed <a href="http://ifx.ec">ifx.ec</a> to use the new high-performance ZEND API. (Danny)</p>
</li>
<li>
<p>Upgraded math-funtions to use new Zend function API (Thies)</p>
</li>
<li>
<p>Upgraded a lot internal functions to use new Zend function API (Thies)</p>
</li>
<li>
<p>Updated OCI8 to use the new high-performance Zend function API. (Thies)</p>
</li>
<li>
<p>Updated ODBC to use the new high-performance Zend function API (kara)</p>
</li>
<li>
<p>Updated zlib to use the new high-performance Zend function API. (Stefan)</p>
</li>
<li>
<p>Updated preg_split() to allow returning only non-empty pieces (Andrei)</p>
</li>
<li>
<p>Updated PCRE to use the new high-performance Zend function API (Andrei)<br>
8 Updated session, dba, mhash, mcrypt, sysvshm, sysvsem, gettext modules to use the new high-performance Zend function API (Sascha)</p>
</li>
<li>
<p>Updated WDDX to use the new high-performance Zend function API (Andrei)</p>
</li>
<li>
<p>Updated XML to use the new high-performance Zend function API. (Thies)</p>
</li>
<li>
<p>Updated Oracle to use the new high-performance Zend function API. (Thies)</p>
</li>
<li>
<p>Improved the performance of the MySQL module significantly by using the new high-performance Zend function API. (Zeev)</p>
</li>
<li>
<p>Extended var_dump to handle resource type somewhat (Andrei)</p>
</li>
<li>
<p>Resourcified Oracle (Thies)</p>
</li>
<li>
<p>Upgraded var_dump() to take multiple arguments (Andrei)</p>
</li>
<li>
<p>Reworked preg_* functions according to the new PCRE API, which also made them behave much more like Perl ones (Andrei)</p>
</li>
<li>
<p>Updated bundled PCRE library to version 2.08 (Andrei)</p>
</li>
<li>
<p>count()/is_array/is_object… speedups. (Thies)</p>
</li>
<li>
<p>OCI8 doesn’t use define callbacks any longer. (Thies)</p>
</li>
<li>
<p>Rewrote the GET/POST/Cookie data reader to support multi-dimensional arrays! (Zeev)</p>
</li>
<li>
<p>Renamed allow_builtin_links to expose_php (defaults to On). This directive tells PHP whether it may expose its existence to the outside world, e.g. by adding itself to the Web server header (Zeev)</p>
</li>
<li>
<p>Resourcified Informix driver (Danny)</p>
</li>
<li>
<p>New resource handling for odbc, renamed to php_odbc.[ch]</p>
</li>
<li>
<p>Improved the Sybase-CT module to make use of resources (Zeev)</p>
</li>
<li>
<p>Improved the mSQL module to make use of resources (Zeev)</p>
</li>
<li>
<p>Changed mysql_query() and mysql_db_query() to return false in case of saving the result set data fails (Zeev)</p>
</li>
<li>
<p>Improved the resource mechanism - resources were not getting freed as soon as they could (Zeev)</p>
</li>
<li>
<p>Improved session id generation (Sascha)</p>
</li>
<li>
<p>Improved speed of uniqid() by using the combined LCG and removing the extra usleep() (Sascha)</p>
</li>
<li>
<p>OciFetchInto now resets the returned array in all cases (Thies)</p>
</li>
<li>
<p>Oracle is now ZTS-Safe (Thies)</p>
</li>
<li>
<p>OCI8 is now ZTS-Safe (Thies)</p>
</li>
<li>
<p>Imported PHP 3.0 diskfreespace() function (Thies)</p>
</li>
</ul>
<h2 id="修复了什么BUG"><a class="header-anchor" href="#修复了什么BUG">¶</a>修复了什么BUG</h2>
<ul>
<li>
<p>Fixed strtr() not to modify arg1 (Thies)</p>
</li>
<li>
<p>Fixed selecting nested-tables in OCI8. (Thies)</p>
</li>
<li>
<p>RFC-854 fix for internal FTP-Code. Commands have to end in “\r\n” (Thies)</p>
</li>
<li>
<p>Fixed OpenLink ODBC support (Stig)</p>
</li>
<li>
<p>Fixed garbage returned at the end of certain Sybase-Columns (Thies) Patch submitted by: <a href="mailto:neal@wanlink.com">neal@wanlink.com</a></p>
</li>
<li>
<p>Fixed parse_url(‘-’) crash. (Thies)</p>
</li>
<li>
<p>Fixed shuffle() so that it no longer breaks on Solaris. (Andrei)</p>
</li>
<li>
<p>Fixed zombie problem in shell_exec() and $a = `some_command` constructs. (Thies)</p>
</li>
<li>
<p>Fixed gmmktime() so that the following should always be true: gmmktime([args]) == mktime([args]) + date(‘Z’, mktime([args])) (Jouni)</p>
</li>
<li>
<p>Fixed refcount problem in XML module. (Thies)</p>
</li>
<li>
<p>Fixed crash in HTTP_RAW_POST_DATA handling (Thies)</p>
</li>
<li>
<p>Fixed pg_fetch_array() with three arguments (Sascha) Patch submitted by: <a href="mailto:brian@soda.berkeley.edu">brian@soda.berkeley.edu</a></p>
</li>
<li>
<p>Small fix in Ora_Close (Thies)</p>
</li>
<li>
<p>Fixed header(“HTTP/…”); behaviour (Sascha)</p>
</li>
<li>
<p>Fixed backwards incompatibility with ereg() (Thies)</p>
</li>
<li>
<p>Fixed LOB/Persistent-Connection related OCI8-Crash (Thies)</p>
</li>
<li>
<p>Fixed XML Callbacks. (Thies)</p>
</li>
<li>
<p>Fixed bug in odbc_setoption, getParameter call incorrect (<a href="mailto:martin@easysoft.com">martin@easysoft.com</a>)</p>
</li>
<li>
<p>Fixed NULL-Column problem in Oracle-Driver (Thies)</p>
</li>
<li>
<p>Fixed SEGV in mcal make_event_object() and typo in mcal_list_alarms() (Andrew Skalski)</p>
</li>
<li>
<p>Fixed Ora_PLogon (Thies)</p>
</li>
<li>
<p>Fixed a memory leak in the Apache per-directory directives handler (Zeev)</p>
</li>
<li>
<p>OCI8 fix for fetching empty LOBs (Thies)</p>
</li>
<li>
<p>Fixed unserializing objects (Thies)</p>
</li>
<li>
<p>Fixed WDDX mem leak when undefined variable is passed in for serialization (Andrei)</p>
</li>
<li>
<p>Fixed double session globals shutdown crash (Andrei)</p>
</li>
<li>
<p>Fixed crash related to ignore_user_abort ini entry (Andrei)</p>
</li>
<li>
<p>Fixed session.auto_start (Sascha)</p>
</li>
<li>
<p>Fixed several problems with output buffering and HEAD requests (Zeev)</p>
</li>
<li>
<p>Fixed HTTP Status code issue with ISAPI module (Zeev)</p>
</li>
<li>
<p>Fixed a problem that prevented $GLOBALS from working properly (Zeev, Zend library)</p>
</li>
<li>
<p>Fixed a crash that would occur if wddx_deserialize did not receive a valid packet (Andrei)</p>
</li>
<li>
<p>Fixed a bugglet when redefining a class at run-time (Andi, Zend Engine)</p>
</li>
<li>
<p>Fixed sem_get() on AIX (Sascha)</p>
</li>
<li>
<p>Fixed fopen() to work with URL’s in Win32 (Andi &amp; Zeev)</p>
</li>
<li>
<p>Fixed include_path for Win32 (Andi, Zend Engine)</p>
</li>
<li>
<p>Fixed bug in ISAPI header sending function (Charles)</p>
</li>
<li>
<p>Fixed memory leak when using undefined values (Andi &amp; Zeev, Zend Engine)</p>
</li>
<li>
<p>Fixed some more class inheritance issues (Zeev, Zend Engine)</p>
</li>
<li>
<p>Fixed Apache build wrt to shared modules on FreeBSD/Linux (Sascha)</p>
</li>
<li>
<p>Fixed mysql_errno() to work with recent versions of MySQL (Zeev)</p>
</li>
<li>
<p>Fixed a problem with define() and boolean values (Zeev)</p>
</li>
<li>
<p>Fixed inclusion of gd/freetype functions (Sascha)</p>
</li>
<li>
<p>Fixed persistency of MHASH_* constants (Sascha)</p>
</li>
<li>
<p>Fixed flushing of cached information to disk in DBA’s DB2 module (Sascha)</p>
</li>
<li>
<p>Fixed is_writeable/is_writable problem; they are both defined now (Andrei)</p>
</li>
<li>
<p>Fixed thread-safety issues in the MySQL module (Zeev)</p>
</li>
<li>
<p>Fixed thread-safe support for dynamic modules (Zeev)</p>
</li>
<li>
<p>Fixed Sybase CT build process (Zeev)</p>
</li>
</ul>
<h1 id="为了解决什么问题"><a class="header-anchor" href="#为了解决什么问题">¶</a>为了解决什么问题</h1>
<ul>
<li>BUG</li>
<li>从PHP3.0过渡到PHP4.0的迭代维护</li>
</ul>
<h1 id="关键思路是什么"><a class="header-anchor" href="#关键思路是什么">¶</a>关键思路是什么</h1>
<ul>
<li>可扩展
<ul>
<li>支持更多的数据库</li>
</ul>
</li>
<li>可移植
<ul>
<li>支持更多的操作系统</li>
</ul>
</li>
<li>关注关键问题
<ul>
<li>内存泄露</li>
<li>多线程安全</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 5.0.0 Beta 1 Published</title>
    <url>/2003/06/29/PHP-Version-5-0-0-Beta-1-Published/</url>
    <content><![CDATA[<h1 id="有什么变化"><a class="header-anchor" href="#有什么变化">¶</a>有什么变化</h1>
<p>它的核心是 Zend 引擎 2 代，引入了新的对象模型和大量新功能。</p>
<p><a href="http://people.apache.org/~jim/ApacheCons/ApacheCon2002/pdf/suraski-php-02.pdf">http://people.apache.org/~jim/ApacheCons/ApacheCon2002/pdf/suraski-php-02.pdf</a></p>
<h2 id="新增了什么"><a class="header-anchor" href="#新增了什么">¶</a>新增了什么</h2>
<ul>
<li>
<p>New php.ini options:</p>
<ul>
<li>“session.hash_function” and “session.hash_bits_per_character”. (Sascha)</li>
<li>“mail.force_extra_paramaters”. (Derick)</li>
<li>“register_long_arrays”. (Zeev)</li>
</ul>
</li>
<li>
<p>Added new iconv functions. (Moriyoshi)</p>
<ul>
<li>iconv_strlen()</li>
<li>iconv_substr()</li>
<li>iconv_strpos()</li>
<li>iconv_strrpos()</li>
<li>iconv_mime_decode()</li>
<li>iconv_mime_encode()</li>
</ul>
</li>
<li>
<p>Added misc. new functions:</p>
<ul>
<li>ldap_sasl_bind(). (<a href="mailto:peter_c60@hotmail.com">peter_c60@hotmail.com</a>, Jani)</li>
<li>imap_getacl(). (Dan, Holger Burbach)</li>
<li>file_put_contents(). (Sterling)</li>
<li>proc_nice() - Changes priority of the current process. (Ilia)</li>
<li>pcntl_getpriority() and pcntl_setpriority(). (Ilia)</li>
<li>idate(), date_sunrise() and date_sunset(). (Moshe Doron)</li>
<li>strpbrk() - Searches a string for a list of characters. (Ilia)</li>
<li>get_headers() - Returns headers sent by the server of the specified URL. (Ilia)</li>
<li>str_split() - Breaks down a string into an array of elements based on length. (Ilia)</li>
<li>array_walk_recursive(). (Ilia)</li>
<li>array_combine(). (Andrey)</li>
</ul>
</li>
<li>
<p>Added optional parameter to get_browser() to make it return an array. (Jay)</p>
</li>
<li>
<p>Added optional parameter to openssl_sign() to specify the hashing algorithm.(<a href="mailto:scott@planetscott.ca">scott@planetscott.ca</a>, Derick)</p>
</li>
<li>
<p>Added optional parameter to sha1(), sha1_file(), md5() and md5_file() which makes them return the digest as binary data. (Michael Bretterklieber, Derick)</p>
</li>
<li>
<p>Added optional parameter to mkdir() to make directory creation recursive. (Ilia)</p>
</li>
<li>
<p>Added optional parameter to file() which makes the result array not contain the line endings and to skip empty lines. (Ilia)</p>
</li>
<li>
<p>Added new range() functionality:</p>
<ul>
<li>Support for float modifier. (Ilia)</li>
<li>Detection of numeric values inside strings passed as high &amp; low. (Ilia)</li>
<li>Proper handle the situations where high == low. (Ilia)</li>
<li>Added an optional step parameter. (Jon)</li>
</ul>
</li>
<li>
<p>Added encoding detection feature for expat XML parser. (Adam Dickmeiss, Moriyoshi)</p>
</li>
<li>
<p>Added missing multibyte (unicode) support and numeric entity support to html_entity_decode(). (Moriyoshi)</p>
</li>
<li>
<p>Added IPv6 support to ext/sockets. (Sara)</p>
</li>
<li>
<p>Added input filter support. See README.input_filter for more info. (Rasmus)</p>
</li>
<li>
<p>Added a replace count for str_[i]replace(), see <a href="http://bugs.php.net/8218">#8218</a>. (Sara)</p>
</li>
</ul>
<h2 id="移除了什么"><a class="header-anchor" href="#移除了什么">¶</a>移除了什么</h2>
<ul>
<li>Removed the bundled MySQL client library. (Sterling)</li>
</ul>
<h2 id="修改了什么"><a class="header-anchor" href="#修改了什么">¶</a>修改了什么</h2>
<ul>
<li>
<p>Switch to using Zend Engine 2, which includes numerous engine level improvements. A full overview may be downloaded from <a href="http://www.zend.com/engine2/ZendEngine-2.0.pdf">http://www.zend.com/engine2/ZendEngine-2.0.pdf</a> (PDF).</p>
</li>
<li>
<p>The SQLite (<a href="http://www.hwaci.com/sw/sqlite/">http://www.hwaci.com/sw/sqlite/</a>) extension is now bundled and enabled by default. (Wez, Marcus, Tal)</p>
</li>
<li>
<p>Improved the speed of internal functions that use callbacks by 40% due to a new internal fast_call_user_function() function. (Sterling)</p>
</li>
<li>
<p>Completely Overhauled XML support (Rob, Sterling, Chregu, Marcus)</p>
<ul>
<li>Brand new Simplexml extension</li>
<li>New DOM extension</li>
<li>New XSL extension</li>
<li>Moved the old DOM-XML and XSLT extensions to PECL</li>
<li>ext/xml can now use both libxml2 and expat to parse XML</li>
<li>Removed bundled expat</li>
</ul>
</li>
<li>
<p>Improved the streams support: (Wez, Sara, Ilia)</p>
<ul>
<li>Improved performance of readfile(), fpassthru() and some internal streams operations under Win32.</li>
<li>stream_socket_client() - similar to fsockopen(), but more powerful.</li>
<li>stream_socket_server() - Creates a server socket.</li>
<li>stream_socket_accept() - Accept a client connection.</li>
<li>stream_socket_get_name() - Get local or remote name of socket.</li>
<li>stream_copy_to_stream()</li>
<li>stream_get_line() - Reads either the specified number of bytes or until the ending string is found.</li>
<li>Added context property to userspace streams object.</li>
<li>Added generic crypto interface for streams (supports dynamic loading of OpenSSL)</li>
<li>Added lightweight streaming input abstraction to the Zend Engine scanners to provide uniform support for include()'ing data from PHP streams across all platforms.</li>
<li>Added ‘string.base64’ stream filter.</li>
<li>Renamed stream_register_wrapper() to stream_wrapper_register().</li>
<li>Added “ftp://” wrapper support to opendir(), stat() and unlink().</li>
<li>Added context options ‘method’, ‘header’ and ‘content’ for “http://” fopen wrapper.</li>
</ul>
</li>
<li>
<p>Improved the GD extension: (Pierre-Alain Joye, Ilia)</p>
<ul>
<li>imagefilter() - Apply different filters to image. (Only available with bundled GD library)</li>
<li>Antialiased drawing support:
<ul>
<li>imageantialias() - (de)active antialias</li>
<li>imageline() and imagepolygon() antialias support</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Changed the length parameter in fgetss() to be optional. (Moriyoshi)</p>
</li>
<li>
<p>Changed ini parser to allow for handling of quoted multi-line values. (Ilia)</p>
</li>
<li>
<p>Changed get_extension_funcs() to return list of the built-in Zend Engine functions if “zend” is specified as the module name. (Ilia)</p>
</li>
<li>
<p>Changed array_search() to accept also objects as a needle. (Moriyoshi)</p>
</li>
<li>
<p>Changed ext/mcrypt to require libmcrypt version 2.5.6 or greater. (Derick)</p>
</li>
<li>
<p>Changed uniqid() parameters to be optional and allow any prefix length. (Marcus)</p>
</li>
</ul>
<h2 id="修复了什么BUG"><a class="header-anchor" href="#修复了什么BUG">¶</a>修复了什么BUG</h2>
<ul>
<li>Fixed is_executable() to be available also on Windows. (Shane)</li>
<li>Fixed dirname() and strip_tags() to be binary-safe. (Moriyoshi)</li>
<li>Fixed bug <a href="http://bugs.php.net/24098">#24098</a> (crash in pathinfo()). (Ilia)</li>
<li>Fixed bug <a href="http://bugs.php.net/21985">#21985</a> and <a href="http://bugs.php.net/22064">#22064</a> (various mb_send_mail() issues). (Moriyoshi)</li>
<li>Fixed bug <a href="http://bugs.php.net/21600">#21600</a> (Assign by reference function call changes variable contents). (Zeev)</li>
</ul>
<h1 id="为了解决什么问题"><a class="header-anchor" href="#为了解决什么问题">¶</a>为了解决什么问题</h1>
<ul>
<li>BUG</li>
<li>XML被广泛使用，支持能力需要提升</li>
<li>支持IPv6</li>
<li>在面向对象的设计支持不足</li>
</ul>
<h1 id="关键思路是什么"><a class="header-anchor" href="#关键思路是什么">¶</a>关键思路是什么</h1>
<ul>
<li>借鉴优秀的设计思路，如JAVA，补充更多的面向对象设计特性</li>
</ul>
<h1 id="演进思路是什么"><a class="header-anchor" href="#演进思路是什么">¶</a>演进思路是什么</h1>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 7.3.0 Published</title>
    <url>/2018/12/06/PHP-Version-7-3-0-Published/</url>
    <content><![CDATA[<h1 id="目标及关键路径"><a class="header-anchor" href="#目标及关键路径">¶</a>目标及关键路径</h1>
<ul>
<li>性能提升</li>
</ul>
<h1 id="从-PHP-7-2-x-移植到-PHP-7-3-x"><a class="header-anchor" href="#从-PHP-7-2-x-移植到-PHP-7-3-x">¶</a>从 PHP 7.2.x 移植到 PHP 7.3.x</h1>
<p><a href="https://www.php.net/manual/zh/migration73.php">这里可以找到原文</a></p>
<h2 id="不向下兼容的变更"><a class="header-anchor" href="#不向下兼容的变更">¶</a>不向下兼容的变更</h2>
<ul>
<li>
<p>Due to the introduction of <a href="https://www.php.net/manual/zh/migration73.new-features.php#migration73.new-features.core.heredoc">flexible heredoc/nowdoc syntax</a>, doc strings that contain the ending label inside their body may cause syntax errors or change in interpretation.</p>
</li>
<li>
<p>Continue Targeting Switch issues Warning. <code>continue</code> statements targeting <code>switch</code> control flow structures will now generate a warning. In PHP such <code>continue</code> statements are equivalent to <code>break</code>, while they behave as <code>continue 2</code> in other languages.</p>
</li>
<li>
<p>Strict Interpretation of Integer String Keys on ArrayAccess. Array accesses of type <code>$obj[&quot;123&quot;]</code>, where <code>$obj</code> implements <strong>ArrayAccess</strong> and <code>&quot;123&quot;</code> is an integer string literal will no longer result in an implicit conversion to integer, i.e., <code>$obj-&gt;offsetGet(&quot;123&quot;)</code> will be called instead of <code>$obj-&gt;offsetGet(123)</code>. This matches existing behavior for non-literals. The behavior of arrays is not affected in any way, they continue to implicitly convert integral string keys to integers.</p>
</li>
<li>
<p>In PHP, static properties are shared between inheriting classes, unless the static property is explicitly overridden in a child class. However, due to an implementation artifact it was possible to separate the static properties by assigning a reference. This loophole has been fixed.</p>
</li>
<li>
<p>References returned by array and property accesses are now unwrapped as part of the access. This means that it is no longer possible to modify the reference between the access and the use of the accessed value.</p>
</li>
<li>
<p>Argument unpacking stopped working with Traversables with non-integer keys. The following code worked in PHP 5.6-7.2 by accident.</p>
</li>
<li>
<p>The ext_skel utility has been completely redesigned with new options and some old options removed. This is now written in PHP and has no external dependencies.</p>
</li>
<li>
<p>Exceptions thrown due to automatic conversion of warnings into exceptions in <code>EH_THROW</code> mode (e.g. some <a href="https://www.php.net/manual/zh/class.datetime.php">DateTime</a> exceptions) no longer populate <a href="https://www.php.net/manual/zh/function.error-get-last.php">error_get_last()</a> state. As such, they now work the same way as manually thrown exceptions.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/class.typeerror.php">TypeError</a> now reports wrong types as <code>int</code> and <code>bool</code> instead of <code>integer</code> and <code>boolean</code>, respectively.</p>
</li>
<li>
<p>Undefined variables passed to <a href="https://www.php.net/manual/zh/function.compact.php">compact()</a> will now be reported as a notice.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.getimagesize.php">getimagesize()</a> and related functions now report the mime type of BMP images as <code>image/bmp</code> instead of <code>image/x-ms-bmp</code>, since the former has been registered with the IANA (see <a href="http://www.faqs.org/rfcs/rfc7903">» RFC 7903</a>).</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.stream-socket-get-name.php">stream_socket_get_name()</a> will now return IPv6 addresses wrapped in brackets. For example <code>&quot;[::1]:1337&quot;</code> will be returned instead of <code>&quot;::1:1337&quot;</code>.</p>
</li>
<li>
<p>Support for BeOS has been dropped.</p>
</li>
<li>
<p>BCMath Arbitrary Precision Mathematics</p>
<ul>
<li>
<p>All warnings thrown by <a href="https://www.php.net/manual/zh/ref.bc.php">BCMath functions</a> are now using PHP’s error handling. Formerly some warnings have directly been written to stderr.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.bcmul.php">bcmul()</a> and <a href="https://www.php.net/manual/zh/function.bcpow.php">bcpow()</a> now return numbers with the requested scale. Formerly, the returned numbers may have omitted trailing decimal zeroes.</p>
</li>
</ul>
</li>
<li>
<p>IMAP, POP3 and NNTP. <strong>rsh</strong>/<strong>ssh</strong> logins are disabled by default. Use <a href="https://www.php.net/manual/zh/imap.configuration.php#ini.imap.enable-insecure-rsh">imap.enable_insecure_rsh</a> if you want to enable them. Note that the IMAP library does not filter mailbox names before passing them to the <strong>rsh</strong>/<strong>ssh</strong> command, thus passing untrusted data to this function with <strong>rsh</strong>/<strong>ssh</strong> enabled is insecure.</p>
</li>
<li>
<p>Due to added support for named captures, <code>mb_ereg_*()</code> patterns using named captures will behave differently. In particular named captures will be part of matches and <a href="https://www.php.net/manual/zh/function.mb-ereg-replace.php">mb_ereg_replace()</a> will interpret additional syntax. See <a href="https://www.php.net/manual/zh/migration73.new-features.php#migration73.new-features.mbstring.named-captures">Named Captures</a> for more information.</p>
</li>
<li>
<p>MySQL Improved Extension. Prepared statements now properly report the fractional seconds for DATETIME, TIME and TIMESTAMP columns with decimals specifier (e.g. TIMESTAMP(6) when using microseconds). Formerly, the fractional seconds part was simply omitted from the returned values.</p>
</li>
<li>
<p>Prepared statements now properly report the fractional seconds for <code>DATETIME</code>, <code>TIME</code> and <code>TIMESTAMP</code> columns with decimals specifier (e.g. <code>TIMESTAMP(6)</code> when using microseconds). Formerly, the fractional seconds part was simply omitted from the returned values. Please note that this only affects the usage of <a href="https://www.php.net/manual/zh/ref.pdo-mysql.php">PDO_MYSQL</a> with emulated prepares turned off (e.g. using the native preparation functionality). Statements using connections having <strong><code>PDO::ATTR_EMULATE_PREPARES</code></strong>=<strong><code>true</code></strong> (which is the default) were not affected by the bug fixed and have already been getting the proper fractional seconds values from the engine.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/book.reflection.php">Reflection</a> export to string now uses <code>int</code> and <code>bool</code> instead of <code>integer</code> and <code>boolean</code>, respectively.</p>
</li>
<li>
<p>If an <a href="https://www.php.net/manual/zh/book.spl.php">SPL</a> autoloader throws an exception, following autoloaders will not be executed. Previously all autoloaders were executed and exceptions were chained.</p>
</li>
<li>
<p>Mathematic operations involving <a href="https://www.php.net/manual/zh/book.simplexml.php">SimpleXML</a> objects will now treat the text as an int or float, whichever is more appropriate. Previously values were treated as ints unconditionally.</p>
</li>
<li>
<p>As of PHP 7.3.23, the names of incoming cookies are no longer url-decoded for security reasons.</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>大小写不敏感的常量声明现已被废弃。将 <strong><code>true</code></strong> 作为第三个参数传递给 <a href="https://www.php.net/manual/zh/function.define.php">define()</a> 将会导致一个废弃警告。大小写不敏感的使用（在读取时使用一个与声明时不同的大小写方式）也已被废弃。</p>
</li>
<li>
<p>废弃：在一个命名空间中声明一个名为 <code>assert()</code> 的函数。 <a href="https://www.php.net/manual/zh/function.assert.php">assert()</a> 函数属于引擎特殊处理的情况，当在命名空间中使用相同名字去定义 函数时也许会导致不一致的行为。</p>
</li>
<li>
<p>废弃：将一个非字符串内容传递给字符串搜索函数。 在将来所有待搜索的内容都将被视为字符串，而不是 ASCII 编码值。如果需要依赖这个特性，你应该 要么显示地进行类型转换（转为字符串），或者显示地调用 <a href="https://www.php.net/manual/zh/function.chr.php">chr()</a>。 以下是受到影响的方法：</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.strpos.php">strpos()</a></li>
<li><a href="https://www.php.net/manual/zh/function.strrpos.php">strrpos()</a></li>
<li><a href="https://www.php.net/manual/zh/function.stripos.php">stripos()</a></li>
<li><a href="https://www.php.net/manual/zh/function.strripos.php">strripos()</a></li>
<li><a href="https://www.php.net/manual/zh/function.strstr.php">strstr()</a></li>
<li><a href="https://www.php.net/manual/zh/function.strchr.php">strchr()</a></li>
<li><a href="https://www.php.net/manual/zh/function.strrchr.php">strrchr()</a></li>
<li><a href="https://www.php.net/manual/zh/function.stristr.php">stristr()</a></li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.fgetss.php">fgetss()</a> 函数和 <a href="https://www.php.net/manual/zh/filters.string.php">string.strip_tags stream filter</a> 已经被废弃。这同样影响了 <a href="https://www.php.net/manual/zh/splfileobject.fgetss.php">SplFileObject::fgetss()</a> 方法和 <a href="https://www.php.net/manual/zh/function.gzgetss.php">gzgetss()</a> 函数。</p>
</li>
<li>
<p>对于 FILTER_FLAG_SCHEME_REQUIRED 和 FILTER_FLAG_HOST_REQUIRED 常量的显示使用已被废弃。 总之，FILTER_VALIDATE_URL 已经隐含了这两者。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.image2wbmp.php">image2wbmp()</a> 已被废弃。</p>
</li>
<li>
<p>如果 PHP 关联的ICU ≥ 56, 那么 Normalizer::NONE 形式的使用将会导致抛出一个废弃警告。</p>
</li>
<li>
<p>以下在文档中不存在的 <code>mbereg_*()</code> 别名已被废弃。请使用相应的 <code>mb_ereg_*()</code> 变体替代。</p>
<ul>
<li><strong>mbregex_encoding()</strong></li>
<li><strong>mbereg()</strong></li>
<li><strong>mberegi()</strong></li>
<li><strong>mbereg_replace()</strong></li>
<li><strong>mberegi_replace()</strong></li>
<li><strong>mbsplit()</strong></li>
<li><strong>mbereg_match()</strong></li>
<li><strong>mbereg_search()</strong></li>
<li><strong>mbereg_search_pos()</strong></li>
<li><strong>mbereg_search_regs()</strong></li>
<li><strong>mbereg_search_init()</strong></li>
<li><strong>mbereg_search_getregs()</strong></li>
<li><strong>mbereg_search_getpos()</strong></li>
<li><strong>mbereg_search_setpos()</strong></li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/ref.pdo-odbc.php#ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</a> ini 设置项在先前已被废弃。 它在文档中自 PHP 5.1.1 起被废弃</p>
</li>
</ul>
<h2 id="新特性"><a class="header-anchor" href="#新特性">¶</a>新特性</h2>
<ul>
<li>
<p>Heredoc 和 Nowdoc 语法变的更灵活。现在支持闭合标记符的缩进，并且不再强制闭合标记符的换行。</p>
</li>
<li>
<p>Array destructuring now supports reference assignments using the syntax <code>[&amp;$a, [$b, &amp;$c]] = $d</code>. The same is also supported for <a href="https://www.php.net/manual/zh/function.list.php">list()</a>.</p>
</li>
<li>
<p>instanceof now allows literals as the first operand, in which case the result is always false.</p>
</li>
<li>
<p>CompileError Exception instead of some Compilation Errors</p>
</li>
<li>
<p>Trailing commas in function and method calls are now allowed.</p>
</li>
<li>
<p>New options have been added to customize the FPM logging:</p>
<ul>
<li>log_limit</li>
<li>log_buffering</li>
<li>decorate_workers_output</li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.bcscale.php">bcscale()</a> can now also be used as getter to retrieve the current scale in use.</p>
</li>
<li>
<p>Full support for LDAP Controls has been added to the <a href="https://www.php.net/manual/zh/book.ldap.php">LDAP</a> querying functions and <a href="https://www.php.net/manual/zh/function.ldap-parse-result.php">ldap_parse_result()</a></p>
</li>
<li>
<p>Multibyte String Functions</p>
<ul>
<li>
<p>Support for full case-mapping and case-folding has been added. Unlike simple case-mapping, full case-mapping may change the length of the string.</p>
</li>
<li>
<p>Case-insensitive string operations now use case-folding instead of case- mapping during comparisons. This means that more characters will be considered (case insensitively) equal now.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.mb-convert-case.php">mb_convert_case()</a> with <strong><code>MB_CASE_TITLE</code></strong> now performs title-case conversion based on the Cased and CaseIgnorable derived Unicode properties. In particular this also improves handling of quotes and apostrophes.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/book.mbstring.php">Multibyte String</a> data tables have been updated for Unicode 11.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/ref.mbstring.php">Multibyte String Functions</a> now correctly support strings larger than 2GB.</p>
</li>
<li>
<p>Performance of the <a href="https://www.php.net/manual/zh/book.mbstring.php">Multibyte String</a> extension has been significantly improved across the board. The largest improvements are in case conversion functions.</p>
</li>
<li>
<p>The mb_ereg_* functions now support named captures.</p>
</li>
</ul>
</li>
<li>
<p>Support for the <code>completion_append_character</code> and <code>completion_suppress_append</code> options has been added to <a href="https://www.php.net/manual/zh/function.readline-info.php">readline_info()</a>. These options are only available if PHP is linked against libreadline (rather than libedit).</p>
</li>
</ul>
<h1 id="变化"><a class="header-anchor" href="#变化">¶</a>变化</h1>
<p><a href="https://www.php.net/ChangeLog-7.php#PHP_7_3">这里可以找到原文</a></p>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
        <tag>PHP7</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 8.0.0</title>
    <url>/2020/11/26/PHP-8-0-0/</url>
    <content><![CDATA[<p><a href="https://www.php.net/ChangeLog-8.php#PHP_8_0">在这里可以参看原文</a></p>
<ul>
<li>BZ2:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/71263">#71263</a> (fread() does not report bzip2.decompress errors).</li>
</ul>
</li>
<li>CLI:
<ul>
<li>Allow debug server binding to an ephemeral port via `-S localhost:0`.</li>
</ul>
</li>
<li>COM:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/55847">#55847</a> (DOTNET .NET 4.0 GAC new location).</li>
<li>Fixed bug <a href="http://bugs.php.net/62474">#62474</a> (com_event_sink crashes on certain arguments).</li>
</ul>
</li>
<li>Calendar:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/80007">#80007</a> (Potential type confusion in unixtojd() parameter parsing).</li>
</ul>
</li>
<li>Core:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/36365">#36365</a> (scandir duplicates file name at every 65535th file).</li>
<li>Fixed bug <a href="http://bugs.php.net/49555">#49555</a> (Fatal error “Function must be a string” message should be renamed).</li>
<li>Fixed bug <a href="http://bugs.php.net/62294">#62294</a> (register_shutdown_function() does not correctly handle exit code).</li>
<li>Fixed bug <a href="http://bugs.php.net/62609">#62609</a> (Allow implementing Traversable on abstract classes).</li>
<li>Fixed bug <a href="http://bugs.php.net/65274">#65274</a> (Enhance undefined class constant error with class name).</li>
<li>Fixed bug <a href="http://bugs.php.net/65275">#65275</a> (Calling exit() in a shutdown function does not change the exit value in CLI).</li>
<li>Fixed bug <a href="http://bugs.php.net/69084">#69084</a> (Unclear error message when not implementing a renamed abstract trait function).</li>
<li>Fixed bug <a href="http://bugs.php.net/70839">#70839</a> (Converting optional argument to variadic forbidden by LSP checks).</li>
<li>Fixed bug <a href="http://bugs.php.net/74558">#74558</a> (Can’t rebind closure returned by Closure::fromCallable()).</li>
<li>Fixed bug <a href="http://bugs.php.net/77561">#77561</a> (Shebang line not stripped for non-primary script).</li>
<li>Fixed bug <a href="http://bugs.php.net/77619">#77619</a> (Wrong reflection on MultipleIterator::__construct).</li>
<li>Fixed bug <a href="http://bugs.php.net/77966">#77966</a> (Cannot alias a method named “namespace”).</li>
<li>Fixed bug <a href="http://bugs.php.net/78236">#78236</a> (convert error on receiving variables when duplicate [).</li>
<li>Fixed bug <a href="http://bugs.php.net/78770">#78770</a> (Incorrect callability check inside internal methods).</li>
<li>Fixed bug <a href="http://bugs.php.net/79108">#79108</a> (Referencing argument in a function makes it a reference in the stack trace).</li>
<li>Fixed bug <a href="http://bugs.php.net/79368">#79368</a> (“Unexpected end of file” is not an acceptable error message).</li>
<li>Fixed bug <a href="http://bugs.php.net/79462">#79462</a> (method_exists and property_exists incoherent behavior).</li>
<li>Fixed bug <a href="http://bugs.php.net/79467">#79467</a> (data:// wrappers are writable).</li>
<li>Fixed bug <a href="http://bugs.php.net/79521">#79521</a> (Check __set_state structure).</li>
<li>Fixed bug <a href="http://bugs.php.net/79790">#79790</a> (“Illegal offset type” exception during AST evaluation not handled properly).</li>
<li>Fixed bug <a href="http://bugs.php.net/79791">#79791</a> (Assertion failure when unsetting variable during binary op).</li>
<li>Fixed bug <a href="http://bugs.php.net/79828">#79828</a> (Segfault when trying to access non-existing variable).</li>
<li>Fixed bug <a href="http://bugs.php.net/79841">#79841</a> (Syntax error in configure / unescaped “[]” in php.m4).</li>
<li>Fixed bug <a href="http://bugs.php.net/79852">#79852</a> (count(DOMNodeList) doesn’t match count(IteratorIterator(DOMNodeList))).</li>
<li>Fixed bug <a href="http://bugs.php.net/79867">#79867</a> (Promoted untyped properties should get null default value).</li>
<li>Fixed bug <a href="http://bugs.php.net/79897">#79897</a> (Promoted constructor params with attribs cause crash).</li>
<li>Fixed bug <a href="http://bugs.php.net/79927">#79927</a> (Generator doesn’t throw exception after multiple yield from iterable).</li>
<li>Fixed bug <a href="http://bugs.php.net/79946">#79946</a> (Build fails due to undeclared UINT32_C).</li>
<li>Fixed bug <a href="http://bugs.php.net/79948">#79948</a> (Exit in auto-prepended file does not abort PHP execution).</li>
<li>Fixed bug <a href="http://bugs.php.net/80045">#80045</a> (memleak after two set_exception_handler calls with __call).</li>
<li>Fixed bug <a href="http://bugs.php.net/80096">#80096</a> (Segmentation fault with named arguments in nested call).</li>
<li>Fixed bug <a href="http://bugs.php.net/80109">#80109</a> (Cannot skip arguments when extended debug is enabled).</li>
<li>Fixed bug <a href="http://bugs.php.net/80225">#80225</a> (broken namespace usage in eval code).</li>
<li>Fixed bug <a href="http://bugs.php.net/80258">#80258</a> (Windows Deduplication Enabled, randon permission errors).</li>
<li>Fixed bug <a href="http://bugs.php.net/80280">#80280</a> (ADD_EXTENSION_DEP() fails for ext/standard and ext/date).</li>
<li>Fixed bug <a href="http://bugs.php.net/80334">#80334</a> (assert() vs named parameters - confusing error).</li>
<li>Fixed bug <a href="http://bugs.php.net/80055">#80055</a> (Abstract trait methods returning “self” cannot be fulfilled by traits).</li>
<li>Fixed faulty generator cleanup with yield from.</li>
<li>Implement #[Attr] Attribute syntax as per final vote in RFC <a href="https://wiki.php.net/rfc/shorter_attribute_syntax_change">https://wiki.php.net/rfc/shorter_attribute_syntax_change</a></li>
<li>Implemented FR <a href="http://bugs.php.net/47074">#47074</a> (phpinfo() reports “On” as 1 for the some extensions).</li>
<li>Implemented FR <a href="http://bugs.php.net/72089">#72089</a> (require() throws fatal error instead of exception).</li>
<li>Removed the pdo_odbc.db2_instance_name php.ini directive.</li>
<li>Use SSE2 instructions do locale independent strtolower.</li>
<li><a href="https://www.laruence.com/2020/06/16/5916.html">How ?</a></li>
</ul>
</li>
<li>Curl:
<ul>
<li>Bumped required libcurl version to 7.29.0.</li>
<li>Fixed bug <a href="http://bugs.php.net/80121">#80121</a> (Null pointer deref if CurlHandle directly instantiated).</li>
</ul>
</li>
<li>DOM:
<ul>
<li>Add property DOMXPath::$registerNodeNamespaces and constructor argument that allow global flag to configure query() or evaluate() calls.</li>
<li>Fixed bug <a href="http://bugs.php.net/79968">#79968</a> (DOMChildNode API crash on unattached nodes).</li>
<li>Fixed bug <a href="http://bugs.php.net/80268">#80268</a> (loadHTML() truncates at NUL bytes).</li>
</ul>
</li>
<li>Date:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/60302">#60302</a> (DateTime::createFromFormat should new static(), not new self()).</li>
<li>Fixed bug <a href="http://bugs.php.net/65547">#65547</a> (Default value for sunrise/sunset zenith still wrong).</li>
<li>Fixed bug <a href="http://bugs.php.net/69044">#69044</a> (discrepancy between time and microtime).</li>
<li>Fixed bug <a href="http://bugs.php.net/80057">#80057</a> (DateTimeImmutable::createFromFormat() does not populate time).</li>
<li>Implemented FR <a href="http://bugs.php.net/79903">#79903</a> (datetime: new format “p”, same as “P” but returning “Z” for UTC).</li>
</ul>
</li>
<li>Enchant:
<ul>
<li>Add LIBENCHANT_VERSION macro.</li>
<li>Add enchant_dict_add and enchant_dict_is_added functions.</li>
<li>Deprecate enchant_broker_set_dict_path, enchant_broker_get_dict_path, enchant_dict_add_to_personal and enchant_dict_is_in_session.</li>
<li>Use libenchant-2 when available.</li>
</ul>
</li>
<li>FFI:
<ul>
<li>Added FFI\CType::getName() method.</li>
<li>Fixed bug <a href="http://bugs.php.net/79177">#79177</a> (FFI doesn’t handle well PHP exceptions within callback).</li>
<li>Fixed bug <a href="http://bugs.php.net/79749">#79749</a> (Converting FFI instances to bool fails).</li>
</ul>
</li>
<li>FPM:
<ul>
<li>Add pm.status_listen option.</li>
</ul>
</li>
<li>Fileinfo:
<ul>
<li>Upgrade to libmagic 5.39.</li>
</ul>
</li>
<li>GD:
<ul>
<li>Added imagegetinterpolation().</li>
<li>Fixed bug <a href="http://bugs.php.net/55005">#55005</a> (imagepolygon num_points requirement).</li>
<li>Made the $num_points parameter of php_imagepolygon optional.</li>
<li>Removed deprecated image2wbmp().</li>
<li>Removed deprecated png2wbmp() and jpeg2wbmp().</li>
<li>Replaced gd resources with objects.</li>
</ul>
</li>
<li>IMAP:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/64076">#64076</a> (imap_sort() does not return FALSE on failure).</li>
<li>Fixed bug <a href="http://bugs.php.net/76618">#76618</a> (segfault on imap_reopen).</li>
<li>Fixed bug <a href="http://bugs.php.net/80213">#80213</a> (imap_mail_compose() segfaults on certain $bodies).</li>
<li>Fixed bug <a href="http://bugs.php.net/80215">#80215</a> (imap_mail_compose() may modify by-val parameters).</li>
<li>Fixed bug <a href="http://bugs.php.net/80216">#80216</a> (imap_mail_compose() does not validate types/encodings).</li>
<li>Fixed bug <a href="http://bugs.php.net/80220">#80220</a> (imap_mail_compose() may leak memory).</li>
<li>Fixed bug <a href="http://bugs.php.net/80223">#80223</a> (imap_mail_compose() leaks envelope on malformed bodies).</li>
<li>Fixed bug <a href="http://bugs.php.net/80226">#80226</a> (imap_sort() leaks sortpgm memory).</li>
<li>Fixed bug <a href="http://bugs.php.net/80239">#80239</a> (imap_rfc822_write_address() leaks memory).</li>
<li>Fixed bug <a href="http://bugs.php.net/80242">#80242</a> (imap_mail_compose() segfaults for multipart with rfc822).</li>
<li>Fixed minor regression caused by fixing bug <a href="http://bugs.php.net/80220">#80220</a>.</li>
</ul>
</li>
<li>Iconv:
<ul>
<li>Dropped support for iconv without proper errno setting.</li>
</ul>
</li>
<li>Intl:
<ul>
<li>Removed deprecated INTL_IDNA_VARIANT_2003.</li>
</ul>
</li>
<li>JIT:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/77857">#77857</a> (Wrong result if executed with JIT).</li>
<li>Fixed bug <a href="http://bugs.php.net/79255">#79255</a> (PHP cannot be compiled with enable JIT).</li>
<li>Fixed bug <a href="http://bugs.php.net/79582">#79582</a> (Crash seen when opcache.jit=1235 and opcache.jit_debug=2).</li>
<li>Fixed bug <a href="http://bugs.php.net/79743">#79743</a> (Fatal error when assigning to array property with JIT enabled).</li>
<li>Fixed bug <a href="http://bugs.php.net/79864">#79864</a> (JIT segfault in Symfony OptionsResolver).</li>
<li>Fixed bug <a href="http://bugs.php.net/79888">#79888</a> (Incorrect execution with JIT enabled).</li>
</ul>
</li>
<li>JSON:
<ul>
<li>The JSON extension is now an integral part of PHP and cannot be disabled as per RFC: <a href="https://wiki.php.net/rfc/always_enable_json">https://wiki.php.net/rfc/always_enable_json</a> (tandre)</li>
</ul>
</li>
<li>LDAP:
<ul>
<li>Fixed memory leaks.</li>
<li>Removed deprecated ldap_sort.</li>
</ul>
</li>
<li>MBString:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/76999">#76999</a> (mb_regex_set_options() return current options).</li>
<li>Removed the unused $is_hex parameter from mb_decode_numericentity().</li>
</ul>
</li>
<li>MySQLi:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/76809">#76809</a> (SSL settings aren’t respected when persistent connections are used).</li>
</ul>
</li>
<li>Mysqlnd:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/60594">#60594</a> (mysqlnd exposes 160 lines of stats in phpinfo).</li>
</ul>
</li>
<li>OCI8:
<ul>
<li>Deprecated old OCI8 function aliases.</li>
<li>Modernized oci_register_taf_callback() callable argument parsing implementation.</li>
<li>Removed obsolete no-op function oci_internal_debug().</li>
</ul>
</li>
<li>ODBC:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/22986">#22986</a> (odbc_connect() may reuse persistent connection).</li>
<li>Fixed bug <a href="http://bugs.php.net/44618">#44618</a> (Fetching may rely on uninitialized data).</li>
</ul>
</li>
<li>Opcache:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/76535">#76535</a> (Opcache does not replay compile-time warnings).</li>
<li>Fixed bug <a href="http://bugs.php.net/78654">#78654</a> (Incorrectly computed opcache checksum on files with non-ascii characters).</li>
<li>Fixed bug <a href="http://bugs.php.net/79665">#79665</a> (ini_get() and opcache_get_configuration() inconsistency).</li>
<li>Fixed bug <a href="http://bugs.php.net/80030">#80030</a> (Optimizer segfault with isset on static property with undef dynamic class name).</li>
<li>Fixed bug <a href="http://bugs.php.net/80175">#80175</a> (PHP8 RC1 - JIT Buffer not working).</li>
<li>Fixed bug <a href="http://bugs.php.net/80184">#80184</a> (Complex expression in while / if statements resolves to false incorrectly).</li>
<li>Fixed bug <a href="http://bugs.php.net/80255">#80255</a> (Opcache bug (bad condition result) in 8.0.0rc1).</li>
<li>Fixed run-time binding of preloaded dynamically declared function.</li>
</ul>
</li>
<li>OpenSSL:
<ul>
<li>Added Cryptographic Message Syntax (CMS) support.</li>
</ul>
</li>
<li>PCRE:
<ul>
<li>Don’t ignore invalid escape sequences.</li>
<li>Updated to PCRE2 10.35.</li>
</ul>
</li>
<li>PDO:
<ul>
<li>Changed default PDO error mode to exceptions.</li>
<li>Fixed bug <a href="http://bugs.php.net/77849">#77849</a> (Disable cloning of PDO handle/connection objects).</li>
</ul>
</li>
<li>PDO_Firebird:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/64937">#64937</a> (Firebird PDO preprocessing sql).</li>
</ul>
</li>
<li>PDO_OCI:
<ul>
<li>Added support for setting and getting the oracle OCI 18c call timeout.</li>
</ul>
</li>
<li>PDO_PGSQL:
<ul>
<li>Bumped required libpq version to 9.1.</li>
</ul>
</li>
<li>PGSQL:
<ul>
<li>Bumped required libpq version to 9.1.</li>
</ul>
</li>
<li>Phpdbg:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/76596">#76596</a> (phpdbg support for display_errors=stderr).</li>
<li>Fixed bug <a href="http://bugs.php.net/76801">#76801</a> (too many open files).</li>
<li>Fixed bug <a href="http://bugs.php.net/77800">#77800</a> (phpdbg segfaults on listing some conditional breakpoints).</li>
<li>Fixed bug <a href="http://bugs.php.net/77805">#77805</a> (phpdbg build fails when readline is shared).</li>
</ul>
</li>
<li>Reflection:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/64592">#64592</a> (ReflectionClass::getMethods() returns methods out of scope).</li>
<li>Fixed bug <a href="http://bugs.php.net/69180">#69180</a> (Reflection does not honor trait conflict resolution / method aliasing).</li>
<li>Fixed bug <a href="http://bugs.php.net/74939">#74939</a> (Nested traits’ aliased methods are lowercased).</li>
<li>Fixed bug <a href="http://bugs.php.net/77325">#77325</a> (ReflectionClassConstant::$class returns wrong class when extending).</li>
<li>Fixed bug <a href="http://bugs.php.net/78697">#78697</a> (ReflectionClass::implementsInterface - inaccurate error message with traits).</li>
<li>Fixed bug <a href="http://bugs.php.net/80190">#80190</a> (ReflectionMethod::getReturnType() does not handle static as part of union type).</li>
<li>Fixed bug <a href="http://bugs.php.net/80299">#80299</a> (ReflectionFunction-&gt;invokeArgs confused in arguments).</li>
<li>Fixed bug <a href="http://bugs.php.net/80370">#80370</a> (getAttributes segfault on dynamic properties).</li>
<li>Implemented FR <a href="http://bugs.php.net/79628">#79628</a> (Add $filter parameter for ReflectionClass::getConstants and ReflectionClass::getReflectionConstants) (carusogabriel)</li>
<li>Implement ReflectionProperty::hasDefaultValue and Reflection::getDefaultValue (beberlei)</li>
</ul>
</li>
<li>SNMP:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70461">#70461</a> (disable md5 code when it is not supported in net-snmp).</li>
</ul>
</li>
<li>SPL:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/65006">#65006</a> (spl_autoload_register fails with multiple callables using self, same method).</li>
<li>Fixed bug <a href="http://bugs.php.net/65387">#65387</a> (Circular references in SPL iterators are not garbage collected).</li>
<li>Fixed bug <a href="http://bugs.php.net/71236">#71236</a> (Second call of spl_autoload_register() does nothing if it has no arguments).</li>
<li>Fixed bug <a href="http://bugs.php.net/79987">#79987</a> (Memory leak in SplFileInfo because of missing zend_restore_error_handling()).</li>
<li>SplFixedArray is now IteratorAggregate rather than Iterator.</li>
</ul>
</li>
<li>SQLite3:
<ul>
<li>Added SQLite3::setAuthorizer() and respective class constants.</li>
</ul>
</li>
<li>Session:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73529">#73529</a> (session_decode() silently fails on wrong input).</li>
<li>Fixed bug <a href="http://bugs.php.net/78624">#78624</a> (session_gc return value for user defined session handlers).</li>
</ul>
</li>
<li>Shmop:
<ul>
<li>Converted shmop resources to objects.</li>
</ul>
</li>
<li>SimpleXML:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/63575">#63575</a> (Root elements are not properly cloned).</li>
<li>Fixed bug <a href="http://bugs.php.net/75245">#75245</a> (Don’t set content of elements with only whitespaces).</li>
</ul>
</li>
<li>Sodium:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/77646">#77646</a> (sign_detached() strings not terminated).</li>
</ul>
</li>
<li>Standard:
<ul>
<li>Don’t force rebuild of symbol table, when populating $http_response_header variable by the HTTP stream wrapper.</li>
<li>Fixed bug <a href="http://bugs.php.net/47983">#47983</a> (mixed LF and CRLF line endings in mail()).</li>
<li>Fixed bug <a href="http://bugs.php.net/64060">#64060</a> (lstat_stat_variation7.phpt fails on certain file systems).</li>
<li>Fixed bug <a href="http://bugs.php.net/75902">#75902</a> (str_replace should warn when misused with nested arrays).</li>
<li>Fixed bug <a href="http://bugs.php.net/76859">#76859</a> (stream_get_line skips data if used with data-generating filter).</li>
<li>Fixed bug <a href="http://bugs.php.net/77204">#77204</a> (getimagesize(): Read error! should mention file path).</li>
<li>Fixed bug <a href="http://bugs.php.net/78385">#78385</a> (parse_url() does not include ‘query’ when question mark is the last char).</li>
<li>Fixed bug <a href="http://bugs.php.net/79868">#79868</a> (Sorting with array_unique gives unwanted result).</li>
<li>Fixed bug <a href="http://bugs.php.net/80256">#80256</a> (file_get_contents strip first line with chunked encoding redirect).</li>
<li>Fixed bug <a href="http://bugs.php.net/80266">#80266</a> (parse_url silently drops port number 0).</li>
<li>Fixed bug <a href="http://bugs.php.net/80290">#80290</a> (Double free when ASSERT_CALLBACK is used with a dynamic message).</li>
<li>Implemented FR <a href="http://bugs.php.net/78638">#78638</a> (__PHP_Incomplete_Class should be final).</li>
<li>Made quoting of cmd execution functions consistent.</li>
</ul>
</li>
<li>Tidy:
<ul>
<li>Removed the unused $use_include_path parameter from tidy_repair_string().</li>
</ul>
</li>
<li>Tokenizer:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/80328">#80328</a> (PhpToken::getAll() confusing name).</li>
</ul>
</li>
<li>XML:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/76874">#76874</a> (xml_parser_free() should never leak memory).</li>
</ul>
</li>
<li>XMLWriter:
<ul>
<li>Changed functions to accept/return XMLWriter objects instead of resources.</li>
<li>Implemented FR <a href="http://bugs.php.net/79344">#79344</a> (xmlwriter_write_attribute_ns: $prefix should be nullable).</li>
<li>Removed return types from XMLWriter stubs.</li>
</ul>
</li>
<li>Zip:
<ul>
<li>Add “flags” options to ZipArchive::addGlob and addPattern methods keeping previous behavior having FL_OVERWRITE by default.</li>
<li>Add ZipArchive::EM_UNKNOWN and ZipArchive::EM_TRAD_PKWARE constants.</li>
<li>Add ZipArchive::isCompressionMethodSupported() and ZipArchive::isEncryptionMethodSupported() method (libzip 1.7.0).</li>
<li>Add ZipArchive::replaceFile() method.</li>
<li>Add ZipArchive::setCancelCallback method (since libzip 1.6.0).</li>
<li>Add ZipArchive::setMtimeName and ZipArchive::setMtimeIndex methods.</li>
<li>Add ZipArchive::setProgressCallback method (since libzip 1.3.0).</li>
<li>Add lastId property to ZipArchive.</li>
<li>Add optional “flags” parameter to ZipArchive::addEmptyDir, addFile and addFromString methods.</li>
<li>Fixed bug <a href="http://bugs.php.net/50678">#50678</a> (files extracted by ZipArchive class lost their original modified time).</li>
<li>Fixed bug <a href="http://bugs.php.net/72374">#72374</a> (remove_path strips first char of filename).</li>
<li>Implemented FR <a href="http://bugs.php.net/77960">#77960</a> (add compression / encryption options for ZipArchive::addGlob and ZipArchive::addPattern).</li>
<li>ZipArchive::status and ZipArchive::statusSys properties and ZipArchive::getStatusString() method stay valid after the archive is closed.</li>
</ul>
</li>
<li>Zlib:
<ul>
<li>Fixed bug <a href="http://bugs.php.net/71417">#71417</a> (fread() does not report zlib.inflate errors).</li>
<li>Fixed bug <a href="http://bugs.php.net/78792">#78792</a> (zlib.output_compression disabled by Content-Type: image/).</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
        <tag>PHP8</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 7.2.0 Published</title>
    <url>/2017/11/30/PHP-Version-7-2-0-Published/</url>
    <content><![CDATA[<h1 id="目标及关键路径"><a class="header-anchor" href="#目标及关键路径">¶</a>目标及关键路径</h1>
<ul>
<li>性能提升</li>
</ul>
<h1 id="从-PHP-7-1-x-移植到-PHP-7-2-x"><a class="header-anchor" href="#从-PHP-7-1-x-移植到-PHP-7-2-x">¶</a>从 PHP 7.1.x 移植到 PHP 7.2.x</h1>
<p><a href="https://www.php.net/manual/zh/migration72.php">这里可以找到原文</a></p>
<h2 id="不向下兼容的变更"><a class="header-anchor" href="#不向下兼容的变更">¶</a>不向下兼容的变更</h2>
<ul>
<li>
<p>防止 number_format() 返回负零，之前版本中，<a href="https://www.php.net/manual/zh/function.number-format.php">number_format()</a> 有可能会返回 <code>-0</code>。虽然这是符合 IEEE 754 规范的，但是这样会导致可读性不好，新版本中会将这样的负数去掉。</p>
</li>
<li>
<p>将数组转换为对象，或将对象转换为数组时，数字键现在得到了更好的处理（无论是通过显式转换还是通过 <a href="https://www.php.net/manual/zh/function.settype.php">settype()</a> 函数）。</p>
</li>
<li>
<p>get_class() 函数不再接受 null 参数，之前版本中，传递 <strong><code>null</code></strong> 给 <a href="https://www.php.net/manual/zh/function.get-class.php">get_class()</a> 函数将返回当前类名。在新版本中，此行为会抛出一个 <strong><code>E_WARNING</code></strong> 错误。如果想实现与之前版本同样的效果，请不要传递任何参数进来。</p>
</li>
<li>
<p>对非可数类型调用 <a href="https://www.php.net/manual/zh/function.count.php">count()</a>（或 <a href="https://www.php.net/manual/zh/function.sizeof.php">sizeof()</a>）函数，会抛出一个 <strong><code>E_WARNING</code></strong> 错误。</p>
</li>
<li>
<p>ext/hash 从资源变成对象</p>
</li>
<li>
<p>SSL/TLS 的下列默认选项被修改：</p>
<ul>
<li><code>tls://</code> 默认为 TLSv1.0 or TLSv1.1 or TLSv1.2</li>
<li><code>ssl://</code> 成为 <code>tls://</code> 的别名</li>
<li><code>STREAM_CRYPTO_METHOD_TLS_*</code> 常量默认为 TLSv1.0 或 TLSv1.1 + TLSv1.2，替代之前的 TLSv1.0</li>
</ul>
</li>
<li>
<p>之前版本中，如果在一个闭包资源中使用 <a href="https://www.php.net/manual/zh/function.gettype.php">gettype()</a> 会返回字符串 <code>&quot;unknown type&quot;</code>，现在将会返回字符 <code>&quot;resource (closed)&quot;</code>。</p>
</li>
<li>
<p>之前版本中，对 <strong>__PHP_Incomplete_Class</strong> 调用 <a href="https://www.php.net/manual/zh/function.is-object.php">is_object()</a> 函数会返回 <strong><code>false</code></strong>，现在会返回 <strong><code>true</code></strong>。</p>
</li>
<li>
<p>调用未定义的常量，现在会抛出一个 <strong><code>E_WARNING</code></strong> 错误(之前版本中为 <strong><code>E_NOTICE</code></strong>)。在下一个 PHP 大版本中，将会抛出一个 <a href="https://www.php.net/manual/zh/class.error.php">Error</a> 错误。</p>
</li>
<li>
<p>官方支持的最低 Windows 版本为 Windows 7/Server 2008 R2。</p>
</li>
<li>
<p>Compatibility checks upon default trait property values will no longer perform casting.</p>
</li>
<li>
<p>object 在之前的 PHP 7.0 版本 中被声明为软保留字（soft-reserved）。现在变更为强制保留字，禁止在任何类或接口中使用该名称。</p>
</li>
<li>
<p>NetWare 已不再被支持。</p>
</li>
<li>
<p>While <a href="https://www.php.net/manual/zh/function.array-unique.php">array_unique()</a> with <strong><code>SORT_STRING</code></strong> formerly copied the array and removed non-unique elements (without packing the array afterwards), now a new array is built by adding the unique elements. This can result in different numeric indexes.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/function.bcmod.php">bcmod()</a> function no longer truncates fractional numbers to integers. As such, its behavior now follows <a href="https://www.php.net/manual/zh/function.fmod.php">fmod()</a>, rather than the <code>%</code> operator. For example <code>bcmod('4', '3.5')</code> now returns <code>0.5</code> instead of <code>1</code>.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/function.hash-hmac.php">hash_hmac()</a>, <a href="https://www.php.net/manual/zh/function.hash-hmac-file.php">hash_hmac_file()</a>, <a href="https://www.php.net/manual/zh/function.hash-pbkdf2.php">hash_pbkdf2()</a>, and <a href="https://www.php.net/manual/zh/function.hash-init.php">hash_init()</a> (with <strong><code>HASH_HMAC</code></strong>) functions no longer accept non-cryptographic hashes.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/function.json-decode.php">json_decode()</a> function option, <strong><code>JSON_OBJECT_AS_ARRAY</code></strong>, is now used if the second parameter (assoc) is <strong><code>null</code></strong>. Previously, <strong><code>JSON_OBJECT_AS_ARRAY</code></strong> was always ignored.</p>
</li>
<li>
<p>Sequences generated by <a href="https://www.php.net/manual/zh/function.rand.php">rand()</a> and <a href="https://www.php.net/manual/zh/function.mt-rand.php">mt_rand()</a> for a specific seed may differ from PHP 7.1 on 64-bit machines (due to the fixing of a modulo bias bug in the implementation).</p>
</li>
<li>
<p>sql.safe_mode ini 设置项已被移除。</p>
</li>
<li>
<p>The <code>zone</code> element of the array returned by <a href="https://www.php.net/manual/zh/function.date-parse.php">date_parse()</a> and <a href="https://www.php.net/manual/zh/function.date-parse-from-format.php">date_parse_from_format()</a> represents seconds instead of minutes now, and its sign is inverted. For instance <code>-120</code> is now <code>7200</code>.</p>
</li>
<li>
<p>As of PHP 7.2.34, the names of incoming cookies are no longer url-decoded for security reasons.</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。 在以前，该行为会产生 <strong><code>E_NOTICE</code></strong>，但现在会产生 <strong><code>E_WARNING</code></strong>。在下一个 PHP 主版本中，将抛出 <a href="https://www.php.net/manual/zh/class.error.php">Error</a> 异常。</p>
</li>
<li>
<p>GD 扩展内的 <a href="https://www.php.net/manual/zh/function.png2wbmp.php">png2wbmp()</a> 和 <a href="https://www.php.net/manual/zh/function.jpeg2wbmp.php">jpeg2wbmp()</a> 现已被废弃，将在下一个 PHP 主版本中移除。</p>
</li>
<li>
<p>Intl 扩展废弃了 <strong><code>INTL_IDNA_VARIANT_2003</code></strong> 转化，为<a href="https://www.php.net/manual/zh/function.idn-to-ascii.php">idn_to_ascii()</a> 和 <a href="https://www.php.net/manual/zh/function.idn-to-utf8.php">idn_to_utf8()</a> 的默认选项。 PHP 7.4 会把默认值设置为 <strong><code>INTL_IDNA_VARIANT_UTS46</code></strong>， 并在下一个 PHP 主版本中完全移除 <strong><code>INTL_IDNA_VARIANT_2003</code></strong>。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.autoload.php">__autoload()</a> 方法已被废弃， 因为和 <a href="https://www.php.net/manual/zh/function.spl-autoload-register.php">spl_autoload_register()</a> 相比功能较差 (因为无法链式处理多个 autoloader)， 而且也无法在两种 autoloading 样式中配合使用。</p>
</li>
<li>
<p>当开启了 <code>track_errors</code> ini 设置，出现非致命错误时， 会在本地作用域创建 <code>$php_errormsg</code> 变量。 由于提供了更好的方式： <a href="https://www.php.net/manual/zh/function.error-get-last.php">error_get_last()</a> 来获取此类错误信息，该功能被废弃。</p>
</li>
<li>
<p>考虑到create_function() 函数的安全隐患问题（它是 <a href="https://www.php.net/manual/zh/function.eval.php">eval()</a> 的瘦包装器），该过时的函数现在已被废弃。 更好的选择是<a href="https://www.php.net/manual/zh/functions.anonymous.php">匿名函数</a>。</p>
</li>
<li>
<p>mbstring.func_overload ini 设置，由于此设置会影响环境中的字符串系列函数，带来相互操作中的问题，它现在已被废弃。</p>
</li>
<li>
<p>转化任意表达式为(unset)类型，结果总是 null，所以这个多余的类型转化现在也就被废弃了。</p>
</li>
<li>
<p>使用 <a href="https://www.php.net/manual/zh/function.parse-str.php">parse_str()</a> 时，不加第二个参数会导致查询字符串参数导入当前符号表。 考虑到安全隐患问题，不加第二个参数使用 <a href="https://www.php.net/manual/zh/function.parse-str.php">parse_str()</a> 的行为已被废弃。 此函数的第二个选项为必填项，它使查询字符串转为 Array。</p>
</li>
<li>
<p>此函数基于未知的、取决于平台的 limb 尺寸产生随机数。因此，该函数已被废弃。 使用更好的方式产生随机数： GMP 扩展中的 <a href="https://www.php.net/manual/zh/function.gmp-random-bits.php">gmp_random_bits()</a> 和 <a href="https://www.php.net/manual/zh/function.gmp-random-range.php">gmp_random_range()</a>。</p>
</li>
<li>
<p>使用each() 函数遍历时，比普通的 foreach 更慢， 并且给新语法的变化带来实现问题。因此它被废弃了。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.assert.php">assert()</a> 字符串参数将要求它能被 <a href="https://www.php.net/manual/zh/function.eval.php">eval()</a> 执行。 考虑到可能被执行远程代码，废弃了字符串的 <a href="https://www.php.net/manual/zh/function.assert.php">assert()</a>，最好提供 bool 的表达式。</p>
</li>
<li>
<p>$errcontext 参数包含了错误网站的所有本地变量。 考虑到它很少被用到，而且还会导致内部优化问题，它现在被废弃了。 代替用法：调试器应该自己取回错误站点的本地变量。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.read-exif-data.php">read_exif_data()</a> 别名已被废弃 使用 <a href="https://www.php.net/manual/zh/function.exif-read-data.php">exif_read_data()</a> 函数代替。</p>
</li>
</ul>
<h2 id="新特性"><a class="header-anchor" href="#新特性">¶</a>新特性</h2>
<ul>
<li>
<p>这种新的对象类型, object, 引进了可用于逆变（contravariant）参数输入和协变（covariant）返回任何对象类型。</p>
</li>
<li>
<p>扩展文件不再需要通过文件加载 (Unix下以<code>.so</code>为文件扩展名，在Windows下以 <code>.dll</code> 为文件扩展名) 进行指定。可以在php.ini配置文件进行启用, 也可以使用 <a href="https://www.php.net/manual/zh/function.dl.php">dl()</a> 函数进行启用。</p>
</li>
<li>
<p>当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法。</p>
</li>
<li>
<p>使用Argon2算法生成密码散列，Argon2 已经被加入到密码散列（password hashing） API (这些函数以 <code>password_</code> 开头), 以下是暴露出来的常量:</p>
<ul>
<li><strong><code>PASSWORD_ARGON2I</code></strong></li>
<li><strong><code>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</code></strong></li>
<li><strong><code>PASSWORD_ARGON2_DEFAULT_TIME_COST</code></strong></li>
<li><strong><code>PASSWORD_ARGON2_DEFAULT_THREADS</code></strong></li>
</ul>
</li>
<li>
<p>新增 ext/PDO（PDO扩展） 字符串扩展类型，当你准备支持多语言字符集，PDO的字符串类型已经扩展支持国际化的字符集。以下是扩展的常量：</p>
<ul>
<li><strong><code>PDO::PARAM_STR_NATL</code></strong></li>
<li><strong><code>PDO::PARAM_STR_CHAR</code></strong></li>
<li><strong><code>PDO::ATTR_DEFAULT_STR_PARAM</code></strong></li>
</ul>
</li>
<li>
<p>为 ext/PDO新增额外的模拟调试信息，<a href="https://www.php.net/manual/zh/pdostatement.debugdumpparams.php">PDOStatement::debugDumpParams()</a>方法已经更新，当发送SQL到数据库的时候，在一致性、行查询（包括替换绑定占位符）将会显示调试信息。这一特性已经加入到模拟调试中（在模拟调试打开时可用）。</p>
</li>
<li>
<p>LDAP 扩展已经新增了EXOP支持. 扩展暴露以下函数和常量:</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.ldap-parse-exop.php">ldap_parse_exop()</a></li>
<li><a href="https://www.php.net/manual/zh/function.ldap-exop.php">ldap_exop()</a></li>
<li><a href="https://www.php.net/manual/zh/function.ldap-exop-passwd.php">ldap_exop_passwd()</a></li>
<li><a href="https://www.php.net/manual/zh/function.ldap-exop-whoami.php">ldap_exop_whoami()</a></li>
<li><strong><code>LDAP_EXOP_START_TLS</code></strong></li>
<li><strong><code>LDAP_EXOP_MODIFY_PASSWD</code></strong></li>
<li><strong><code>LDAP_EXOP_REFRESH</code></strong></li>
<li><strong><code>LDAP_EXOP_WHO_AM_I</code></strong></li>
<li><strong><code>LDAP_EXOP_TURN</code></strong></li>
</ul>
</li>
<li>
<p>sockets扩展现在具有查找地址信息的能力，且可以连接到这个地址，或者进行绑定和解析。为此添加了以下一些函数:</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.socket-addrinfo-lookup.php">socket_addrinfo_lookup()</a></li>
<li><a href="https://www.php.net/manual/zh/function.socket-addrinfo-connect.php">socket_addrinfo_connect()</a></li>
<li><a href="https://www.php.net/manual/zh/function.socket-addrinfo-bind.php">socket_addrinfo_bind()</a></li>
<li><a href="https://www.php.net/manual/zh/function.socket-addrinfo-explain.php">socket_addrinfo_explain()</a></li>
</ul>
</li>
<li>
<p>重写方法和接口实现的参数类型现在可以省略了。不过这仍然是符合LSP，因为现在这种参数类型是逆变的。</p>
</li>
<li>
<p>命名空间可以在PHP 7中使用尾随逗号进行分组引入。</p>
</li>
</ul>
<h1 id="变化"><a class="header-anchor" href="#变化">¶</a>变化</h1>
<p><a href="https://www.php.net/ChangeLog-7.php#PHP_7_2">这里可以找到原文</a></p>
<h2 id="BCMath"><a class="header-anchor" href="#BCMath">¶</a>BCMath</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/46564">#46564</a> (bcmod truncates fractionals).</li>
</ul>
<h2 id="CLI"><a class="header-anchor" href="#CLI">¶</a>CLI</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/74849">#74849</a> (Process is started as interactive shell in PhpStorm).</li>
<li>Fixed bug <a href="http://bugs.php.net/74979">#74979</a> (Interactive shell opening instead of script execution with -f flag).</li>
</ul>
<h2 id="CLI-server"><a class="header-anchor" href="#CLI-server">¶</a>CLI server</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/60471">#60471</a> (Random “Invalid request (unexpected EOF)” using a router script).</li>
</ul>
<h2 id="Core"><a class="header-anchor" href="#Core">¶</a>Core</h2>
<ul>
<li>Removed IS_TYPE_IMMUTABLE (it’s the same as COPYABLE &amp; !REFCOUNTED).</li>
<li>Removed the sql.safe_mode directive.</li>
<li>Removed support for Netware.</li>
<li>Renamed ReflectionClass::isIterateable() to ReflectionClass::isIterable() (alias original name for BC).</li>
<li>Implemented “Deprecate and Remove Bareword (Unquoted) Strings” RFC.</li>
</ul>
<hr>
<ul>
<li>Raised minimum supported Windows versions to Windows 7/Server 2008 R2.</li>
<li>“Countable” interface is moved from SPL to Core.</li>
<li>Implemented FR <a href="http://bugs.php.net/69791">#69791</a> (Disallow mail header injections by extra headers) (Yasuo)</li>
<li>Implemented minor optimization in array_keys/array_values().</li>
<li>Implemented “Trailing Commas In List Syntax” RFC for group use lists only.</li>
<li>Change PHP_OS_FAMILY value from “OSX” to “Darwin”.</li>
<li>Implemented FR <a href="http://bugs.php.net/74963">#74963</a> (Improved error message on fetching property of non-object).</li>
<li>Allow loading PHP/Zend extensions by name in ini files (extension=&lt;name&gt;).</li>
</ul>
<hr>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/49806">#49806</a> (proc_nice() for Windows).</li>
<li>Implemented FR <a href="http://bugs.php.net/72768">#72768</a> (Add ENABLE_VIRTUAL_TERMINAL_PROCESSING flag for php.exe).</li>
<li>Added ZEND_COUNT, ZEND_GET_CLASS, ZEND_GET_CALLED_CLASS, ZEND_GET_TYPE, ZEND_FUNC_NUM_ARGS, ZEND_FUNC_GET_ARGS instructions, to implement corresponding builtin functions.</li>
<li>Added ZEND_IN_ARRAY instruction, implementing optimized in_array() builtin function, through hash lookup in flipped array.</li>
<li>Added PHP_OS_FAMILY constant to determine on which OS we are.</li>
<li>Added object type annotation.</li>
<li>Added new VM instuctions ISSET_ISEMPTY_CV and UNSET_CV. Previously they were implemented as ISSET_ISEMPTY_VAR and UNSET_VAR variants with ZEND_QUICK_SET flag.</li>
</ul>
<hr>
<ul>
<li>
<p>Fixed bug <a href="http://bugs.php.net/54535">#54535</a> (WSA cleanup executes before MSHUTDOWN).</p>
</li>
<li>
<p>Fix pthreads detection when cross-compiling (ffontaine)</p>
</li>
<li>
<p>Fixed memory leaks caused by exceptions thrown from destructors. (Bob, Dmitry).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/73215">#73215</a> (uniqid() should use better random source).</p>
</li>
<li>
<p>Implemented “Convert numeric keys in object/array casts” RFC, fixes bugs <a href="http://bugs.php.net/53838">#53838</a>, <a href="http://bugs.php.net/61655">#61655</a>, <a href="http://bugs.php.net/66173">#66173</a>, <a href="http://bugs.php.net/70925">#70925</a>, <a href="http://bugs.php.net/72254">#72254</a>, etc.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/73987">#73987</a> (Method compatibility check looks to original definition and not parent).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/73991">#73991</a> (JSON_OBJECT_AS_ARRAY not respected).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/74053">#74053</a> (Corrupted class entries on shutdown when a destructor spawns another object).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/73971">#73971</a> (Filename got limited to MAX_PATH on Win32 when scan directory).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/72359">#72359</a>, bug <a href="http://bugs.php.net/72451">#72451</a>, bug <a href="http://bugs.php.net/73706">#73706</a>, bug <a href="http://bugs.php.net/71115">#71115</a> and others related to interned strings handling in TS builds.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/74269">#74269</a> (It’s possible to override trait property with different loosely-equal value).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/61970">#61970</a> (Restraining __construct() access level in subclass gives a fatal error).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/63384">#63384</a> (Cannot override an abstract method with an abstract method).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/74607">#74607</a> (Traits enforce different inheritance rules).</p>
</li>
<li>
<p>Fixed misparsing of abstract unix domain socket names.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/74815">#74815</a> (crash with a combination of INI entries at startup).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/74836">#74836</a> (isset on zero-prefixed numeric indexes in array broken).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/49649">#49649</a> (unserialize() doesn’t handle changes in property visibility).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/74866">#74866</a> (extension_dir = “./ext” now use current directory for base).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/75142">#75142</a> (<a href="http://buildcheck.sh">buildcheck.sh</a> check for autoconf version needs to be updated for v2.64).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/74878">#74878</a> (Data race in ZTS builds).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/75515">#75515</a> (“stream_copy_to_stream” doesn’t stream anymore).</p>
</li>
</ul>
<h2 id="cURL"><a class="header-anchor" href="#cURL">¶</a>cURL</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/75093">#75093</a> (OpenSSL support not detected).</li>
<li>Better fix for <a href="http://bugs.php.net/74125">#74125</a> (use pkg-config instead of curl-config).</li>
</ul>
<h2 id="Date"><a class="header-anchor" href="#Date">¶</a>Date</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/71520">#71520</a> (Adding the DateTime constants to the DateTimeInterface interface).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/55407">#55407</a> (Impossible to prototype DateTime::createFromFormat).</li>
<li>Fixed bug <a href="http://bugs.php.net/75055">#75055</a> (Out-Of-Bounds Read in timelib_meridian()). (CVE-2017-16642)</li>
<li>Fixed bug <a href="http://bugs.php.net/75149">#75149</a> (redefinition of typedefs ttinfo and t1info).</li>
<li>Fixed bug <a href="http://bugs.php.net/75222">#75222</a> (DateInterval microseconds property always 0).</li>
</ul>
<h2 id="Dba"><a class="header-anchor" href="#Dba">¶</a>Dba</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72885">#72885</a> (flatfile: dba_fetch() fails to read replaced entry).</li>
</ul>
<h2 id="DOM"><a class="header-anchor" href="#DOM">¶</a>DOM</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/74837">#74837</a> (Implement Countable for DomNodeList and DOMNamedNodeMap).</li>
</ul>
<h2 id="EXIF"><a class="header-anchor" href="#EXIF">¶</a>EXIF</h2>
<ul>
<li>Deprecated the read_exif_data() alias.</li>
</ul>
<hr>
<ul>
<li>Added support for vendor specific tags for the following formats: Samsung, DJI, Panasonic, Sony, Pentax, Minolta, Sigma/Foveon, AGFA, Kyocera, Ricoh &amp; Epson.</li>
<li>Implemented FR <a href="http://bugs.php.net/65187">#65187</a> (exif_read_data/thumbnail: add support for stream resource).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72682">#72682</a> (exif_read_data() fails to read all data for some images).</li>
<li>Fixed bug <a href="http://bugs.php.net/71534">#71534</a> (Type confusion in exif_read_data() leading to heap overflow in debug mode).</li>
<li>Fixed bug <a href="http://bugs.php.net/68547">#68547</a> (Exif Header component value check error).</li>
<li>Fixed bug <a href="http://bugs.php.net/66443">#66443</a> (Corrupt EXIF header: maximum directory nesting level reached for some cameras).</li>
<li>Fixed Redhat bug #1362571 (PHP not returning full results for exif_read_data function).</li>
<li>Fixed bug <a href="http://bugs.php.net/74428">#74428</a> (exif_read_data(): “Illegal IFD size” warning occurs with correct exif format).</li>
<li>Fixed bug <a href="http://bugs.php.net/72819">#72819</a> (EXIF thumbnails not read anymore).</li>
<li>Fixed bug <a href="http://bugs.php.net/62523">#62523</a> (php crashes with segfault when exif_read_data called).</li>
<li>Fixed bug <a href="http://bugs.php.net/50660">#50660</a> (exif_read_data(): Illegal IFD offset (works fine with other exif readers).</li>
</ul>
<h2 id="Fileinfo"><a class="header-anchor" href="#Fileinfo">¶</a>Fileinfo</h2>
<ul>
<li>Upgrade bundled libmagic to 5.31.</li>
</ul>
<h2 id="FPM"><a class="header-anchor" href="#FPM">¶</a>FPM</h2>
<ul>
<li>Configuration to limit fpm slow log trace callers.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/75212">#75212</a> (php_value acts like php_admin_value).</li>
</ul>
<h2 id="FTP"><a class="header-anchor" href="#FTP">¶</a>FTP</h2>
<ul>
<li>Implement MLSD for structured listing of directories.</li>
<li>Added ftp_append() function.</li>
</ul>
<h2 id="GD"><a class="header-anchor" href="#GD">¶</a>GD</h2>
<ul>
<li>Implemented imageresolution as getter and setter (Christoph)</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/74744">#74744</a> (gd.h: stdarg.h include missing for va_list use in gdErrorMethod).</li>
<li>Fixed bug <a href="http://bugs.php.net/75111">#75111</a> (Memory disclosure or DoS via crafted .bmp image).</li>
</ul>
<h2 id="GMP"><a class="header-anchor" href="#GMP">¶</a>GMP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70896">#70896</a> (gmp_fact() silently ignores non-integer input).</li>
</ul>
<h2 id="Hash"><a class="header-anchor" href="#Hash">¶</a>Hash</h2>
<ul>
<li>Disallowed usage of non-cryptographic hash functions with HMAC and PBKDF2.</li>
</ul>
<hr>
<ul>
<li>Changed HashContext from resource to object.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/75284">#75284</a> (sha3 is not supported on bigendian machine).</li>
</ul>
<h2 id="IMAP"><a class="header-anchor" href="#IMAP">¶</a>IMAP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72324">#72324</a> (imap_mailboxmsginfo() return wrong size).</li>
</ul>
<h2 id="Intl"><a class="header-anchor" href="#Intl">¶</a>Intl</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/63790">#63790</a> (test using Spoofchecker which may be unavailable).</li>
<li>Fixed bug <a href="http://bugs.php.net/75378">#75378</a> ([REGRESSION] IntlDateFormatter::parse() does not change $position argument).</li>
</ul>
<h2 id="JSON"><a class="header-anchor" href="#JSON">¶</a>JSON</h2>
<ul>
<li>Add JSON_INVALID_UTF8_IGNORE and JSON_INVALID_UTF8_SUBSTITUTE options for json_encode and json_decode to ignore or replace invalid UTF-8 byte sequences - it addresses request <a href="http://bugs.php.net/65082">#65082</a>.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/75185">#75185</a> (Buffer overflow in json_decode() with JSON_INVALID_UTF8_IGNORE or JSON_INVALID).</li>
<li>Fixed bug <a href="http://bugs.php.net/68567">#68567</a> (JSON_PARTIAL_OUTPUT_ON_ERROR can result in JSON with null key).</li>
</ul>
<h2 id="LDAP"><a class="header-anchor" href="#LDAP">¶</a>LDAP</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/69445">#69445</a> (Support for LDAP EXOP operations)</li>
</ul>
<hr>
<ul>
<li>Fixed support for LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS in ldap_get_option</li>
<li>Fixed passing an empty array to ldap_set_option for client or server controls.</li>
</ul>
<h2 id="Mbstring"><a class="header-anchor" href="#Mbstring">¶</a>Mbstring</h2>
<ul>
<li>Update to oniguruma version 6.3.0.</li>
</ul>
<hr>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/66024">#66024</a> (mb_chr() and mb_ord()).</li>
<li>Implemented FR <a href="http://bugs.php.net/65081">#65081</a> (mb_scrub()).</li>
<li>Implemented FR <a href="http://bugs.php.net/69086">#69086</a> (enhancement for mb_convert_encoding() that handles multibyte replacement char nicely).</li>
<li>Added array input support to mb_convert_encoding().</li>
<li>Added array input support to mb_check_encoding().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69079">#69079</a> (enhancement for mb_substitute_character).</li>
<li>Fixed bug <a href="http://bugs.php.net/69267">#69267</a> (mb_strtolower fails on titlecase characters).</li>
</ul>
<h2 id="Mcrypt"><a class="header-anchor" href="#Mcrypt">¶</a>Mcrypt</h2>
<ul>
<li>The deprecated mcrypt extension has been moved to PECL.</li>
</ul>
<h2 id="Opcache"><a class="header-anchor" href="#Opcache">¶</a>Opcache</h2>
<ul>
<li>Added global optimisation passes based on data flow analysis using Single Static Assignment (SSA) form: Sparse Conditional Constant Propagation (SCCP), Dead Code Elimination (DCE), and removal of unused local variables (Nikita, Dmitry)</li>
</ul>
<hr>
<ul>
<li>Fixed incorect constant conditional jump elimination.</li>
<li>Fixed bug <a href="http://bugs.php.net/75230">#75230</a> (Invalid opcode 49/1/8 using opcache).</li>
<li>Fixed bug (assertion fails with extended info generated).</li>
<li>Fixed bug (Phi sources removel).</li>
<li>Fixed bug <a href="http://bugs.php.net/75370">#75370</a> (Webserver hangs on valid PHP text).</li>
<li>Fixed bug <a href="http://bugs.php.net/75357">#75357</a> (segfault loading WordPress wp-admin).</li>
</ul>
<h2 id="OpenSSL"><a class="header-anchor" href="#OpenSSL">¶</a>OpenSSL</h2>
<ul>
<li>Automatically load OpenSSL configuration file.</li>
<li>Use TLS_ANY for default ssl:// and tls:// negotiation.</li>
<li>Allow setting SNI cert and private key in separate files.</li>
</ul>
<hr>
<ul>
<li>Added openssl_pkcs7_read() and pk7 parameter to openssl_pkcs7_verify().</li>
<li>Add ssl security_level stream option to support OpenSSL security levels. (Jakub Zelenka).</li>
</ul>
<hr>
<ul>
<li>Fix leak in openssl_spki_new().</li>
<li>Fixed bug <a href="http://bugs.php.net/74903">#74903</a> (openssl_pkcs7_encrypt() uses different EOL than before).</li>
</ul>
<h2 id="PCRE"><a class="header-anchor" href="#PCRE">¶</a>PCRE</h2>
<ul>
<li>Added support for PCRE JIT fast path API.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/61780">#61780</a> (Inconsistent PCRE captures in match results).</li>
<li>Fixed bug <a href="http://bugs.php.net/74873">#74873</a> (Minor BC break: PCRE_JIT changes output of preg_match()).</li>
<li>Fixed bug <a href="http://bugs.php.net/75089">#75089</a> (preg_grep() is not reporting PREG_BAD_UTF8_ERROR after first input string).</li>
<li>Fixed bug <a href="http://bugs.php.net/75223">#75223</a> (PCRE JIT broken in 7.2).</li>
<li>Fixed bug <a href="http://bugs.php.net/75285">#75285</a> (Broken build when system libpcre don’t have jit support).</li>
</ul>
<h2 id="phar"><a class="header-anchor" href="#phar">¶</a>phar</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/74196">#74196</a> (phar does not correctly handle names containing dots).</li>
</ul>
<h2 id="PDO"><a class="header-anchor" href="#PDO">¶</a>PDO</h2>
<ul>
<li>Add “Sent SQL” to debug dump for emulated prepares.</li>
<li>Add parameter types for national character set strings.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73234">#73234</a> (Emulated statements let value dictate parameter type).</li>
</ul>
<h2 id="PDO-DBlib"><a class="header-anchor" href="#PDO-DBlib">¶</a>PDO_DBlib</h2>
<ul>
<li>Add test coverage for bug <a href="http://bugs.php.net/72969">#72969</a>.</li>
<li>Expose DB-Library version as \PDO::DBLIB_ATTR_VERSION attribute on \PDO instance.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73396">#73396</a> (bigint columns are returned as strings).</li>
</ul>
<h2 id="PDO-OCI"><a class="header-anchor" href="#PDO-OCI">¶</a>PDO_OCI</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/74537">#74537</a> (Align --with-pdo-oci configure option with --with-oci8 syntax).</li>
</ul>
<h2 id="PDO-Sqlite"><a class="header-anchor" href="#PDO-Sqlite">¶</a>PDO_Sqlite</h2>
<ul>
<li>Switch to sqlite3_prepare_v2() and sqlite3_close_v2() functions (rasmus)</li>
</ul>
<h2 id="PHPDBG"><a class="header-anchor" href="#PHPDBG">¶</a>PHPDBG</h2>
<ul>
<li>Added extended_value to opcode dump output.</li>
</ul>
<h2 id="Session"><a class="header-anchor" href="#Session">¶</a>Session</h2>
<ul>
<li>PR <a href="https://github.com/php/php-src/issues/2233">#2233</a> Removed register_globals related code and “!” can be used as $_SESSION key name.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73461">#73461</a> (Prohibit session save handler recursion).</li>
<li>Improved bug <a href="http://bugs.php.net/73100">#73100</a> fix. ‘user’ save handler can only be set by session_set_save_handler()</li>
<li>Fixed bug <a href="http://bugs.php.net/74514">#74514</a> (5 session functions incorrectly warn when calling in read-only/getter mode).</li>
<li>Fixed bug <a href="http://bugs.php.net/74936">#74936</a> (session_cache_expire/cache_limiter/save_path() trigger a warning in read mode).</li>
<li>Fixed bug <a href="http://bugs.php.net/74941">#74941</a> (session fails to start after having headers sent).</li>
</ul>
<h2 id="Sodium"><a class="header-anchor" href="#Sodium">¶</a>Sodium</h2>
<ul>
<li>New cryptographic extension</li>
<li>Added missing bindings for libsodium &gt; 1.0.13.</li>
</ul>
<h2 id="SPL"><a class="header-anchor" href="#SPL">¶</a>SPL</h2>
<ul>
<li>Added spl_object_id().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/71412">#71412</a> (Incorrect arginfo for ArrayIterator::__construct).</li>
</ul>
<h2 id="SQLite3"><a class="header-anchor" href="#SQLite3">¶</a>SQLite3</h2>
<ul>
<li>Update to Sqlite 3.20.1.</li>
</ul>
<hr>
<ul>
<li>Implement writing to blobs.</li>
</ul>
<h2 id="Standard"><a class="header-anchor" href="#Standard">¶</a>Standard</h2>
<ul>
<li>Compatibility with libargon2 versions 20161029 and 20160821.</li>
</ul>
<hr>
<ul>
<li>Add support for extension name as argument to dl().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69442">#69442</a> (closing of fd incorrect when PTS enabled).</li>
<li>Fixed bug <a href="http://bugs.php.net/74300">#74300</a> (unserialize accepts two plus/minus signs for float number exponent part).</li>
<li>Fixed bug <a href="http://bugs.php.net/74737">#74737</a> (mysqli_get_client_info reflection info).</li>
<li>Fixed bug <a href="http://bugs.php.net/74851">#74851</a> (uniqid() without more_entropy performs badly).</li>
<li>Fixed bug <a href="http://bugs.php.net/74103">#74103</a> (heap-use-after-free when unserializing invalid array size). (CVE-2017-12932)</li>
<li>Fixed bug <a href="http://bugs.php.net/75054">#75054</a> (A Denial of Service Vulnerability was found when performing deserialization).</li>
<li>Fixed bug <a href="http://bugs.php.net/75170">#75170</a> (mt_rand() bias on 64-bit machines).</li>
<li>Fixed bug <a href="http://bugs.php.net/75221">#75221</a> (Argon2i always throws NUL at the end).</li>
</ul>
<h2 id="Streams"><a class="header-anchor" href="#Streams">¶</a>Streams</h2>
<ul>
<li>Default ssl/single_dh_use and ssl/honor_cipher_order to true.</li>
</ul>
<h2 id="XML"><a class="header-anchor" href="#XML">¶</a>XML</h2>
<ul>
<li>Moved utf8_encode() and utf8_decode() to the Standard extension.</li>
</ul>
<h2 id="XMLRPC"><a class="header-anchor" href="#XMLRPC">¶</a>XMLRPC</h2>
<ul>
<li>Use Zend MM for allocation in bundled <a href="http://xmlrpc-c.sourceforge.net/">libxmlrpc</a> (Joe)</li>
</ul>
<h2 id="ZIP"><a class="header-anchor" href="#ZIP">¶</a>ZIP</h2>
<ul>
<li>Use of bundled libzip is deprecated, --with-libzip option is recommended.</li>
</ul>
<hr>
<ul>
<li>Add support for encrypted archives.</li>
<li>ZipArchive implements countable, added ZipArchive::count() method.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73803">#73803</a> (Reflection of ZipArchive does not show public properties).</li>
<li>Fix segfault in php_stream_context_get_option call.</li>
<li>Fixed bug <a href="http://bugs.php.net/75143">#75143</a> (new method setEncryptionName() seems not to exist in ZipArchive).</li>
</ul>
<h2 id="zlib"><a class="header-anchor" href="#zlib">¶</a>zlib</h2>
<ul>
<li>Expose inflate_get_status() and inflate_get_read_len() functions.</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
        <tag>PHP7</tag>
        <tag>Argon2算法</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 7.4.0 Published</title>
    <url>/2019/11/28/PHP-Version-7-4-0-Published/</url>
    <content><![CDATA[<h1 id="目标及关键路径"><a class="header-anchor" href="#目标及关键路径">¶</a>目标及关键路径</h1>
<ul>
<li>性能提升</li>
</ul>
<h1 id="从-PHP-7-3-x-移植到-PHP-7-4-x"><a class="header-anchor" href="#从-PHP-7-3-x-移植到-PHP-7-4-x">¶</a>从 PHP 7.3.x 移植到 PHP 7.4.x</h1>
<p><a href="https://www.php.net/manual/zh/migration74.php">这里可以找到原文</a></p>
<h2 id="不向下兼容的变更"><a class="header-anchor" href="#不向下兼容的变更">¶</a>不向下兼容的变更</h2>
<ul>
<li>
<p>尝试以数组方式访问 null，bool， int，float 或 resource （例如 $null[“key”]）将会抛出 notice 通知。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.get-declared-classes.php">get_declared_classes()</a> 函数将不再返回匿名的类，假如它们没有被实例化的话。</p>
</li>
<li>
<p>fn 成为了保留关键词</p>
</li>
<li>
<p>文件尾部的 &lt;?php 标签（不包含空行）将会被解释成一个 PHP 头标签。</p>
</li>
<li>
<p>When using include/require on a stream, <a href="https://www.php.net/manual/zh/streamwrapper.stream-set-option.php">streamWrapper::stream_set_option()</a> will be invoked with the <strong><code>STREAM_OPTION_READ_BUFFER</code></strong> option.</p>
</li>
<li>
<p>序列化类型 o 被移除。因为它不是由 PHP 生成的，这可能会影响到之前项目中手动生成的序列化字符串。</p>
</li>
<li>
<p>密码哈希算法标识符现在是可空字符串，而不再是整数。</p>
<ul>
<li><strong><code>PASSWORD_DEFAULT</code></strong> 之前是 int 1; 现在是 <strong><code>null</code></strong></li>
<li><strong><code>PASSWORD_BCRYPT</code></strong> 之前是 int 1; 现在是 string ‘2y’</li>
<li><strong><code>PASSWORD_ARGON2I</code></strong> 之前是 int 2; 现在是 string ‘argon2i’</li>
<li><strong><code>PASSWORD_ARGON2ID</code></strong> 之前是 int 3; 现在是 string ‘argon2id’</li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.htmlentities.php">htmlentities()</a> will now raise a notice (instead of a strict standards warning) if it is used with an encoding for which only basic entity substitution is supported, in which case it is equivalent to <a href="https://www.php.net/manual/zh/function.htmlspecialchars.php">htmlspecialchars()</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.fread.php">fread()</a> 和 <a href="https://www.php.net/manual/zh/function.fwrite.php">fwrite()</a> 在操作失败的时候会返回 <strong><code>false</code></strong>。</p>
</li>
<li>
<p>BCMath functions will now warn if a non well-formed number is passed, such as “32foo”.</p>
</li>
<li>
<p>CURL</p>
<ul>
<li>Attempting to serialize a <a href="https://www.php.net/manual/zh/class.curlfile.php">CURLFile</a> class will now generate an exception. Previously the exception was only thrown on unserialization.</li>
<li>Using CURLPIPE_HTTP1 is deprecated, and is no longer supported as of cURL 7.62.0.</li>
<li>The <code>$version</code> parameter of <a href="https://www.php.net/manual/zh/function.curl-version.php">curl_version()</a> is deprecated. If any value not equal to the default CURLVERSION_NOW is passed, a warning is raised and the parameter is ignored.</li>
</ul>
</li>
<li>
<p>Date and Time</p>
<ul>
<li>
<p>Calling <a href="https://www.php.net/manual/zh/function.var-dump.php">var_dump()</a> or similar on a <a href="https://www.php.net/manual/zh/class.datetime.php">DateTime</a> or <a href="https://www.php.net/manual/zh/class.datetimeimmutable.php">DateTimeImmutable</a> instance will no longer leave behind accessible properties on the object.</p>
</li>
<li>
<p>Comparison of <a href="https://www.php.net/manual/zh/class.dateinterval.php">DateInterval</a> objects (using <code>==</code>, <code>&lt;</code>, and so on) will now generate a warning and always return <strong><code>false</code></strong>. Previously all <a href="https://www.php.net/manual/zh/class.dateinterval.php">DateInterval</a> objects were considered equal, unless they had properties.</p>
</li>
</ul>
</li>
<li>
<p>The default parameter value of <a href="https://www.php.net/manual/zh/function.idn-to-ascii.php">idn_to_ascii()</a> and <a href="https://www.php.net/manual/zh/function.idn-to-utf8.php">idn_to_utf8()</a> is now <strong><code>INTL_IDNA_VARIANT_UTS46</code></strong> instead of the deprecated <strong><code>INTL_IDNA_VARIANT_2003</code></strong>.</p>
</li>
<li>
<p>MySQLi</p>
<ul>
<li>The embedded server functionality has been removed. It was broken since at least PHP 7.0.</li>
<li>The undocumented <code>mysqli::$stat</code> property has been removed in favor of <a href="https://www.php.net/manual/zh/mysqli.stat.php">mysqli::stat()</a>.</li>
</ul>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/function.openssl-random-pseudo-bytes.php">openssl_random_pseudo_bytes()</a> function will now throw an exception in error situations, similar to <a href="https://www.php.net/manual/zh/function.random-bytes.php">random_bytes()</a>. In particular, an <a href="https://www.php.net/manual/zh/class.error.php">Error</a> is thrown if the number of requested bytes is less than or equal to zero, and an <a href="https://www.php.net/manual/zh/class.exception.php">Exception</a> is thrown if sufficient randomness cannot be gathered. The <code>$crypto_strong output</code> argument is guaranteed to always be <strong><code>true</code></strong> if the function does not throw, so explicitly checking it is not necessary.</p>
</li>
<li>
<p>When PREG_UNMATCHED_AS_NULL mode is used, trailing unmatched capturing groups will now also be set to null (or [null, -1] if offset capture is enabled). This means that the size of the $matches will always be the same.</p>
</li>
<li>
<p>Attempting to serialize a <a href="https://www.php.net/manual/zh/class.pdo.php">PDO</a> or <a href="https://www.php.net/manual/zh/class.pdostatement.php">PDOStatement</a> instance will now generate an <a href="https://www.php.net/manual/zh/class.exception.php">Exception</a> rather than a <a href="https://www.php.net/manual/zh/class.pdoexception.php">PDOException</a>, consistent with other internal classes which do not support serialization.</p>
</li>
<li>
<p>Reflection objects will now generate an exception if an attempt is made to serialize them. Serialization for reflection objects was never supported and resulted in corrupted reflection objects. It has been explicitly prohibited now.</p>
</li>
<li>
<p>Standard PHP Library (SPL)</p>
<ul>
<li>
<p>Calling <a href="https://www.php.net/manual/zh/function.get-object-vars.php">get_object_vars()</a> on an <a href="https://www.php.net/manual/zh/class.arrayobject.php">ArrayObject</a> instance will now always return the properties of the <a href="https://www.php.net/manual/zh/class.arrayobject.php">ArrayObject</a> itself (or a subclass). Other affected operations are:</p>
<ul>
<li><strong>ReflectionObject::getProperties()</strong></li>
<li><a href="https://www.php.net/manual/zh/function.reset.php">reset()</a>, <a href="https://www.php.net/manual/zh/function.current.php">current()</a>, etc. Use <strong>Iterator</strong> methods instead.</li>
<li>Potentially others working on object properties as a list.</li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/splpriorityqueue.setextractflags.php">SplPriorityQueue::setExtractFlags()</a> will throw an exception if zero is passed. Previously this would generate a recoverable fatal error on the next extraction operation.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/class.arrayobject.php">ArrayObject</a>, <a href="https://www.php.net/manual/zh/class.arrayiterator.php">ArrayIterator</a>, <a href="https://www.php.net/manual/zh/class.spldoublylinkedlist.php">SplDoublyLinkedList</a> and <a href="https://www.php.net/manual/zh/class.splobjectstorage.php">SplObjectStorage</a> now support the <code>__serialize()</code> and <code>__unserialize()</code> mechanism in addition to the <strong>Serializable</strong> interface. This means that serialization payloads created on older PHP versions can still be unserialized, but new payloads created by PHP 7.4 will not be understood by older versions.</p>
</li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.token-get-all.php">token_get_all()</a> will now emit a <strong><code>T_BAD_CHARACTER</code></strong> token for unexpected characters instead of leaving behind holes in the token stream.</p>
</li>
<li>
<p>从 PHP 7.4.11 开始，为了安全考虑，接受到的 Cookie 中的 names 参数不再被 URL 编码。</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>嵌套的三元操作中，必须明确使用显式括号来决定操作的顺序。</p>
</li>
<li>
<p>使用大括号访问数组及字符串索引的方式已被废弃。请使用 $var[$idx] 的语法来替代 $var{$idx}。</p>
</li>
<li>
<p><code>(real)</code> 类型已被废弃，请使用 <code>(float)</code> 来替代。</p>
</li>
<li>
<p>同时被废弃的还有 <a href="https://www.php.net/manual/zh/function.is-real.php">is_real()</a> 函数，请使用 <a href="https://www.php.net/manual/zh/function.is-float.php">is_float()</a> 来替代。</p>
</li>
<li>
<p>Unbinding $this of a non-static closure that uses $this is deprecated.</p>
</li>
<li>
<p>在没有父类的类中使用 parent 关键词已被废弃，并且在将来的 PHP 版本中将会抛出一个编译错误。目前只在运行时访问父类时才会产生错误。</p>
</li>
<li>
<p>配置文件中的 <a href="https://www.php.net/manual/zh/filesystem.configuration.php#ini.allow-url-include">allow_url_include</a> 选项被废弃。如果启用了该选项，将会产生一个弃用通知。</p>
</li>
<li>
<p>在下面这些基础转换函数中，<a href="https://www.php.net/manual/zh/function.base-convert.php">base_convert()</a>, <a href="https://www.php.net/manual/zh/function.bindec.php">bindec()</a>, <a href="https://www.php.net/manual/zh/function.octdec.php">octdec()</a> 和 <a href="https://www.php.net/manual/zh/function.hexdec.php">hexdec()</a> 如果传入了非法字符，将会抛出一个弃用通知。函数会忽略掉无效字符后正常返回结果。前导空格和尾部空格，以及类型为 0x (取决于基数) 被允许传入。</p>
</li>
<li>
<p>在一个对象中使用 <a href="https://www.php.net/manual/zh/function.array-key-exists.php">array_key_exists()</a> 已被废弃。请使用 <a href="https://www.php.net/manual/zh/function.isset.php">isset()</a> 或 <a href="https://www.php.net/manual/zh/function.property-exists.php">property_exists()</a> 来替代。</p>
</li>
<li>
<p>魔术引号函数 <a href="https://www.php.net/manual/zh/function.get-magic-quotes-gpc.php">get_magic_quotes_gpc()</a> 和 <a href="https://www.php.net/manual/zh/function.get-magic-quotes-runtime.php">get_magic_quotes_runtime()</a> 已被废弃。它们将永远返回 <strong><code>false</code></strong>。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.hebrevc.php">hebrevc()</a> 函数已被废弃。 可以用 <code>nl2br(hebrev($str))</code> 来替代，更好的方法是启用 Unicode RTL 来支持。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.convert-cyr-string.php">convert_cyr_string()</a> 函数已被废弃。可以用 <strong>mb_convert_string()</strong>， <a href="https://www.php.net/manual/zh/function.iconv.php">iconv()</a> 或 <a href="https://www.php.net/manual/zh/class.uconverter.php">UConverter</a> 替代。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.money-format.php">money_format()</a> 函数已被废弃。 可以用更国际化的 <a href="https://www.php.net/manual/zh/class.numberformatter.php">NumberFormatter</a> 功能来替代。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.ezmlm-hash.php">ezmlm_hash()</a> 函数已被废弃。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.restore-include-path.php">restore_include_path()</a> 函数已被废弃。可以用 <code>ini_restore('include_path')</code> 替代。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.implode.php">implode()</a> 允许反转参数顺序的特性已被废弃，请使用 <code>implode($glue, $parts)</code> 来替代 <code>implode($parts, $glue)</code>。</p>
</li>
<li>
<p>COM, 导入类型库的大小写不敏感的常量注册已被废弃。</p>
</li>
<li>
<p>FILTER_SANITIZE_MAGIC_QUOTES 已被废弃，使用 FILTER_SANITIZE_ADD_SLASHES 来替代。</p>
</li>
<li>
<p>Multibyte String</p>
<ul>
<li>
<p>Passing a non-string pattern to <a href="https://www.php.net/manual/zh/function.mb-ereg-replace.php">mb_ereg_replace()</a> is deprecated. Currently, non-string patterns are interpreted as ASCII codepoints. In PHP 8, the pattern will be interpreted as a string instead.</p>
</li>
<li>
<p>Passing the encoding as 3rd parameter to <a href="https://www.php.net/manual/zh/function.mb-strrpos.php">mb_strrpos()</a> is deprecated. Instead pass a 0 offset, and encoding as 4th parameter.</p>
</li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.ldap-control-paged-result-response.php">ldap_control_paged_result_response()</a> 和 <a href="https://www.php.net/manual/zh/function.ldap-control-paged-result.php">ldap_control_paged_result()</a> 函数已被废弃。控制页面操作可以使用 <a href="https://www.php.net/manual/zh/function.ldap-search.php">ldap_search()</a> 替代。</p>
</li>
<li>
<p>Reflection</p>
<ul>
<li>
<p>调用 <a href="https://www.php.net/manual/zh/reflectiontype.tostring.php">ReflectionType::__toString()</a> 现在将会抛出一个弃用通知。 该方法从 PHP 7.1 开始，在 <strong>ReflectionNamedType::getName()</strong> 的文档中已经被声明废弃，但是由于技术原因，并没有抛出弃用通知。</p>
</li>
<li>
<p>The <code>export()</code> methods on all <a href="https://www.php.net/manual/zh/class.reflection.php">Reflection</a> classes are deprecated.</p>
</li>
</ul>
</li>
<li>
<p>常量 <strong><code>AI_IDN_ALLOW_UNASSIGNED</code></strong> 和 <strong><code>AI_IDN_USE_STD3_ASCII_RULES</code></strong> 在 <a href="https://www.php.net/manual/zh/function.socket-addrinfo-lookup.php">socket_addrinfo_lookup()</a> 中不再可用，因为该常量在 glibc 中已被废弃。</p>
</li>
<li>
<p>这些扩展已经被转移到 PECL 中，不再是 PHP 发行版的一部分。这些扩展的 PECL 包版本将根据用户的需要来自行安装。</p>
<ul>
<li><a href="https://www.php.net/manual/zh/book.ibase.php">Firebird/Interbase</a> - access to an InterBase and/or Firebird based database is still available with the PDO Firebird driver.</li>
<li><a href="https://www.php.net/manual/zh/book.recode.php">Recode</a></li>
<li><a href="https://www.php.net/manual/zh/book.wddx.php">WDDX</a></li>
</ul>
</li>
</ul>
<h2 id="新特性"><a class="header-anchor" href="#新特性">¶</a>新特性</h2>
<ul>
<li>
<p>类的属性中现在支持添加指定的类型。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/functions.arrow.php">箭头函数</a> 提供了一种更简洁的定义函数的方法。</p>
</li>
<li>
<p>有限返回类型协变与参数类型逆变</p>
</li>
<li>
<p>空合并运算符赋值</p>
</li>
<li>
<p>数组展开操作</p>
</li>
<li>
<p>数字文字可以在数字之间包含下划线。</p>
</li>
<li>
<p>Weak references allow the programmer to retain a reference to an object that does not prevent the object from being destroyed.</p>
</li>
<li>
<p>现在允许从 <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.tostring">__toString()</a> 抛出异常。之前的版本，将会导致一个致命错误。新版本中，之前发生致命错误的代码，已经被转换为 <a href="https://www.php.net/manual/zh/class.error.php">Error</a> 异常。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/class.curlfile.php">CURLFile</a> now supports stream wrappers in addition to plain file names, if the extension has been built against libcurl &gt;= 7.56.0.</p>
</li>
<li>
<p>The FILTER_VALIDATE_FLOAT filter now supports the min_range and max_range options, with the same semantics as FILTER_VALIDATE_INT.</p>
</li>
<li>
<p>FFI is a new extension, which provides a simple way to call native functions, access native variables, and create/access data structures defined in C libraries.</p>
</li>
<li>
<p>Added the IMG_FILTER_SCATTER image filter to apply a scatter filter to images.</p>
</li>
<li>
<p>Added crc32c hash using Castagnoli’s polynomial. This CRC32 variant is used by storage systems, such as iSCSI, SCTP, Btrfs and ext4.</p>
</li>
<li>
<p>Added the <a href="https://www.php.net/manual/zh/function.mb-str-split.php">mb_str_split()</a> function, which provides the same functionality as <a href="https://www.php.net/manual/zh/function.str-split.php">str_split()</a>, but operating on code points rather than bytes.</p>
</li>
<li>
<p>新增 <a href="https://www.php.net/manual/zh/opcache.preloading.php">缓存预加载</a> 特性。</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/function.preg-replace-callback.php">preg_replace_callback()</a> and <a href="https://www.php.net/manual/zh/function.preg-replace-callback-array.php">preg_replace_callback_array()</a> functions now accept an additional <code>flags</code> argument, with support for the <strong><code>PREG_OFFSET_CAPTURE</code></strong> and <strong><code>PREG_UNMATCHED_AS_NULL</code></strong> flags. This influences the format of the matches array passed to to the callback function.</p>
</li>
<li>
<p>PDO</p>
<ul>
<li>
<p>The username and password can now be specified as part of the PDO DSN for the mysql, mssql, sybase, dblib, firebird and oci drivers. Previously this was only supported by the pgsql driver. If a username/password is specified both in the constructor and the DSN, the constructor takes precedence.</p>
</li>
<li>
<p>It is now possible to escape question marks in SQL queries to avoid them being interpreted as parameter placeholders. Writing ?? allows sending a single question mark to the database and e.g. use the PostgreSQL JSON key exists (?) operator.</p>
</li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/pdostatement.getcolumnmeta.php">PDOStatement::getColumnMeta()</a> is now available.</p>
</li>
<li>
<p>PDO_SQLite</p>
<ul>
<li>
<p>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT) allows checking whether the statement is read-only, i.e. if it doesn’t modify the database.</p>
</li>
<li>
<p>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true) enables the use of SQLite3 extended result codes in PDO::errorInfo() and PDOStatement::errorInfo().</p>
</li>
</ul>
</li>
<li>
<p>SQLite3</p>
<ul>
<li>
<p>Added <strong>SQLite3::lastExtendedErrorCode()</strong> to fetch the last extended result code.</p>
</li>
<li>
<p>Added <code>SQLite3::enableExtendedResultCodes($enable = true)</code>, which will make <a href="https://www.php.net/manual/zh/sqlite3.lasterrorcode.php">SQLite3::lastErrorCode()</a> return extended result codes.</p>
</li>
</ul>
</li>
<li>
<p>Standard</p>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a> now also accepts an array of allowed tags: instead of <code>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</code> you can now write <code>strip_tags($str, ['a', 'p'])</code>.</p>
</li>
<li>
<p>A new mechanism for custom object serialization has been added, which uses two new magic methods: __serialize and __unserialize.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.array-merge.php">array_merge()</a> and <a href="https://www.php.net/manual/zh/function.array-merge-recursive.php">array_merge_recursive()</a> may now be called without any arguments, in which case they will return an empty array. This is useful in conjunction with the spread operator, e.g. <code>array_merge(...$arrays)</code>.</p>
</li>
<li>
<p>proc_open() function</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.proc-open.php">proc_open()</a> now accepts an array instead of a string for the command.</li>
<li><a href="https://www.php.net/manual/zh/function.proc-open.php">proc_open()</a> now supports <code>redirect</code> and <code>null</code> descriptors.</li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.password-hash.php">password_hash()</a> now has the argon2i and argon2id implementations from the sodium extension when PHP is built without libargon.</p>
</li>
</ul>
</li>
</ul>
<h1 id="变化"><a class="header-anchor" href="#变化">¶</a>变化</h1>
<p><a href="https://www.php.net/ChangeLog-7.php#PHP_7_4">这里可以找到原文</a></p>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
        <tag>PHP7</tag>
        <tag>FFI C</tag>
        <tag>CRC32C算法</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 7.0.0 Published</title>
    <url>/2015/12/03/PHP-Version-7-0-0-Published/</url>
    <content><![CDATA[<h1 id="目标及关键路径"><a class="header-anchor" href="#目标及关键路径">¶</a>目标及关键路径</h1>
<ul>
<li><a href="https://www.laruence.com/2015/12/04/3083.html">提升性能，预期提升30%+，实际提升了100%+</a>
<ul>
<li>降低内存占用, 提高缓存友好性, 降低执行的指令数
<ul>
<li>
<p><a href="https://www.laruence.com/2018/04/08/3170.html">优化ZVAL</a></p>
<ul>
<li>
<p>ZVAL这个结构体的大小是(在64位系统)24个字节，在zval.value联合体中, zend_object_value是最大的长板, 它导致整个value需要16个字节</p>
<ul>
<li>优化结构，在64位环境下,现在只需要16个字节</li>
</ul>
</li>
<li>
<p>PHP中大量的结构体都是基于Hashtable实现的, 增删改查Hashtable的操作占据了大量的CPU时间, 而字符串要查找首先要求它的Hash值</p>
<ul>
<li>把一个字符串的Hash值计算好以后, 就存下来, 避免再次计算</li>
</ul>
</li>
<li>
<p>PHP的zval大部分都是按值传递, 写时拷贝的值, 但是有俩个例外, 就是对象和资源, 他们永远都是按引用传递, 这样就造成一个问题, 对象和资源在除了zval中的引用计数以外, 还需要一个全局的引用计数, 这样才能保证内存可以回收. 所以在PHP5的时代, 以对象为例, 它有俩套引用计数, 一个是zval中的, 另外一个是obj自身的计数。在获取object时，经过漫长的多次内存读取, 才能获取到真正的objec对象本身，效率低</p>
<ul>
<li>对于在zval的value字段中能保存下的值, 就不再对他们进行引用计数了, 而是在拷贝的时候直接赋值, 这样就省掉了大量的引用计数相关的操作</li>
<li>标志位，方便判断是否需要进行引用计数</li>
<li>PHP7中在取一个对象的类的时候，就会非常方便了, 直接zvalu.value.obj-&gt;ce即可，一些类所自定的handler也就可以很便捷的访问到了</li>
</ul>
</li>
<li>
<p>因为引用计数是作用在zval的, 那么就会导致如果要拷贝一个字符串类型的zval, 我们别无他法只能复制这个字符串</p>
<ul>
<li>用value来保存一个指针, 这个指针指向这个具体的值, 引用计数也随之作用于这个值上, 而不在是作用于zval上了.</li>
</ul>
</li>
<li>
<p>PHP5的时代, 采用的是写时分离，同一个变量，只要曾经被引用过，再被赋值，就会触发变量复制（分离），拖慢性能</p>
<ul>
<li><a href="https://www.laruence.com/2018/04/08/3179.html">zval不存储引用计数，而独立了zend_reference来表示引用，所以zval不存在写时复制</a></li>
</ul>
</li>
<li>
<p>zval在PHP5的时代，也常作为临时变量来高频使用，并在使用过程中也会在堆内存分配给它</p>
<ul>
<li>zval预先分配，移除了MAKE_STD_ZVAL/ALLOC_ZVAL宏, 不再支持存堆内存上申请zval. 函数内部使用的zval要么来自外面输入, 要么使用在栈上分配的临时zval</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://www.laruence.com/2020/02/25/3182.html">优化HashTable</a></p>
<ul>
<li>Hashtable在PHP中，应用最多的是保存各种zval, 而PHP5的HashTable设计的太通用
<ul>
<li>可以设计为专门为了存储zval而优化, 从而能减少内存占用。</li>
<li>通过基于位操作来设计存储方案，节省内存</li>
</ul>
</li>
<li>缓存局部性问题， 因为PHP5的Hashtable的Bucket，包括zval都是独立分配的，并且采用了List来串Hashtable中的所有元素，会导致在遍历或者顺序访问一个数组的时候，缓存不友好。
<ul>
<li>数据独立保存到一个连续数组，遍历时就可以顺序访问一块连续的内存,zval直接保存到数组元素中，在绝大部分情况下（不需要外部指针的内容，比如long，bool之类的）就可以不需要任何额外的zval指针解引用了，缓存局部性友好</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://www.laruence.com/2020/03/23/5605.html">优化OBJECT</a></p>
<ul>
<li>在PHP5中，只有resource和object是引用传递，也就是说在赋值，传递的时候都是传递的本身，也正因为如此，Object和Resource除了使用了Zval的引用计数以外，还采用了一套独立自身的计数系统
<ul>
<li>zval中直接保存了zend_object对象的指针，统一并简化引用计数方案</li>
</ul>
</li>
</ul>
</li>
<li>
<p>编译优化</p>
<ul>
<li><a href="https://www.laruence.com/2015/06/19/3063.html">GCC PGO</a>，尝试分析PGO都做了些什么优化, 然后把一些通用的优化手工Apply到PHP7中</li>
<li>可通过产品场景训练GCC</li>
</ul>
</li>
<li>
<p>缓存优化</p>
<ul>
<li>默认的内存是以4KB分页的，而虚拟地址和内存地址是需要转换的， 而这个转换是要查表的，CPU为了加速这个查表过程都会内建TLB（Translation Lookaside Buffer）， 显而易见如果虚拟页越小，表里的条目数也就越多，而TLB大小是有限的，条目数越多TLB的Cache Miss也就会越高
<ul>
<li>如果我们能启用大内存页就能间接降低这个TLB Cache Miss，<a href="https://www.laruence.com/2015/10/02/3069.html">新的Linux Kernel启用Hugepage可以达到这个目的</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://www.laruence.com/2015/12/04/3086.html">让PHP7达到最高性能的几个Tips</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="从-PHP-5-6-x-移植到-PHP-7-0-x"><a class="header-anchor" href="#从-PHP-5-6-x-移植到-PHP-7-0-x">¶</a>从 PHP 5.6.x 移植到 PHP 7.0.x</h1>
<p><a href="https://www.php.net/manual/zh/migration70.php">更多细节可以阅读这里</a></p>
<h2 id="不向后兼容的变更"><a class="header-anchor" href="#不向后兼容的变更">¶</a>不向后兼容的变更</h2>
<ul>
<li>
<p>set_exception_handler() 不再保证收到的一定是 Exception 对象</p>
</li>
<li>
<p>当内部构造器失败的时候，总是抛出异常</p>
</li>
<li>
<p>解析错误会抛出 ParseError 异常。 对于 eval() 函数，需要将其包含到一个 catch 代码块中来处理解析错误。</p>
</li>
<li>
<p>原有的 E_STRICT 警告都被迁移到其他级别。 E_STRICT 常量会被保留，所以调用 error_reporting(E_ALL|E_STRICT) 不会引发错误。</p>
</li>
<li>
<p>对变量、属性和方法的间接调用现在将严格遵循从左到右的顺序来解析，而不是之前的混杂着几个特殊案例的情况。</p>
</li>
<li>
<p>关于list()处理方式的变更</p>
<ul>
<li>
<p>list() 现在会按照变量定义的顺序来给他们进行赋值，而非反过来的顺序。 通常来说，这只会影响list() 与数组的[]操作符一起使用的案例</p>
</li>
<li>
<p>list() 结构现在不再能是空的。</p>
</li>
<li>
<p>list() 不再能解开字符串（string）变量。 你可以使用str_split()来代替它。</p>
</li>
</ul>
</li>
<li>
<p>在 PHP 5中，在以引用方式传递函数参数时，使用冗余的括号对可以隐匿严格标准 的警告。现在，这个警告总会触发。</p>
</li>
<li>
<p>foreach发生了细微的变化，控制结构， 主要围绕阵列的内部数组指针和迭代处理的修改。</p>
<ul>
<li>
<p>在PHP7之前，当数组通过 foreach 迭代时，数组指针会移动。现在开始，不再如此</p>
</li>
<li>
<p>当默认使用通过值遍历数组时，foreach 实际操作的是数组的迭代副本，而非数组本身。这就意味着，foreach 中的操作不会修改原数组的值。</p>
</li>
<li>
<p>当使用引用遍历数组时，现在 foreach 在迭代中能更好的跟踪变化。</p>
</li>
<li>
<p>迭代一个非Traversable对象将会与迭代一个引用数组的行为相同。 这将导致在对象添加或删除属性时，foreach通过引用遍历时，有更好的迭代特性也能被应用</p>
</li>
</ul>
</li>
<li>
<p>Changes to integer handling</p>
<ul>
<li>
<p>在之前，一个八进制字符如果含有无效数字，该无效数字将被静默删节(0128 将被解析为 012). 现在这样的八进制字符将产生解析错误。</p>
</li>
<li>
<p>以负数形式进行的位移运算将会抛出一个 ArithmeticError</p>
</li>
<li>
<p>超出 integer 位宽的位移操作（无论哪个方向）将始终得到 0 作为结果。在从前，这一操作是结构依赖的。</p>
</li>
<li>
<p>之前的版本中，当 0 被做为除数时，无论是除数 (/) 或取模 (%) 操作，都会抛出一个 E_WARNING 错误并返回 false。现在，除法运算符 (/) 会返回一个由 IEEE 754 指定的浮点数：+INF, -INF 或 NAN。取模操作符 (%) 则会抛出一个 DivisionByZeroError 异常，并且不再产生 E_WARNING 错误。</p>
</li>
</ul>
</li>
<li>
<p>string处理上的调整</p>
<ul>
<li>
<p>十六进制字符串不再被认为是数字</p>
</li>
<li>
<p>由于新的 <a href="https://www.php.net/manual/zh/migration70.new-features.php#migration70.new-features.unicode-codepoint-escape-syntax">Unicode codepoint escape syntax</a>语法， 紧连着无效序列并包含<code>\u&#123;</code> 的字串可能引起致命错误。 为了避免这一报错，应该避免反斜杠开头。</p>
</li>
</ul>
</li>
<li>
<p>被移除的函数（Removed functions）</p>
<ul>
<li>
<p>这两个函数从PHP 4.1.0 开始被废弃，应该使用 <a href="https://www.php.net/manual/zh/function.call-user-func.php">call_user_func()</a> 和 <a href="https://www.php.net/manual/zh/function.call-user-func-array.php">call_user_func_array()</a>。 你也可以考虑使用 <a href="https://www.php.net/manual/zh/functions.variable-functions.php">变量函数</a> 或者 <a href="https://www.php.net/manual/zh/functions.arguments.php#functions.variable-arg-list"><code>...</code></a> 操作符。</p>
</li>
<li>
<p>所有 <code>ereg</code> 系列函数被删掉了。 <a href="https://www.php.net/manual/zh/book.pcre.php">PCRE</a> 作为推荐的替代品。</p>
</li>
<li>
<p>已废弃的 <strong>mcrypt_generic_end()</strong> 函数已被移除，请使用<a href="https://www.php.net/manual/zh/function.mcrypt-generic-deinit.php">mcrypt_generic_deinit()</a>代替。</p>
</li>
<li>
<p>已废弃的 <strong>mcrypt_ecb()</strong>, <strong>mcrypt_cbc()</strong>, <strong>mcrypt_cfb()</strong> 和 <strong>mcrypt_ofb()</strong> 函数已被移除，请配合恰当的**<code>MCRYPT_MODE_*</code>** 常量来使用 <a href="https://www.php.net/manual/zh/function.mcrypt-decrypt.php">mcrypt_decrypt()</a>进行代替。</p>
</li>
<li>
<p>所有 <a href="https://www.php.net/manual/zh/book.mysql.php">ext/mysql</a> 函数已被删掉了。 如何选择不同的 MySQL API，详情请见 <a href="https://www.php.net/manual/zh/mysqlinfo.api.choosing.php">选择 MySQL API</a>。</p>
</li>
<li>
<p>所有 <a href="https://www.php.net/manual/zh/migration70.incompatible.php">ext/mssql</a> 函数已被移除。</p>
</li>
<li>
<p>已废弃的 <strong>datefmt_set_timezone_id()</strong> 和 <strong>IntlDateFormatter::setTimeZoneID()</strong> 函数已被移除，请使用 <a href="https://www.php.net/manual/zh/intldateformatter.settimezone.php">datefmt_set_timezone()</a> 与 <a href="https://www.php.net/manual/zh/intldateformatter.settimezone.php">IntlDateFormatter::setTimeZone()</a>代替。</p>
</li>
<li>
<p>移除了 <strong>set_magic_quotes_runtime()</strong> 和它的别名 <strong>magic_quotes_runtime()</strong>。 它们在 PHP 5.3.0 中已经被废弃， 并由于 PHP 5.4.0 移除魔术引号（Magic Quotes）而没有用处。</p>
</li>
<li>
<p>已废弃的 <strong>set_socket_blocking()</strong> 函数已被移除，请使用<a href="https://www.php.net/manual/zh/function.stream-set-blocking.php">stream_set_blocking()</a>代替。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.dl.php">dl()</a>在 PHP-FPM 不再可用，在 CLI 和 embed SAPIs 中仍可用。</p>
</li>
<li>
<p>以下GD Type1函数被删除, 推荐使用 TrueType 字体和相关的函数作为替代。</p>
<ul>
<li><strong>imagepsbbox()</strong></li>
<li><strong>imagepsencodefont()</strong></li>
<li><strong>imagepsextendfont()</strong></li>
<li><strong>imagepsfreefont()</strong></li>
<li><strong>imagepsloadfont()</strong></li>
<li><strong>imagepsslantfont()</strong></li>
<li><strong>imagepstext()</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p>被移除掉的 INI 配置指令</p>
<ul>
<li>always_populate_raw_post_data</li>
<li>asp_tags</li>
<li><code>xsl.security_prefs</code> 指令被移除 在预处理的时候，取而代之的方法 <a href="https://www.php.net/manual/zh/xsltprocessor.setsecurityprefs.php">XsltProcessor::setSecurityPrefs()</a> 应该被调用到</li>
</ul>
</li>
<li>
<p>new 操作符创建的对象不能以引用方式赋值给变量</p>
</li>
<li>
<p>不能以下列名字来命名类、接口以及 trait：</p>
<ul>
<li>bool</li>
<li>int</li>
<li>float</li>
<li>string</li>
<li><strong><code>null</code></strong></li>
<li><strong><code>true</code></strong></li>
<li><strong><code>false</code></strong></li>
</ul>
</li>
<li>
<p>不建议以下列名字来命名类、接口以及 trait，在以后的迭代中，会作为保留关键字：</p>
<ul>
<li>resource</li>
<li>object</li>
<li><a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed">mixed</a></li>
<li>numeric</li>
</ul>
</li>
<li>
<p>使用类似 ASP 的标签，以及 script 标签来区分 PHP 代码的方式被移除。</p>
</li>
<li>
<p>在不匹配的上下文中以静态方式调用非静态方法， <a href="https://www.php.net/manual/zh/migration56.deprecated.php#migration56.deprecated.incompatible-context">在 PHP 5.6 中已经废弃</a>， 但是在 PHP 7.0 中， 会导致被调用方法中未定义 <code>$this</code> 变量，以及此行为已经废弃的警告。</p>
</li>
<li>
<p>在使用 <a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield">yield</a> 关键字的时候，不再需要括号， 并且它变更为右联接操作符，其运算符优先级介于 <code>print</code> 和 <code>=&gt;</code> 之间。 可以通过使用括号来消除歧义。</p>
</li>
<li>
<p>函数定义不可以包含多个同名参数</p>
</li>
<li>
<p>Switch 语句不可以包含多个 default 块</p>
</li>
<li>
<p>当在函数代码中使用 <a href="https://www.php.net/manual/zh/function.func-get-arg.php">func_get_arg()</a> 或 <a href="https://www.php.net/manual/zh/function.func-get-args.php">func_get_args()</a> 函数来检视参数值， 或者使用 <a href="https://www.php.net/manual/zh/function.debug-backtrace.php">debug_backtrace()</a> 函数查看回溯跟踪， 以及在异常回溯中所报告的参数值是指参数当前的值（有可能是已经被函数内的代码改变过的值）， 而不再是参数被传入函数时候的原始值了。</p>
</li>
<li>
<p>不再提供 $HTTP_RAW_POST_DATA 变量。 请使用 <a href="https://www.php.net/manual/zh/wrappers.php.php#wrappers.php.input"><code>php://input</code></a> 作为替代。</p>
</li>
<li>
<p>在 INI 文件中，不再支持以 <code>#</code> 开始的注释行， 请使用 <code>;</code>（分号）来表示注释。</p>
</li>
<li>
<p>JSON 扩展已经被 JSOND 扩展取代。 对于数值的处理，有以下两点需要注意的： 第一，数值不能以点号（.）结束 （例如，数值 34. 必须写作 34.0 或 34）。 第二，如果使用科学计数法表示数值，e 前面必须不是点号（.） （例如，3.e3 必须写作 3.0e3 或 3e3）。 另外，空字符串不再被视作有效的 JSON 字符串。</p>
</li>
<li>
<p>在数值溢出的时候，内部函数将会失败，将浮点数转换为整数的时候，如果浮点数值太大，导致无法以整数表达的情况下， 在之前的版本中，内部函数会直接将整数截断，并不会引发错误。 在 PHP 7.0 中，如果发生这种情况，会引发 E_WARNING 错误，并且返回 null。</p>
</li>
<li>
<p>在自定义会话处理器中，如果函数的返回值不是 false，也不是 -1， 会引发致命错误。现在，如果这些函数的返回值不是布尔值，也不是 -1 或者 0，函数调用结果将被视为失败，并且引发 E_WARNING 错误。</p>
</li>
<li>
<p>由于内部排序算法进行了提升， 可能会导致对比时被视为相等的多个元素之间的顺序不稳定。</p>
</li>
<li>
<p>在循环或者 switch 语句之外使用 break 和 continue 被视为编译型错误（之前视为运行时错误），会引发 E_COMPILE_ERROR 错误。</p>
</li>
<li>
<p>Mhash 扩展已经被完全整合进 <a href="https://www.php.net/manual/zh/book.hash.php">Hash</a> 扩展了。 因此，不要再使用 <a href="https://www.php.net/manual/zh/function.extension-loaded.php">extension_loaded()</a> 函数来检测是否支持 MHash 扩展了， 建议使用 <a href="https://www.php.net/manual/zh/function.function-exists.php">function_exists()</a> 函数来进行检测。 另外，函数 <a href="https://www.php.net/manual/zh/function.get-loaded-extensions.php">get_loaded_extensions()</a> 以及相关的特性中，也不再报告 和 MHash 扩展相关的信息了。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/control-structures.declare.php#control-structures.declare.ticks">declare(ticks)</a> 指示符不再泄漏到不同的编译单元中。</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>PHP4 风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。 如果在类中仅使用了 PHP4 风格的构造函数，PHP7 会产生 E_DEPRECATED 警告。 如果还定义了 __construct() 方法则不受影响。</p>
</li>
<li>
<p>废弃了 <a href="https://www.php.net/manual/zh/language.oop5.static.php">静态（Static）</a> 调用未声明成 <strong>static</strong> 的方法，未来可能会彻底移除该功能。</p>
</li>
<li>
<p>废弃了 <a href="https://www.php.net/manual/zh/function.password-hash.php">password_hash()</a> 函数中的盐值选项，阻止开发者生成自己的盐值（通常更不安全）。 开发者不传该值时，该函数自己会生成密码学安全的盐值。因此再无必要传入自己自定义的盐值。</p>
</li>
<li>
<p>废弃了 <code>capture_session_meta</code> 内的 SSL 上下文选项。 现在可以通过 <a href="https://www.php.net/manual/zh/function.stream-get-meta-data.php">stream_get_meta_data()</a> 获取 SSL 元数据（metadata）。</p>
</li>
<li>
<p>LDAP相关的以下函数已被废弃：</p>
<ul>
<li>ldap_sort()</li>
</ul>
</li>
<li>
<p>移除的扩展</p>
<ul>
<li>ereg</li>
<li>mssql</li>
<li>mysql</li>
<li>sybase_ct</li>
</ul>
</li>
<li>
<p>移除的 SAPI</p>
<ul>
<li>aolserver</li>
<li>apache</li>
<li>apache_hooks</li>
<li>apache2filter</li>
<li>caudium</li>
<li>continuity</li>
<li>isapi</li>
<li>milter</li>
<li>nsapi</li>
<li>phttpd</li>
<li>pi3web</li>
<li>roxen</li>
<li>thttpd</li>
<li>tux</li>
<li>webjames</li>
</ul>
</li>
</ul>
<h2 id="新特性"><a class="header-anchor" href="#新特性">¶</a>新特性</h2>
<ul>
<li>
<p>标量类型声明</p>
</li>
<li>
<p>返回值类型声明</p>
</li>
<li>
<p>由于日常使用中存在大量同时使用三元表达式和 isset()的情况， 我们添加了null合并运算符 (??) 这个语法糖。如果变量存在且值不为null， 它就会返回自身的值，否则返回它的第二个操作数。</p>
</li>
<li>
<p>太空船操作符用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1。 比较的原则是沿用 PHP 的<a href="https://www.php.net/manual/zh/types.comparisons.php">常规比较规则</a>进行的。</p>
</li>
<li>
<p>通过 define() 定义常量数组</p>
</li>
<li>
<p>现在支持通过new class 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。</p>
</li>
<li>
<p>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/closure.call.php">Closure::call()</a> 现在有着更好的性能，简短干练的暂时绑定一个方法到对象上闭包并调用它。</p>
</li>
<li>
<p>为unserialize()提供过滤，这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。</p>
</li>
<li>
<p>新增加的 <a href="https://www.php.net/manual/zh/class.intlchar.php">IntlChar</a> 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 unicode 字符。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.assert.php#function.assert.expectations">预期</a>是向后兼用并增强之前的 <a href="https://www.php.net/manual/zh/function.assert.php">assert()</a> 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</p>
</li>
<li>
<p>从同一 <a href="https://www.php.net/manual/zh/language.namespaces.definition.php"><code>namespace</code></a> 导入的类、函数和常量现在可以通过单个 <a href="https://www.php.net/manual/zh/language.namespaces.importing.php"><code>use</code></a> 语句 一次性导入了。</p>
</li>
<li>
<p>生成器可以返回表达式，此特性基于 PHP 5.5 版本中引入的生成器特性构建的。 它允许在生成器函数中通过使用 return 语法来返回一个表达式 （但是不允许返回引用值）， 可以通过调用 Generator::getReturn() 方法来获取生成器的返回值， 但是这个方法只能在生成器完成产生工作以后调用一次。</p>
</li>
<li>
<p>现在，只需在最外层生成其中使用 <a href="https://www.php.net/manual/zh/language.generators.syntax.php#control-structures.yield.from"><code>yield from</code></a>， 就可以把一个生成器自动委派给其他的生成器， <strong>Traversable</strong> 对象或者 array。</p>
</li>
<li>
<p>新加的函数 <a href="https://www.php.net/manual/zh/function.intdiv.php">intdiv()</a> 用来进行 整数的除法运算。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.session-start.php">session_start()</a> 可以接受一个 array 作为参数， 用来覆盖 php.ini 文件中设置的 <a href="https://www.php.net/manual/zh/session.configuration.php">会话配置选项</a>。</p>
</li>
<li>
<p>在 PHP 7 之前，当使用 <a href="https://www.php.net/manual/zh/function.preg-replace-callback.php">preg_replace_callback()</a> 函数的时候， 由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。 而使用新加的 <a href="https://www.php.net/manual/zh/function.preg-replace-callback-array.php">preg_replace_callback_array()</a> 函数， 可以使得代码更加简洁。</p>
</li>
<li>
<p>新加入两个跨平台的函数： <a href="https://www.php.net/manual/zh/function.random-bytes.php">random_bytes()</a> 和 <a href="https://www.php.net/manual/zh/function.random-int.php">random_int()</a> 用来产生高安全级别的随机字符串和随机整数。</p>
</li>
<li>
<p>可以使用 list() 函数来展开实现了 ArrayAccess 接口的对象</p>
</li>
<li>
<p>允许在克隆表达式上访问对象成员，例如： (clone $foo)-&gt;bar()。</p>
</li>
</ul>
<h1 id="变化"><a class="header-anchor" href="#变化">¶</a>变化</h1>
<p><a href="https://www.php.net/ChangeLog-7.php#PHP_7_0">原文在这里可以找到</a></p>
<h2 id="Core"><a class="header-anchor" href="#Core">¶</a>Core</h2>
<ul>
<li>Removed ZEND_ACC_FINAL_CLASS, promoting ZEND_ACC_FINAL as final class modifier.</li>
<li>Removed scoped calls of non-static methods from an incompatible $this context.</li>
<li>Removed support for #-style comments in ini files.</li>
<li>Removed support for assigning the result of new by reference.</li>
<li>Removed dl() function on fpm-fcgi.</li>
<li>Removed support for hexadecimal numeric strings.</li>
<li>Removed obsolete extensions and SAPIs. See the full list in UPGRADING.</li>
</ul>
<hr>
<ul>
<li>Improved zend_qsort(using hybrid sorting algo) for better performance, and also renamed zend_qsort to zend_sort.</li>
<li>Improved zend_memnchr(using sunday algo) for better performance.</li>
<li>Use “integer” and “float” instead of “long” and “double” in ZPP, type hint and conversion error messages.</li>
<li>Implemented FR <a href="http://bugs.php.net/55428">#55428</a> (E_RECOVERABLE_ERROR when output buffering in output buffering handler).</li>
<li>Invalid octal literals in source code now produce compile errors, fixes PHPSadness #31.</li>
<li>Improved __call() and __callStatic() magic method handling. Now they are called in a stackless way using ZEND_CALL_TRAMPOLINE opcode, without additional stack frame.</li>
<li>Optimized strings concatenation.</li>
</ul>
<hr>
<ul>
<li>Added NULL byte protection to exec, system and passthru.</li>
<li>Added error_clear_last() function.</li>
<li>is_long() &amp; is_integer() is now an alias of is_int().</li>
<li>Implemented FR <a href="http://bugs.php.net/55467">#55467</a> (phpinfo: PHP Variables with $ and single quotes).</li>
<li>Added ?? operator.</li>
<li>Added &lt;=&gt; operator.</li>
<li>Added \u{xxxxx} Unicode Codepoint Escape Syntax.</li>
<li>Added PHP_INT_MIN constant.</li>
<li>Added Closure::call() method.</li>
<li>Added options parameter for unserialize allowing to specify acceptable classes (<a href="https://wiki.php.net/rfc/secure_unserialize">https://wiki.php.net/rfc/secure_unserialize</a>).</li>
<li>Added stable sorting algo zend_insert_sort.</li>
<li>Implemented the RFC `Scalar Type Decalarations v0.5`.</li>
<li>Implemented the RFC `Group Use Declarations`.</li>
<li>Implemented the RFC `Continue Output Buffering`.</li>
<li>Implemented the RFC `Constructor behaviour of internal classes`.</li>
<li>Implemented the RFC `Fix “foreach” behavior`.</li>
<li>Implemented the RFC `Generator Delegation`.</li>
<li>Implemented the RFC `Anonymous Class Support`.</li>
<li>Implemented the RFC `Context Sensitive Lexer`.</li>
<li>Implemented the RFC `Catchable “Call to a member function bar() on a non-object”`.</li>
</ul>
<hr>
<ul>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70947">#70947</a> (INI parser segfault with INI_SCANNER_TYPED).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70914">#70914</a> (zend_throw_or_error() format string vulnerability).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70912">#70912</a> (Null ptr dereference instantiating class with invalid array property).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70895">#70895</a>, <a href="http://bugs.php.net/70898">#70898</a> (null ptr deref and segfault with crafted calable).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70249">#70249</a> (Segmentation fault while running PHPUnit tests on phpBB 3.2-dev).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70805">#70805</a> (Segmentation faults whilst running Drupal 8 test suite).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70842">#70842</a> (Persistent Stream Segmentation Fault).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70862">#70862</a> (Several functions do not check return code of php_stream_copy_to_mem()).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70863">#70863</a> (Incorect logic to increment_function for proxy objects).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70323">#70323</a> (Regression in zend_fetch_debug_backtrace() can cause segfaults).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70873">#70873</a> (Regression on private static properties access).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70748">#70748</a> (Segfault in ini_lex () at Zend/zend_ini_scanner.l).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70689">#70689</a> (Exception handler does not work as expected).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70430">#70430</a> (Stack buffer overflow in zend_language_parser()).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70782">#70782</a> (null ptr deref and segfault (zend_get_class_fetch_type)).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70785">#70785</a> (Infinite loop due to exception during identical comparison).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70630">#70630</a> (Closure::call/bind() crash with ReflectionFunction-&gt; getClosure()).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70662">#70662</a> (Duplicate array key via undefined index error handler).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70681">#70681</a> (Segfault when binding $this of internal instance method to null).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70685">#70685</a> (Segfault for getClosure() internal method rebind with invalid $this).</p>
</li>
<li>
<p>Added zend_internal_function.reserved[] fields.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70557">#70557</a> (Memleak on return type verifying failed).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70555">#70555</a> (fun_get_arg() on unsetted vars return UNKNOW).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70548">#70548</a> (Redundant information printed in case of uncaught engine exception).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70547">#70547</a> (unsetting function variables corrupts backtrace).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70528">#70528</a> (assert() with instanceof adds apostrophes around class name).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70481">#70481</a> (Memory leak in auto_global_copy_ctor() in ZTS build).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70431">#70431</a> (Memory leak in php_ini.c).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70478">#70478</a> (**= does no longer work).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70398">#70398</a> (SIGSEGV, Segmentation fault zend_ast_destroy_ex).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70332">#70332</a> (Wrong behavior while returning reference on object).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70300">#70300</a> (Syntactical inconsistency with new group use syntax).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70321">#70321</a> (Magic getter breaks reference to array property).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70187">#70187</a> (Notice: unserialize(): Unexpected end of serialized data).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70145">#70145</a> (From field incorrectly parsed from headers).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70370">#70370</a> (Bundled libtool.m4 doesn’t handle FreeBSD 10 when building extensions).</p>
</li>
<li>
<p>Fixed bug causing exception traces with anon classes to be truncated.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70397">#70397</a> (Segmentation fault when using Closure::call and yield).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70299">#70299</a> (Memleak while assigning object offsetGet result).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70288">#70288</a> (Apache crash related to ZEND_SEND_REF).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70262">#70262</a> (Accessing array crashes PHP 7.0beta3).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70258">#70258</a> (Segfault if do_resize fails to allocated memory).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70253">#70253</a> (segfault at _efree () in zend_alloc.c:1389).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70240">#70240</a> (Segfault when doing unset($var());).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70223">#70223</a> (Incrementing value returned by magic getter).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70215">#70215</a> (Segfault when __invoke is static).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70207">#70207</a> (Finally is broken with opcache).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70173">#70173</a> (ZVAL_COPY_VALUE_EX broken for 32bit Solaris Sparc).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69487">#69487</a> (SAPI may truncate POST data).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70198">#70198</a> (Checking liveness does not work as expected).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70241">#70241</a>, <a href="http://bugs.php.net/70293">#70293</a> (Skipped assertions affect Generator returns).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70239">#70239</a> (Creating a huge array doesn’t result in exhausted, but segfault).</p>
</li>
<li>
<p>Fixed “finally” issues.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70098">#70098</a> (Real memory usage doesn’t decrease).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70159">#70159</a> (__CLASS__ is lost in closures).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70156">#70156</a> (Segfault in zend_find_alias_name).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70124">#70124</a> (null ptr deref / seg fault in ZEND_HANDLE_EXCEPTION).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70117">#70117</a> (Unexpected return type error).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70106">#70106</a> (Inheritance by anonymous class).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69674">#69674</a> (SIGSEGV array.c:953).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70164">#70164</a> (__COMPILER_HALT_OFFSET__ under namespace is not defined).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70108">#70108</a> (sometimes empty $_SERVER[‘QUERY_STRING’]).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70179">#70179</a> ($this refcount issue).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69896">#69896</a> (‘asm’ operand has impossible constraints).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70183">#70183</a> (null pointer deref (segfault) in zend_eval_const_expr).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70182">#70182</a> (Segfault in ZEND_ASSIGN_DIV_SPEC_CV_UNUSED_HANDLER).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69793">#69793</a> (Remotely triggerable stack exhaustion via recursive method calls).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69892">#69892</a> (Different arrays compare indentical due to integer key truncation).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70121">#70121</a> (unserialize() could lead to unexpected methods execution / NULL pointer deref).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70089">#70089</a> (segfault at ZEND_FETCH_DIM_W_SPEC_VAR_CONST_HANDLER ()).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70057">#70057</a> (Build failure on 32-bit Mac OS X 10.6.8: recursive inlining).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70012">#70012</a> (Exception lost with nested finally block).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69996">#69996</a> (Changing the property of a cloned object affects the original).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70083">#70083</a> (Use after free with assign by ref to overloaded objects).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70006">#70006</a> (cli - function with default arg = STDOUT crash output).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69521">#69521</a> (Segfault in gc_collect_cycles()).</p>
</li>
<li>
<p>Improved zend_string API.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69955">#69955</a> (Segfault when trying to combine [] and assign-op on ArrayAccess object).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69957">#69957</a> (Different ways of handling div/mod/intdiv).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69900">#69900</a> (Too long timeout on pipes).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69872">#69872</a> (uninitialised value in strtr with array).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69868">#69868</a> (Invalid read of size 1 in zend_compile_short_circuiting).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69849">#69849</a> (Broken output of apache_request_headers).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69840">#69840</a> (iconv_substr() doesn’t work with UTF-16BE).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69823">#69823</a> (PHP 7.0.0alpha1 segmentation fault when exactly 33 extensions are loaded).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69805">#69805</a> (null ptr deref and seg fault in zend_resolve_class_name).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69802">#69802</a> (Reflection on Closure::__invoke borks type hint class name).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69761">#69761</a> (Serialization of anonymous classes should be prevented).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69551">#69551</a> (parse_ini_file() and parse_ini_string() segmentation fault).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69781">#69781</a> (phpinfo() reports Professional Editions of Windows 7/8/8.1/10 as “Business”).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69835">#69835</a> (phpinfo() does not report many Windows SKUs).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69889">#69889</a> (Null coalesce operator doesn’t work for string offsets).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69891">#69891</a> (Unexpected array comparison result).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69892">#69892</a> (Different arrays compare indentical due to integer key truncation).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69893">#69893</a> (Strict comparison between integer and empty string keys crashes).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69767">#69767</a> (Default parameter value with wrong type segfaults).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69756">#69756</a> (Fatal error: Nesting level too deep - recursive dependency ? with ===).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69758">#69758</a> (Item added to array not being removed by array_pop/shift ).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/68475">#68475</a> (Add support for $callable() sytnax with ‘Class::method’).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69485">#69485</a> (Double free on zend_list_dtor).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69427">#69427</a> (Segfault on magic method __call of private method in superclass).</p>
</li>
<li>
<p>Fixed weird operators behavior. Division by zero now emits warning and returns +/-INF, modulo by zero and intdid() throws an exception, shifts by negative offset throw exceptions. Compile-time evaluation of division by zero is disabled.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69371">#69371</a> (Hash table collision leads to inaccessible array keys).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/68933">#68933</a> (Invalid read of size 8 in zend_std_read_property).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/68252">#68252</a> (segfault in Zend/zend_hash.c in function _zend_hash_del_el).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/65598">#65598</a> (Closure executed via static autoload incorrectly marked as static).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/66811">#66811</a> (Cannot access static::class in lambda, writen outside of a class).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69568">#69568</a> (call a private function in closure failed).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/67959">#67959</a> (Segfault when calling phpversion(‘spl’)).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/63734">#63734</a> (Garbage collector can free zvals that are still referenced).</p>
</li>
<li>
<p>Fixed oversight where define() did not support arrays yet const syntax did.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/68797">#68797</a> (Number 2.2250738585072012e-308 converted incorrectly).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69511">#69511</a> (Off-by-one buffer overflow in php_sys_readlink).</p>
</li>
</ul>
<h2 id="CLI-server"><a class="header-anchor" href="#CLI-server">¶</a>CLI server</h2>
<ul>
<li>Added support for SEARCH WebDav method.</li>
</ul>
<hr>
<ul>
<li>Refactor MIME type handling to use a hash table instead of linear search.</li>
<li>Update the MIME type list from the one shipped by Apache HTTPD.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/68291">#68291</a> (404 on urls with ‘+’).</li>
<li>Fixed bug <a href="http://bugs.php.net/66606">#66606</a> (Sets HTTP_CONTENT_TYPE but not CONTENT_TYPE).</li>
<li>Fixed bug <a href="http://bugs.php.net/70264">#70264</a> (CLI server directory traversal).</li>
<li>Fixed bug <a href="http://bugs.php.net/69655">#69655</a> (php -S changes MKCALENDAR request method to MKCOL).</li>
<li>Fixed bug <a href="http://bugs.php.net/64878">#64878</a> (304 responses return Content-Type header).</li>
</ul>
<h2 id="COM"><a class="header-anchor" href="#COM">¶</a>COM</h2>
<ul>
<li>Fixed bug #69939 (Casting object to bool returns false).</li>
</ul>
<h2 id="Curl"><a class="header-anchor" href="#Curl">¶</a>Curl</h2>
<ul>
<li>Removed support for unsafe file uploads.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70330">#70330</a> (Segmentation Fault with multiple “curl_copy_handle”).</li>
<li>Fixed bug <a href="http://bugs.php.net/70163">#70163</a> (curl_setopt_array() type confusion).</li>
<li>Fixed bug <a href="http://bugs.php.net/70065">#70065</a> (curl_getinfo() returns corrupted values).</li>
<li>Fixed bug <a href="http://bugs.php.net/69831">#69831</a> (Segmentation fault in curl_getinfo).</li>
<li>Fixed bug <a href="http://bugs.php.net/68937">#68937</a> (Segfault in curl_multi_exec).</li>
</ul>
<h2 id="Date"><a class="header-anchor" href="#Date">¶</a>Date</h2>
<ul>
<li>Removed $is_dst parameter from mktime() and gmmktime().</li>
<li>Removed date.timezone warning (<a href="https://wiki.php.net/rfc/date.timezone_warning_removal">https://wiki.php.net/rfc/date.timezone_warning_removal</a>).</li>
</ul>
<hr>
<ul>
<li>Added “v” DateTime format modifier to get the 3-digit version of fraction of seconds.</li>
<li>Implemented FR <a href="http://bugs.php.net/69089">#69089</a> (Added DateTime::RFC3339_EXTENDED to output in RFC3339 Extended format which includes fraction of seconds).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70245">#70245</a> (strtotime does not emit warning when 2nd parameter is object or string).</li>
<li>Fixed bug <a href="http://bugs.php.net/70266">#70266</a> (DateInterval::__construct.interval_spec is not supposed to be optional).</li>
<li>Fixed bug <a href="http://bugs.php.net/70277">#70277</a> (new DateTimeZone($foo) is ignoring text after null byte).</li>
<li>Fixed day_of_week function as it could sometimes return negative values internally.</li>
</ul>
<h2 id="DBA"><a class="header-anchor" href="#DBA">¶</a>DBA</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/62490">#62490</a> (dba_delete returns true on missing item (inifile)).</li>
<li>Fixed bug <a href="http://bugs.php.net/68711">#68711</a> (useless comparisons).</li>
</ul>
<h2 id="DOM"><a class="header-anchor" href="#DOM">¶</a>DOM</h2>
<ul>
<li>Made DOMNode::textContent writeable.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70558">#70558</a> (“Couldn’t fetch” error in DOMDocument::registerNodeClass()).</li>
<li>Fixed bug <a href="http://bugs.php.net/70001">#70001</a> (Assigning to DOMNode::textContent does additional entity encoding).</li>
<li>Fixed bug <a href="http://bugs.php.net/69846">#69846</a> (Segmenation fault (access violation) when iterating over DOMNodeList).</li>
</ul>
<h2 id="EXIF"><a class="header-anchor" href="#EXIF">¶</a>EXIF</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70385">#70385</a> (Buffer over-read in exif_read_data with TIFF IFD tag byte value of 32 bytes).</li>
</ul>
<h2 id="Fileinfo"><a class="header-anchor" href="#Fileinfo">¶</a>Fileinfo</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/66242">#66242</a> (libmagic: don’t assume char is signed).</li>
</ul>
<h2 id="Filter"><a class="header-anchor" href="#Filter">¶</a>Filter</h2>
<ul>
<li>New FILTER_VALIDATE_DOMAIN and better RFC conformance for FILTER_VALIDATE_URL.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/67167">#67167</a> (Wrong return value from FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE).</li>
</ul>
<h2 id="FPM"><a class="header-anchor" href="#FPM">¶</a>FPM</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/67106">#67106</a> (Split main fpm config).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70538">#70538</a> (“php-fpm -i” crashes).</li>
<li>Fixed bug <a href="http://bugs.php.net/70279">#70279</a> (HTTP Authorization Header is sometimes passed to newer reqeusts).</li>
<li>Fixed bug <a href="http://bugs.php.net/68945">#68945</a> (Unknown admin values segfault pools).</li>
<li>Fixed bug <a href="http://bugs.php.net/65933">#65933</a> (Cannot specify config lines longer than 1024 bytes).</li>
</ul>
<h2 id="FTP"><a class="header-anchor" href="#FTP">¶</a>FTP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69082">#69082</a> (FTPS support on Windows).</li>
</ul>
<h2 id="GD"><a class="header-anchor" href="#GD">¶</a>GD</h2>
<ul>
<li>Removed T1Lib support.</li>
</ul>
<hr>
<ul>
<li>Replace libvpx with libwebp for bundled libgd.</li>
<li>Made fontFetch’s path parser thread-safe.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/53156">#53156</a> (imagerectangle problem with point ordering).</li>
<li>Fixed bug <a href="http://bugs.php.net/66387">#66387</a> (Stack overflow with imagefilltoborder). (CVE-2015-8874)</li>
<li>Fixed bug <a href="http://bugs.php.net/70102">#70102</a> (imagecreatefromwebm() shifts colors).</li>
<li>Fixed bug <a href="http://bugs.php.net/66590">#66590</a> (imagewebp() doesn’t pad to even length).</li>
<li>Fixed bug <a href="http://bugs.php.net/66882">#66882</a> (imagerotate by -90 degrees truncates image by 1px).</li>
<li>Fixed bug <a href="http://bugs.php.net/70064">#70064</a> (imagescale(…, IMG_BICUBIC) leaks memory).</li>
<li>Fixed bug <a href="http://bugs.php.net/69024">#69024</a> (imagescale segfault with palette based image).</li>
<li>Fixed bug <a href="http://bugs.php.net/53154">#53154</a> (Zero-height rectangle has whiskers).</li>
<li>Fixed bug <a href="http://bugs.php.net/67447">#67447</a> (imagecrop() add a black line when cropping).</li>
<li>Fixed bug <a href="http://bugs.php.net/68714">#68714</a> (copy 'n paste error).</li>
<li>Fixed bug <a href="http://bugs.php.net/66339">#66339</a> (PHP segfaults in imagexbm).</li>
<li>Fixed bug <a href="http://bugs.php.net/70047">#70047</a> (gd_info() doesn’t report WebP support).</li>
<li>Fixed bug <a href="http://bugs.php.net/61221">#61221</a> (imagegammacorrect function loses alpha channel).</li>
</ul>
<h2 id="GMP"><a class="header-anchor" href="#GMP">¶</a>GMP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70284">#70284</a> (Use after free vulnerability in unserialize() with GMP).</li>
</ul>
<h2 id="hash"><a class="header-anchor" href="#hash">¶</a>hash</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70312">#70312</a> (HAVAL gives wrong hashes in specific cases).</li>
</ul>
<h2 id="IMAP"><a class="header-anchor" href="#IMAP">¶</a>IMAP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70158">#70158</a> (Building with static imap fails).</li>
<li>Fixed bug <a href="http://bugs.php.net/69998">#69998</a> (curl multi leaking memory).</li>
</ul>
<h2 id="Intl"><a class="header-anchor" href="#Intl">¶</a>Intl</h2>
<ul>
<li>Removed deprecated aliases datefmt_set_timezone_id() and IntlDateFormatter::setTimeZoneID().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70453">#70453</a> (IntlChar::foldCase() incorrect arguments and missing constants).</li>
<li>Fixed bug <a href="http://bugs.php.net/70454">#70454</a> (IntlChar::forDigit second parameter should be optional).</li>
</ul>
<h2 id="JSON"><a class="header-anchor" href="#JSON">¶</a>JSON</h2>
<ul>
<li>Replace non-free JSON parser with a parser from Jsond extension, fixes <a href="http://bugs.php.net/63520">#63520</a> (JSON extension includes a problematic license statement).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/62010">#62010</a> (json_decode produces invalid byte-sequences).</li>
<li>Fixed bug <a href="http://bugs.php.net/68546">#68546</a> (json_decode() Fatal error: Cannot access property started with ‘\0’).</li>
<li>Fixed bug <a href="http://bugs.php.net/68938">#68938</a> (json_decode() decodes empty string without error).</li>
</ul>
<h2 id="LDAP"><a class="header-anchor" href="#LDAP">¶</a>LDAP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/47222">#47222</a> (Implement LDAP_OPT_DIAGNOSTIC_MESSAGE).</li>
</ul>
<h2 id="LiteSpeed"><a class="header-anchor" href="#LiteSpeed">¶</a>LiteSpeed</h2>
<p><a href="https://www.php.net/manual/zh/install.unix.litespeed.php">https://www.php.net/manual/zh/install.unix.litespeed.php</a></p>
<ul>
<li><code>Updated LiteSpeed SAPI code from V5.5 to V6.6.</code></li>
</ul>
<h2 id="libxml"><a class="header-anchor" href="#libxml">¶</a>libxml</h2>
<ul>
<li>Fixed handling of big lines in error messages with libxml &gt;= 2.9.0.</li>
</ul>
<h2 id="Mcrypt"><a class="header-anchor" href="#Mcrypt">¶</a>Mcrypt</h2>
<ul>
<li>Removed mcrypt_generic_end() alias.</li>
<li>Removed mcrypt_ecb(), mcrypt_cbc(), mcrypt_cfb(), mcrypt_ofb().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70625">#70625</a> (mcrypt_encrypt() won’t return data when no IV was specified under RC4).</li>
<li>Fixed bug <a href="http://bugs.php.net/69833">#69833</a> (mcrypt fd caching not working).</li>
<li>Fixed possible read after end of buffer and use after free.</li>
</ul>
<h2 id="Mysqli"><a class="header-anchor" href="#Mysqli">¶</a>Mysqli</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/32490">#32490</a> (constructor of mysqli has wrong name).</li>
</ul>
<h2 id="Mysqlnd"><a class="header-anchor" href="#Mysqlnd">¶</a>Mysqlnd</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70949">#70949</a> (SQL Result Sets With NULL Can Cause Fatal Memory Errors).</li>
<li>Fixed bug <a href="http://bugs.php.net/70384">#70384</a> (mysqli_real_query():Unknown type 245 sent by the server).</li>
<li>Fixed bug <a href="http://bugs.php.net/70456">#70456</a> (mysqlnd doesn’t activate TCP keep-alive when connecting to a server).</li>
<li>Fixed bug <a href="http://bugs.php.net/70572">#70572</a> segfault in mysqlnd_connect.</li>
<li>Fixed bug <a href="http://bugs.php.net/69796">#69796</a> (mysqli_stmt::fetch doesn’t assign null values to bound variables).</li>
</ul>
<h2 id="OCI8"><a class="header-anchor" href="#OCI8">¶</a>OCI8</h2>
<ul>
<li>Corrected oci8 hash destructors to prevent segfaults, and a few other fixes.</li>
</ul>
<hr>
<ul>
<li>Fixed memory leak with LOBs.</li>
<li>Fixed bug <a href="http://bugs.php.net/68298">#68298</a> (OCI int overflow).</li>
</ul>
<h2 id="ODBC"><a class="header-anchor" href="#ODBC">¶</a>ODBC</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69975">#69975</a> (PHP segfaults when accessing nvarchar(max) defined columns. (CVE-2015-8879)</li>
</ul>
<h2 id="Opcache"><a class="header-anchor" href="#Opcache">¶</a>Opcache</h2>
<ul>
<li>Removed opcache.load_comments configuration directive. Now doc comments loading costs nothing and always enabled.</li>
</ul>
<hr>
<ul>
<li>Added experimental (disabled by default) file based opcode cache.</li>
</ul>
<hr>
<ul>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70656">#70656</a> (require() statement broken after opcache_reset() or a few hours of use).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70843">#70843</a> (Segmentation fault on MacOSX with opcache.file_cache_only=1).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70724">#70724</a> (Undefined Symbols from <a href="http://opcache.so">opcache.so</a> on Mac OS X 10.10).</p>
</li>
<li>
<p>Fixed compatibility with Windows 10 (see also bug <a href="http://bugs.php.net/70652">#70652</a>).</p>
</li>
<li>
<p>Attmpt to fix “Unable to reattach to base address” problem.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70423">#70423</a> (Warning Internal error: wrong size calculation).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70237">#70237</a> (Empty while and do-while segmentation fault with opcode on CLI enabled).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70111">#70111</a> (Segfault when a function uses both an explicit return type and an explicit cast).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70058">#70058</a> (Build fails when building for i386).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/70022">#70022</a> (Crash with opcache using opcache.file_cache_only=1).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69838">#69838</a> (Wrong size calculation for function table).</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/69688">#69688</a> (segfault with eval and opcache fast shutdown).</p>
</li>
<li>
<p>Fixed bug with try blocks being removed when extended_info opcode generation is turned on.</p>
</li>
<li>
<p>Fixed bug <a href="http://bugs.php.net/68644">#68644</a> (strlen incorrect : mbstring + func_overload=2 +UTF-8 + Opcache).</p>
</li>
</ul>
<h2 id="OpenSSL"><a class="header-anchor" href="#OpenSSL">¶</a>OpenSSL</h2>
<ul>
<li>Require at least OpenSSL version 0.9.8.</li>
</ul>
<hr>
<ul>
<li>Removed “CN_match” and “SNI_server_name” SSL context options. Use automatic detection or the “peer_name” option instead.</li>
</ul>
<hr>
<ul>
<li>Added “alpn_protocols” SSL context option allowing encrypted client/server streams to negotiate alternative protocols using the ALPN TLS extension when built against OpenSSL 1.0.2 or newer. Negotiated protocol information is accessible through stream_get_meta_data() output.</li>
<li>Implemented FR <a href="http://bugs.php.net/70438">#70438</a> (Add IV parameter for openssl_seal and openssl_open).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/68312">#68312</a> (Lookup for openssl.cnf causes a message box).</li>
<li>Fixed bug <a href="http://bugs.php.net/55259">#55259</a> (openssl extension does not get the DH parameters from DH key resource).</li>
<li>Fixed bug <a href="http://bugs.php.net/70395">#70395</a> (Missing ARG_INFO for openssl_seal()).</li>
<li>Fixed bug <a href="http://bugs.php.net/60632">#60632</a> (openssl_seal fails with AES).</li>
<li>Fixed bug <a href="http://bugs.php.net/70014">#70014</a> (openssl_random_pseudo_bytes() is not cryptographically secure). (CVE-2015-8867)</li>
<li>Fixed bug <a href="http://bugs.php.net/69882">#69882</a> (OpenSSL error “key values mismatch” after openssl_pkcs12_read with extra cert).</li>
</ul>
<h2 id="Pcntl"><a class="header-anchor" href="#Pcntl">¶</a>Pcntl</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/68505">#68505</a> (Added wifcontinued and wcontinued).</li>
<li>Added rusage support to pcntl_wait() and pcntl_waitpid().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70386">#70386</a> (Can’t compile on NetBSD because of missing WCONTINUED and WIFCONTINUED).</li>
<li>Fixed bug <a href="http://bugs.php.net/60509">#60509</a> (pcntl_signal doesn’t decrease ref-count of old handler when setting SIG_DFL).</li>
</ul>
<h2 id="PCRE"><a class="header-anchor" href="#PCRE">¶</a>PCRE</h2>
<ul>
<li>Removed support for the /e (PREG_REPLACE_EVAL) modifier.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70232">#70232</a> (Incorrect bump-along behavior with \K and empty string match).</li>
<li>Fixed bug <a href="http://bugs.php.net/70345">#70345</a> (Multiple vulnerabilities related to PCRE functions).</li>
<li>Fixed bug <a href="http://bugs.php.net/70232">#70232</a> (Incorrect bump-along behavior with \K and empty string match).</li>
<li>Fixed bug <a href="http://bugs.php.net/53823">#53823</a> (preg_replace: * qualifier on unicode replace garbles the string).</li>
<li>Fixed bug <a href="http://bugs.php.net/69864">#69864</a> (Segfault in preg_replace_callback).</li>
</ul>
<h2 id="PDO"><a class="header-anchor" href="#PDO">¶</a>PDO</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70861">#70861</a> (Segmentation fault in pdo_parse_params() during Drupal 8 test suite).</li>
<li>Fixed bug <a href="http://bugs.php.net/70389">#70389</a> (PDO constructor changes unrelated variables).</li>
<li>Fixed bug <a href="http://bugs.php.net/70272">#70272</a> (Segfault in pdo_mysql).</li>
<li>Fixed bug <a href="http://bugs.php.net/70221">#70221</a> (persistent sqlite connection + custom function segfaults).</li>
<li>Fixed bug <a href="http://bugs.php.net/59450">#59450</a> (./configure fails with “Cannot find php_pdo_driver.h”).</li>
</ul>
<h2 id="PDO-DBlib"><a class="header-anchor" href="#PDO-DBlib">¶</a>PDO_DBlib</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69757">#69757</a> (Segmentation fault on nextRowset).</li>
</ul>
<h2 id="PDO-mysql"><a class="header-anchor" href="#PDO-mysql">¶</a>PDO_mysql</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/68424">#68424</a> (Add new PDO mysql connection attr to control multi statements option).</li>
</ul>
<h2 id="PDO-OCI"><a class="header-anchor" href="#PDO-OCI">¶</a>PDO_OCI</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70308">#70308</a> (PDO::ATTR_PREFETCH is ignored).</li>
</ul>
<h2 id="PDO-pgsql"><a class="header-anchor" href="#PDO-pgsql">¶</a>PDO_pgsql</h2>
<ul>
<li>Removed PGSQL_ATTR_DISABLE_NATIVE_PREPARED_STATEMENT attribute in favor of ATTR_EMULATE_PREPARES).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69752">#69752</a> (PDOStatement::execute() leaks memory with DML Statements when closeCuror() is u).</li>
</ul>
<h2 id="Phar"><a class="header-anchor" href="#Phar">¶</a>Phar</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69720">#69720</a> (Null pointer dereference in phar_get_fp_offset()).</li>
<li>Fixed bug <a href="http://bugs.php.net/70433">#70433</a> (Uninitialized pointer in phar_make_dirstream when zip entry filename is “/”).</li>
<li>Improved fix for bug <a href="http://bugs.php.net/69441">#69441</a>.</li>
<li>Fixed bug <a href="http://bugs.php.net/70019">#70019</a> (Files extracted from archive may be placed outside of destination directory).</li>
</ul>
<h2 id="Phpdbg"><a class="header-anchor" href="#Phpdbg">¶</a>Phpdbg</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70614">#70614</a> (incorrect exit code in -rr mode with Exceptions).</li>
<li>Fixed bug <a href="http://bugs.php.net/70532">#70532</a> (phpdbg must respect set_exception_handler).</li>
<li>Fixed bug <a href="http://bugs.php.net/70531">#70531</a> (Run and quit mode (-qrr) should not fallback to interactive mode).</li>
<li>Fixed bug <a href="http://bugs.php.net/70533">#70533</a> (Help overview (-h) does not rpint anything under Windows).</li>
<li>Fixed bug <a href="http://bugs.php.net/70449">#70449</a> (PHP won’t compile on 10.4 and 10.5 because of missing constants).</li>
<li>Fixed bug <a href="http://bugs.php.net/70214">#70214</a> (FASYNC not defined, needs sys/file.h include).</li>
<li>Fixed bug <a href="http://bugs.php.net/70138">#70138</a> (Segfault when displaying memory leaks).</li>
</ul>
<h2 id="Reflection"><a class="header-anchor" href="#Reflection">¶</a>Reflection</h2>
<ul>
<li>Added ReflectionGenerator class.</li>
<li>Added reflection support for return types and type declarations.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70650">#70650</a> (Wrong docblock assignment).</li>
<li>Fixed bug <a href="http://bugs.php.net/70674">#70674</a> (ReflectionFunction::getClosure() leaks memory when used for internal functions).</li>
<li>Fixed bug causing bogus traces for ReflectionGenerator::getTrace().</li>
<li>Fixed inheritance chain of Reflector interface.</li>
</ul>
<h2 id="Session"><a class="header-anchor" href="#Session">¶</a>Session</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70876">#70876</a> (Segmentation fault when regenerating session id with strict mode).</li>
<li>Fixed bug <a href="http://bugs.php.net/70529">#70529</a> (Session read causes “String is not zero-terminated” error).</li>
<li>Fixed bug <a href="http://bugs.php.net/70013">#70013</a> (Reference to $_SESSION is lost after a call to session_regenerate_id()).</li>
<li>Fixed bug <a href="http://bugs.php.net/69952">#69952</a> (Data integrity issues accessing superglobals by reference).</li>
<li>Fixed bug <a href="http://bugs.php.net/67694">#67694</a> (Regression in session_regenerate_id()).</li>
<li>Fixed bug <a href="http://bugs.php.net/68941">#68941</a> (mod_files.sh is a bash-script).</li>
</ul>
<h2 id="SOAP"><a class="header-anchor" href="#SOAP">¶</a>SOAP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70940">#70940</a> (Segfault in soap / type_to_string).</li>
<li>Fixed bug <a href="http://bugs.php.net/70900">#70900</a> (SoapClient systematic out of memory error).</li>
<li>Fixed bug <a href="http://bugs.php.net/70875">#70875</a> (Segmentation fault if wsdl has no targetNamespace attribute).</li>
<li>Fixed bug <a href="http://bugs.php.net/70715">#70715</a> (Segmentation fault inside soap client).</li>
<li>Fixed bug <a href="http://bugs.php.net/70709">#70709</a> (SOAP Client generates Segfault).</li>
<li>Fixed bug <a href="http://bugs.php.net/70388">#70388</a> (SOAP serialize_function_call() type confusion / RCE).</li>
<li>Fixed bug <a href="http://bugs.php.net/70081">#70081</a> (SoapClient info leak / null pointer dereference via multiple type confusions).</li>
<li>Fixed bug <a href="http://bugs.php.net/70079">#70079</a> (Segmentation fault after more than 100 SoapClient calls).</li>
<li>Fixed bug <a href="http://bugs.php.net/70032">#70032</a> (make_http_soap_request calls zend_hash_get_current_key_ex(,NULL).</li>
<li>Fixed bug <a href="http://bugs.php.net/68361">#68361</a> (Segmentation fault on SoapClient::__getTypes).</li>
</ul>
<h2 id="SPL"><a class="header-anchor" href="#SPL">¶</a>SPL</h2>
<ul>
<li>Changed ArrayIterator implementation using zend_hash_iterator_… API. Allowed modification of iterated ArrayObject using the same behavior as proposed in `Fix “foreach” behavior`. Removed “Array was modified outside object and internal position is no longer valid” hack.</li>
</ul>
<hr>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/67886">#67886</a> (SplPriorityQueue/SplHeap doesn’t expose extractFlags nor curruption state).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70959">#70959</a> (ArrayObject unserialize does not restore protected fields).</li>
<li>Fixed bug <a href="http://bugs.php.net/70853">#70853</a> (SplFixedArray throws exception when using ref variable as index).</li>
<li>Fixed bug <a href="http://bugs.php.net/70868">#70868</a> (PCRE JIT and pattern reuse segfault).</li>
<li>Fixed bug <a href="http://bugs.php.net/70730">#70730</a> (Incorrect ArrayObject serialization if unset is called in serialize()).</li>
<li>Fixed bug <a href="http://bugs.php.net/70573">#70573</a> (Cloning SplPriorityQueue leads to memory leaks).</li>
<li>Fixed bug <a href="http://bugs.php.net/70303">#70303</a> (Incorrect constructor reflection for ArrayObject).</li>
<li>Fixed bug <a href="http://bugs.php.net/70068">#70068</a> (Dangling pointer in the unserialization of ArrayObject items).</li>
<li>Fixed bug <a href="http://bugs.php.net/70166">#70166</a> (Use After Free Vulnerability in unserialize() with SPLArrayObject).</li>
<li>Fixed bug <a href="http://bugs.php.net/70168">#70168</a> (Use After Free Vulnerability in unserialize() with SplObjectStorage).</li>
<li>Fixed bug <a href="http://bugs.php.net/70169">#70169</a> (Use After Free Vulnerability in unserialize() with SplDoublyLinkedList).</li>
<li>Fixed bug <a href="http://bugs.php.net/70053">#70053</a> (MutlitpleIterator array-keys incompatible change in PHP 7).</li>
<li>Fixed bug <a href="http://bugs.php.net/69970">#69970</a> (Use-after-free vulnerability in spl_recursive_it_move_forward_ex()).</li>
<li>Fixed bug <a href="http://bugs.php.net/69845">#69845</a> (ArrayObject with ARRAY_AS_PROPS broken).</li>
<li>Fixed bug <a href="http://bugs.php.net/66405">#66405</a> (RecursiveDirectoryIterator::CURRENT_AS_PATHNAME breaks the RecursiveIterator).</li>
</ul>
<h2 id="SQLite3"><a class="header-anchor" href="#SQLite3">¶</a>SQLite3</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70571">#70571</a> (Memory leak in sqlite3_do_callback).</li>
<li>Fixed bug <a href="http://bugs.php.net/69972">#69972</a> (Use-after-free vulnerability in sqlite3SafetyCheckSickOrOk()).</li>
<li>Fixed bug <a href="http://bugs.php.net/69897">#69897</a> (segfault when manually constructing SQLite3Result).</li>
<li>Fixed bug <a href="http://bugs.php.net/68260">#68260</a> (SQLite3Result::fetchArray declares wrong required_num_args).</li>
</ul>
<h2 id="Standard"><a class="header-anchor" href="#Standard">¶</a>Standard</h2>
<ul>
<li>Deprecated salt option to password_hash.</li>
<li>Removed call_user_method() and call_user_method_array() functions.</li>
<li>Remove string category support in setlocale().</li>
<li>Remove set_magic_quotes_runtime() and its alias magic_quotes_runtime().</li>
<li>Removed hardcoded limit on number of pipes in proc_open().</li>
</ul>
<hr>
<ul>
<li>Improved precision of log() function for base 2 and 10.</li>
</ul>
<hr>
<ul>
<li>Added Windows support for getrusage().</li>
<li>Added preg_replace_callback_array function.</li>
<li>Added intdiv() function.</li>
<li>Implemented FR <a href="http://bugs.php.net/70112">#70112</a> (Allow “dirname” to go up various times).</li>
<li>Implemented the RFC `Random Functions Throwing Exceptions in PHP 7`.</li>
</ul>
<hr>
<ul>
<li>Fixed count on symbol tables.</li>
<li>Fixed bug <a href="http://bugs.php.net/70963">#70963</a> (Unserialize shows UNKNOWN in result).</li>
<li>Fixed bug <a href="http://bugs.php.net/70910">#70910</a> (extract() breaks variable references).</li>
<li>Fixed bug <a href="http://bugs.php.net/70808">#70808</a> (array_merge_recursive corrupts memory of unset items).</li>
<li>Fixed bug <a href="http://bugs.php.net/70667">#70667</a> (strtr() causes invalid writes and a crashes).</li>
<li>Fixed bug <a href="http://bugs.php.net/70668">#70668</a> (array_keys() doesn’t respect references when $strict is true).</li>
<li>Fixed bug <a href="http://bugs.php.net/70487">#70487</a> (pack(‘x’) produces an error).</li>
<li>Fixed bug <a href="http://bugs.php.net/70342">#70342</a> (changing configuration with ignore_user_abort(true) isn’t working).</li>
<li>Fixed bug <a href="http://bugs.php.net/70295">#70295</a> (Segmentation fault with setrawcookie).</li>
<li>Fixed bug <a href="http://bugs.php.net/67131">#67131</a> (setcookie() conditional for empty values not met).</li>
<li>Fixed bug <a href="http://bugs.php.net/70365">#70365</a> (Use-after-free vulnerability in unserialize() with SplObjectStorage).</li>
<li>Fixed bug <a href="http://bugs.php.net/70366">#70366</a> (Use-after-free vulnerability in unserialize() with SplDoublyLinkedList).</li>
<li>Fixed bug <a href="http://bugs.php.net/70250">#70250</a> (extract() turns array elements to references).</li>
<li>Fixed bug <a href="http://bugs.php.net/70211">#70211</a> (php 7 ZEND_HASH_IF_FULL_DO_RESIZE use after free).</li>
<li>Fixed bug <a href="http://bugs.php.net/70208">#70208</a> (Assert breaking access on objects).</li>
<li>Fixed bug <a href="http://bugs.php.net/70140">#70140</a> (str_ireplace/php_string_tolower - Arbitrary Code Execution).</li>
<li>Fixed bug <a href="http://bugs.php.net/36365">#36365</a> (scandir duplicates file name at every 65535th file).</li>
<li>Fixed bug <a href="http://bugs.php.net/70096">#70096</a> (Repeated iptcembed() adds superfluous FF bytes).</li>
<li>Fixed bug <a href="http://bugs.php.net/70018">#70018</a> (exec does not strip all whitespace).</li>
<li>Fixed bug <a href="http://bugs.php.net/69983">#69983</a> (get_browser fails with user agent of null).</li>
<li>Fixed bug <a href="http://bugs.php.net/69976">#69976</a> (Unable to parse “all” urls with colon char).</li>
<li>Fixed bug <a href="http://bugs.php.net/69768">#69768</a> (escapeshell*() doesn’t cater to !).</li>
<li>Fixed bug <a href="http://bugs.php.net/62922">#62922</a> (Truncating entire string should result in string).</li>
<li>Fixed bug <a href="http://bugs.php.net/69723">#69723</a> (Passing parameters by reference and array_column).</li>
<li>Fixed bug <a href="http://bugs.php.net/69523">#69523</a> (Cookie name cannot be empty).</li>
<li>Fixed bug <a href="http://bugs.php.net/69325">#69325</a> (php_copy_file_ex does not pass the argument).</li>
<li>Fixed bug <a href="http://bugs.php.net/69299">#69299</a> (Regression in array_filter’s $flag argument in PHP 7).</li>
<li>Fixed user session handlers (See rfc:session.user.return-value).</li>
<li>Fixed bug <a href="http://bugs.php.net/65272">#65272</a> (flock() out parameter not set correctly in windows).</li>
<li>Fixed bug <a href="http://bugs.php.net/69686">#69686</a> (password_verify reports back error on PHP7 will null string).</li>
</ul>
<h2 id="Streams"><a class="header-anchor" href="#Streams">¶</a>Streams</h2>
<ul>
<li>Removed set_socket_blocking() in favor of its alias stream_set_blocking().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70361">#70361</a> (HTTP stream wrapper doesn’t close keep-alive connections).</li>
<li>Fixed bug <a href="http://bugs.php.net/68532">#68532</a> (convert.base64-encode omits padding bytes).</li>
</ul>
<h2 id="Tokenizer"><a class="header-anchor" href="#Tokenizer">¶</a>Tokenizer</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69430">#69430</a> (token_get_all has new irrecoverable errors).</li>
</ul>
<h2 id="XMLReader"><a class="header-anchor" href="#XMLReader">¶</a>XMLReader</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70309">#70309</a> (XmlReader read generates extra output).</li>
</ul>
<h2 id="XMLRPC"><a class="header-anchor" href="#XMLRPC">¶</a>XMLRPC</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70526">#70526</a> (xmlrpc_set_type returns false on success).</li>
</ul>
<h2 id="XSL"><a class="header-anchor" href="#XSL">¶</a>XSL</h2>
<ul>
<li>Removed xsl.security_prefs ini option.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70678">#70678</a> (PHP7 returns true when false is expected).</li>
<li>Fixed bug <a href="http://bugs.php.net/70535">#70535</a> (XSLT: free(): invalid pointer).</li>
<li>Fixed bug <a href="http://bugs.php.net/69782">#69782</a> (NULL pointer dereference).</li>
<li>Fixed bug <a href="http://bugs.php.net/64776">#64776</a> (The XSLT extension is not thread safe).</li>
</ul>
<h2 id="Zlib"><a class="header-anchor" href="#Zlib">¶</a>Zlib</h2>
<ul>
<li>Added deflate_init(), deflate_add(), inflate_init(), inflate_add() functions allowing incremental/streaming compression/decompression.</li>
</ul>
<h2 id="Zip"><a class="header-anchor" href="#Zip">¶</a>Zip</h2>
<ul>
<li>Update bundled libzip to 1.0.1.</li>
</ul>
<hr>
<ul>
<li>Added ZipArchive::setCompressionName and ZipArchive::setCompressionIndex methods.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70322">#70322</a> (ZipArchive::close() doesn’t indicate errors).</li>
<li>Fixed bug <a href="http://bugs.php.net/70350">#70350</a> (ZipArchive::extractTo allows for directory traversal when creating directories). (CVE-2014-9767)</li>
<li>Fixed bug <a href="http://bugs.php.net/67161">#67161</a> (ZipArchive::getStream() returns NULL for certain file).</li>
</ul>
<h1 id="关键问题及解决思路"><a class="header-anchor" href="#关键问题及解决思路">¶</a>关键问题及解决思路</h1>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
        <tag>PHP7</tag>
        <tag>LiteSpeed</tag>
        <tag>PGO</tag>
        <tag>HugePage</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Version 7.1.0 Published</title>
    <url>/2016/12/01/PHP-Version-7-1-0-Published/</url>
    <content><![CDATA[<h1 id="目标及关键路径"><a class="header-anchor" href="#目标及关键路径">¶</a>目标及关键路径</h1>
<ul>
<li>提升性能
<ul>
<li>New SSA based optimization framework (embedded into opcache)</li>
<li>Global optimization of PHP bytecode based on type inference</li>
<li>Highly specialized VM opcode handlers</li>
</ul>
</li>
</ul>
<h1 id="从-PHP-7-0-x-移植到-PHP-7-1-x"><a class="header-anchor" href="#从-PHP-7-0-x-移植到-PHP-7-1-x">¶</a>从 PHP 7.0.x 移植到 PHP 7.1.x</h1>
<p><a href="https://www.php.net/manual/zh/migration71.php">这里可以找到原文</a></p>
<h2 id="不向后兼容的变更"><a class="header-anchor" href="#不向后兼容的变更">¶</a>不向后兼容的变更</h2>
<ul>
<li>
<p>当传递参数过少时将抛出错误</p>
</li>
<li>
<p>Dynamic calls for certain functions have been forbidden (in the form of <code>$func()</code> or <code>array_map('extract', ...)</code>, etc). These functions either inspect or modify another scope, and present with them ambiguous and unreliable behavior. The functions are as follows:</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.assert.php">assert()</a> - with a string as the first argument</li>
<li><a href="https://www.php.net/manual/zh/function.compact.php">compact()</a></li>
<li><a href="https://www.php.net/manual/zh/function.extract.php">extract()</a></li>
<li><a href="https://www.php.net/manual/zh/function.func-get-args.php">func_get_args()</a></li>
<li><a href="https://www.php.net/manual/zh/function.func-get-arg.php">func_get_arg()</a></li>
<li><a href="https://www.php.net/manual/zh/function.func-num-args.php">func_num_args()</a></li>
<li><a href="https://www.php.net/manual/zh/function.get-defined-vars.php">get_defined_vars()</a></li>
<li><a href="https://www.php.net/manual/zh/function.mb-parse-str.php">mb_parse_str()</a> - with one arg</li>
<li><a href="https://www.php.net/manual/zh/function.parse-str.php">parse_str()</a> - with one arg</li>
</ul>
</li>
<li>
<p>The following names cannot be used to name classes, interfaces, or traits:</p>
<ul>
<li>void</li>
<li><a href="https://www.php.net/manual/zh/language.types.iterable.php">iterable</a></li>
</ul>
</li>
<li>
<p>Integer operations and conversions on numerical strings now respect scientific notation. This also includes the <code>(int)</code> cast operation, and the following functions: <a href="https://www.php.net/manual/zh/function.intval.php">intval()</a> (where the base is 10), <a href="https://www.php.net/manual/zh/function.settype.php">settype()</a>, <a href="https://www.php.net/manual/zh/function.decbin.php">decbin()</a>, <a href="https://www.php.net/manual/zh/function.decoct.php">decoct()</a>, and <a href="https://www.php.net/manual/zh/function.dechex.php">dechex()</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.mt-rand.php">mt_rand()</a> will now default to using the fixed version of the Mersenne Twister algorithm. If deterministic output from <a href="https://www.php.net/manual/zh/function.mt-srand.php">mt_srand()</a> was relied upon, then the <strong><code>MT_RAND_PHP</code></strong> with the ability to preserve the old (incorrect) implementation via an additional optional second parameter to <a href="https://www.php.net/manual/zh/function.mt-srand.php">mt_srand()</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.rand.php">rand()</a> and <a href="https://www.php.net/manual/zh/function.srand.php">srand()</a> have now been made aliases to <a href="https://www.php.net/manual/zh/function.mt-rand.php">mt_rand()</a> and <a href="https://www.php.net/manual/zh/function.mt-srand.php">mt_srand()</a>, respectively. This means that the output for the following functions have changed: <a href="https://www.php.net/manual/zh/function.rand.php">rand()</a>, <a href="https://www.php.net/manual/zh/function.shuffle.php">shuffle()</a>, <a href="https://www.php.net/manual/zh/function.str-shuffle.php">str_shuffle()</a>, and <a href="https://www.php.net/manual/zh/function.array-rand.php">array_rand()</a>.</p>
</li>
<li>
<p>The ASCII delete control character (0x7F) can no longer be used in identifiers that are not quoted.</p>
</li>
<li>
<p>If the <code>error_log</code> ini setting is set to <code>syslog</code>, the PHP error levels are mapped to the syslog error levels. This brings finer differentiation in the error logs in contrary to the previous approach where all the errors are logged with the notice level only.</p>
</li>
<li>
<p>对于在执行构造方法时抛出异常的对象，现在析构方法绝不会被调用。在先前的版本中，这个行为取决于对象是否在构造方法以外的地方呗引用（例如一个错误堆栈回溯）</p>
</li>
<li>
<p>call_user_func()不再支持对传址的函数的调用</p>
</li>
<li>
<p>对字符串使用一个空索引操作符（例如$str[] = $x）将会抛出一个致命错误， 而不是静默地将其转为一个数组。</p>
</li>
<li>
<p>下列ini配置项已经被移除：</p>
<ul>
<li><code>session.entropy_file</code></li>
<li><code>session.entropy_length</code></li>
<li><code>session.hash_function</code></li>
<li><code>session.hash_bits_per_character</code></li>
</ul>
</li>
<li>
<p>The order of the elements in an array has changed when those elements have been automatically created by referencing them in a by reference assignment.</p>
</li>
<li>
<p>The internal sorting algorithm has been improved, what may result in different sort order of elements, which compare as equal, than before.</p>
</li>
<li>
<p>The error message for E_RECOVERABLE errors has been changed from “Catchable fatal error” to “Recoverable fatal error”.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/class.datetime.php">DateTime</a> and <a href="https://www.php.net/manual/zh/class.datetimeimmutable.php">DateTimeImmutable</a> now properly incorporate microseconds when constructed from the current time, either explicitly or with a relative string (e.g. <code>&quot;first day of next month&quot;</code>). This means that naive comparisons of two newly created instances will now more likely return <strong><code>false</code></strong> instead of <strong><code>true</code></strong>:</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.fatal-errors-to-error-exceptions">Fatal errors to Error exceptions conversions</a></p>
</li>
<li>
<p>Variables bound to a <a href="https://www.php.net/manual/zh/functions.anonymous.php">closure</a> via the <code>use</code> construct cannot use the same name as any <a href="https://www.php.net/manual/zh/language.variables.predefined.php">superglobals</a>, $this, or any parameter.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.long2ip.php">long2ip()</a> now expects an int instead of a string.</p>
</li>
<li>
<p>JSON encoding and decoding</p>
<ul>
<li>
<p>The <code>serialize_precision</code> ini setting now controls the serialization precision when encoding doubles.</p>
</li>
<li>
<p>Decoding an empty key now results in an empty property name, rather than <em>empty</em> as a property name.</p>
</li>
</ul>
</li>
<li>
<p>Drop support for the sslv2 stream</p>
</li>
<li>
<p>Return statements without argument in functions which declare a return type now trigger E_COMPILE_ERROR (unless the return type is declared as void), even if the return statement would never be reached.</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>mcrypt 扩展已经过时了大约10年，并且用起来很复杂。因此它被废弃并且被 OpenSSL 所取代。 从PHP 7.2起它将被从核心代码中移除并且移到PECL中。</p>
</li>
<li>
<p>对于<a href="https://www.php.net/manual/zh/function.mb-ereg-replace.php">mb_ereg_replace()</a>和<a href="https://www.php.net/manual/zh/function.mb-eregi-replace.php">mb_eregi_replace()</a>的 <code>e</code>模式修饰符现在已被废弃。</p>
</li>
</ul>
<h2 id="新特性"><a class="header-anchor" href="#新特性">¶</a>新特性</h2>
<ul>
<li>
<p>参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空。 当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是 null 。</p>
</li>
<li>
<p>一个新的返回值类型void被引入。 返回值声明为 void 类型的方法要么干脆省去 return 语句，要么使用一个空的 return 语句。 对于 void 函数来说，null 不是一个合法的返回值。</p>
</li>
<li>
<p>短数组语法（<code>[]</code>）现在作为<a href="https://www.php.net/manual/zh/function.list.php">list()</a>语法的一个备选项，可以用于将数组的值赋给一些变量（包括在<code>foreach</code>中）。</p>
</li>
<li>
<p>现在起支持设置类常量的可见性。</p>
</li>
<li>
<p>现在引入了一个新的被称为<a href="https://www.php.net/manual/zh/language.types.iterable.php">iterable</a>的伪类 (与<a href="https://www.php.net/manual/zh/language.types.callable.php">callable</a>类似)。 这可以被用在参数或者返回值类型中，它代表接受数组或者实现了<strong>Traversable</strong>接口的对象。 至于子类，当用作参数时，子类可以收紧父类的<a href="https://www.php.net/manual/zh/language.types.iterable.php">iterable</a>类型到array 或一个实现了<strong>Traversable</strong>的对象。对于返回值，子类可以拓宽父类的 array或对象返回值类型到<a href="https://www.php.net/manual/zh/language.types.iterable.php">iterable</a>。</p>
</li>
<li>
<p>一个catch语句块现在可以通过管道字符(|)来实现多个异常的捕获。 这对于需要同时处理来自不同类的不同异常时很有用。</p>
</li>
<li>
<p>现在<a href="https://www.php.net/manual/zh/function.list.php">list()</a>和它的新的<code>[]</code>语法支持在它内部去指定键名。这意味着它可以将任意类型的数组 都赋值给一些变量（与短数组语法类似）</p>
</li>
<li>
<p>现在所有支持偏移量的<a href="https://www.php.net/manual/zh/book.strings.php">字符串操作函数</a> 都支持接受负数作为偏移量，包括通过<code>[]</code>或<code>&#123;&#125;</code>操作<a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.substr">字符串下标</a>。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。</p>
</li>
<li>
<p>通过给<a href="https://www.php.net/manual/zh/function.openssl-encrypt.php">openssl_encrypt()</a>和<a href="https://www.php.net/manual/zh/function.openssl-decrypt.php">openssl_decrypt()</a> 添加额外参数，现在支持了AEAD (模式 GCM and CCM)。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/class.closure.php">Closure</a>新增了一个静态方法，用于将<a href="https://www.php.net/manual/zh/language.types.callable.php">callable</a>快速地 转为一个<a href="https://www.php.net/manual/zh/class.closure.php">Closure</a> 对象。</p>
</li>
<li>
<p>一个新的名为 <a href="https://www.php.net/manual/zh/function.pcntl-async-signals.php">pcntl_async_signals()</a> 的方法现在被引入， 用于启用无需 ticks （这会带来很多额外的开销）的异步信号处理。</p>
</li>
<li>
<p>对服务器推送的支持现在已经被加入到 CURL 扩展中（ 需要版本 7.46 或更高）。这个可以通过 <a href="https://www.php.net/manual/zh/function.curl-multi-setopt.php">curl_multi_setopt()</a> 函数与新的常量 <strong><code>CURLMOPT_PUSHFUNCTION</code></strong> 来进行调节。常量 <strong><code>CURL_PUST_OK</code></strong> 和 <strong><code>CURL_PUSH_DENY</code></strong> 也已经被添加进来，以便服务器推送的回调函数来表明自己会同意或拒绝处理。</p>
</li>
<li>
<p>新增 <a href="https://www.php.net/manual/zh/context.socket.php#context.socket.tcp_nodelay">tcp_nodelay</a> 选项。</p>
</li>
</ul>
<h1 id="变化"><a class="header-anchor" href="#变化">¶</a>变化</h1>
<p><a href="https://www.php.net/ChangeLog-7.php#PHP_7_1">这里可以找到原文</a></p>
<h2 id="Core"><a class="header-anchor" href="#Core">¶</a>Core</h2>
<ul>
<li>Change statement and fcall extension handlers to accept frame.</li>
<li>Number operators taking numeric strings now emit E_NOTICEs or E_WARNINGs when given malformed numeric strings.</li>
<li>(int), intval() where $base is 10 or unspecified, settype(), decbin(), decoct(), dechex(), integer operators and other conversions now always respect scientific notation in numeric strings.</li>
<li>Raise a compile-time warning on octal escape sequence overflow.</li>
<li>TypeError messages for arg_info type checks will now say “must be … or null” where the parameter or return type accepts null.</li>
</ul>
<hr>
<ul>
<li>Added nullable types.</li>
<li>Added DFA optimization framework based on e-SSA form.</li>
<li>Added specialized opcode handlers (e.g. ZEND_ADD_LONG_NO_OVERFLOW).</li>
<li>Added [] = as alternative construct to list() =.</li>
<li>Added void return type.</li>
<li>Added support for negative string offsets in string offset syntax and various string functions.</li>
<li>Added a form of the list() construct where keys can be specified.</li>
<li>Implemented safe execution timeout handling, that prevents random crashes after “Maximum execution time exceeded” error.</li>
<li>Implemented the RFC `Support Class Constant Visibility`.</li>
<li>Implemented the RFC `Catching multiple exception types`.</li>
<li>Implemented logging to syslog with dynamic error levels.</li>
<li>Implemented FR <a href="http://bugs.php.net/72614">#72614</a> (Support “nmake test” on building extensions by phpize).</li>
<li>Implemented RFC: Iterable.</li>
<li>Implemented RFC: Closure::fromCallable (Danack)</li>
<li>Implemented RFC: Replace “Missing argument” warning with “\ArgumentCountError” exception.</li>
<li>Implemented RFC: Fix inconsistent behavior of $this variable.</li>
<li>Added new constant PHP_FD_SETSIZE.</li>
<li>Added optind parameter to getopt().</li>
<li>Added PHP to SAPI error severity mapping for logs.</li>
<li>Implemented RFC: RNG Fixes.</li>
<li>Implemented email validation as per RFC 6531.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73585">#73585</a> (Logging of “Internal Zend error - Missing class information” missing class name).</li>
<li>Fixed memory leak(null coalescing operator with Spl hash).</li>
<li>Fixed bug <a href="http://bugs.php.net/72736">#72736</a> (Slow performance when fetching large dataset with mysqli / PDO).</li>
<li>Fixed bug <a href="http://bugs.php.net/72978">#72978</a> (Use After Free Vulnerability in unserialize()). (CVE-2016-9936)</li>
<li>Fixed bug <a href="http://bugs.php.net/72482">#72482</a> (Ilegal write/read access caused by gdImageAALine overflow).</li>
<li>Fixed bug <a href="http://bugs.php.net/72696">#72696</a> (imagefilltoborder stackoverflow on truecolor images). (CVE-2016-9933)</li>
<li>Fixed bug <a href="http://bugs.php.net/73350">#73350</a> (Exception::__toString() cause circular references).</li>
<li>Fixed bug <a href="http://bugs.php.net/73329">#73329</a> ((Float)“Nano” == NAN).</li>
<li>Fixed bug <a href="http://bugs.php.net/73288">#73288</a> (Segfault in __clone &gt; Exception.toString &gt; __get).</li>
<li>Fixed for <a href="http://bugs.php.net/73240">#73240</a> (Write out of bounds at number_format).</li>
<li>Fix pthreads detection when cross-compiling (ffontaine)</li>
<li>Fixed bug <a href="http://bugs.php.net/73337">#73337</a> (try/catch not working with two exceptions inside a same operation).</li>
<li>Fixed bug <a href="http://bugs.php.net/73156">#73156</a> (segfault on undefined function).</li>
<li>Fixed bug <a href="http://bugs.php.net/73163">#73163</a> (PHP hangs if error handler throws while accessing undef const in default value).</li>
<li>Fixed bug <a href="http://bugs.php.net/73172">#73172</a> (parse error: Invalid numeric literal).</li>
<li>Fixed bug <a href="http://bugs.php.net/73181">#73181</a> (parse_str() without a second argument leads to crash).</li>
<li>Fixed bug <a href="http://bugs.php.net/73025">#73025</a> (Heap Buffer Overflow in virtual_popen of zend_virtual_cwd.c).</li>
<li>Fixed bug <a href="http://bugs.php.net/73058">#73058</a> (crypt broken when salt is ‘too’ long).</li>
<li>Fixed bug <a href="http://bugs.php.net/72944">#72944</a> (Null pointer deref in zval_delref_p).</li>
<li>Fixed bug <a href="http://bugs.php.net/72943">#72943</a> (assign_dim on string doesn’t reset hval).</li>
<li>Fixed bug <a href="http://bugs.php.net/72598">#72598</a> (Reference is lost after array_slice()).</li>
<li>Fixed bug <a href="http://bugs.php.net/72703">#72703</a> (Out of bounds global memory read in BF_crypt triggered by password_verify).</li>
<li>Fixed bug <a href="http://bugs.php.net/72813">#72813</a> (Segfault with __get returned by ref).</li>
<li>Fixed bug <a href="http://bugs.php.net/72767">#72767</a> (PHP Segfaults when trying to expand an infinite operator).</li>
<li>Fixed bug <a href="http://bugs.php.net/72857">#72857</a> (stream_socket_recvfrom read access violation).</li>
<li>Fixed bug <a href="http://bugs.php.net/72663">#72663</a> (Create an Unexpected Object and Don’t Invoke __wakeup() in Deserialization).</li>
<li>Fixed bug <a href="http://bugs.php.net/72681">#72681</a> (PHP Session Data Injection Vulnerability).</li>
<li>Fixed bug <a href="http://bugs.php.net/72742">#72742</a> (memory allocator fails to realloc small block to large one).</li>
<li>Fixed URL rewriter. It would not rewrite ‘<a href="//example.com/">//example.com/</a>’ URL unconditionally. URL rewrite target hosts whitelist is implemented.</li>
<li>Fixed bug <a href="http://bugs.php.net/72641">#72641</a> (phpize (on Windows) ignores PHP_PREFIX).</li>
<li>Fixed bug <a href="http://bugs.php.net/72683">#72683</a> (getmxrr broken).</li>
<li>Fixed bug <a href="http://bugs.php.net/72629">#72629</a> (Caught exception assignment to variables ignores references).</li>
<li>Fixed bug <a href="http://bugs.php.net/72594">#72594</a> (Calling an earlier instance of an included anonymous class fatals).</li>
<li>Fixed bug <a href="http://bugs.php.net/72581">#72581</a> (previous property undefined in Exception after deserialization).</li>
<li>Fixed bug <a href="http://bugs.php.net/72543">#72543</a> (Different references behavior comparing to PHP 5).</li>
<li>Fixed bug <a href="http://bugs.php.net/72347">#72347</a> (VERIFY_RETURN type casts visible in finally).</li>
<li>Fixed bug <a href="http://bugs.php.net/72216">#72216</a> (Return by reference with finally is not memory safe).</li>
<li>Fixed bug <a href="http://bugs.php.net/72215">#72215</a> (Wrong return value if var modified in finally).</li>
<li>Fixed bug <a href="http://bugs.php.net/71818">#71818</a> (Memory leak when array altered in destructor).</li>
<li>Fixed bug <a href="http://bugs.php.net/71539">#71539</a> (Memory error on $arr[$a] =&amp; $arr[$b] if RHS rehashes).</li>
<li>Fixed bug <a href="http://bugs.php.net/71911">#71911</a> (Unable to set --enable-debug on building extensions by phpize on Windows).</li>
<li>Fixed bug <a href="http://bugs.php.net/29368">#29368</a> (The destructor is called when an exception is thrown from the constructor).</li>
<li>Fixed bug <a href="http://bugs.php.net/72513">#72513</a> (Stack-based buffer overflow vulnerability in virtual_file_ex).</li>
<li>Fixed bug <a href="http://bugs.php.net/72573">#72573</a> (HTTP_PROXY is improperly trusted by some PHP libraries and applications).</li>
<li>Fixed bug <a href="http://bugs.php.net/72523">#72523</a> (dtrace issue with reflection (failed test)).</li>
<li>Fixed bug <a href="http://bugs.php.net/72508">#72508</a> (strange references after recursive function call and “switch” statement).</li>
<li>Fixed bug <a href="http://bugs.php.net/72441">#72441</a> (Segmentation fault: RFC list_keys).</li>
<li>Fixed bug <a href="http://bugs.php.net/72395">#72395</a> (list() regression).</li>
<li>Fixed bug <a href="http://bugs.php.net/72373">#72373</a> (TypeError after Generator function w/declared return type finishes).</li>
<li>Fixed bug <a href="http://bugs.php.net/69489">#69489</a> (tempnam() should raise notice if falling back to temp dir).</li>
<li>Fixed UTF-8 and long path support on Windows.</li>
<li>Fixed bug <a href="http://bugs.php.net/53432">#53432</a> (Assignment via string index access on an empty string converts to array).</li>
<li>Fixed bug <a href="http://bugs.php.net/62210">#62210</a> (Exceptions can leak temporary variables).</li>
<li>Fixed bug <a href="http://bugs.php.net/62814">#62814</a> (It is possible to stiffen child class members visibility).</li>
<li>Fixed bug <a href="http://bugs.php.net/69989">#69989</a> (Generators don’t participate in cycle GC).</li>
<li>Fixed bug <a href="http://bugs.php.net/70228">#70228</a> (Memleak if return in finally block).</li>
<li>Fixed bug <a href="http://bugs.php.net/71266">#71266</a> (Missing separation of properties HT in foreach etc).</li>
<li>Fixed bug <a href="http://bugs.php.net/71604">#71604</a> (Aborted Generators continue after nested finally).</li>
<li>Fixed bug <a href="http://bugs.php.net/71572">#71572</a> (String offset assignment from an empty string inserts null byte).</li>
<li>Fixed bug <a href="http://bugs.php.net/71897">#71897</a> (ASCII 0x7F Delete control character permitted in identifiers).</li>
<li>Fixed bug <a href="http://bugs.php.net/72188">#72188</a> (Nested try/finally blocks losing return value).</li>
<li>Fixed bug <a href="http://bugs.php.net/72213">#72213</a> (Finally leaks on nested exceptions).</li>
<li>Fixed bug <a href="http://bugs.php.net/47517">#47517</a> (php-cgi.exe missing UAC manifest).</li>
</ul>
<h2 id="Apache2handler"><a class="header-anchor" href="#Apache2handler">¶</a>Apache2handler</h2>
<ul>
<li>Enable per-module logging in Apache 2.4+.</li>
</ul>
<h2 id="BCmath"><a class="header-anchor" href="#BCmath">¶</a>BCmath</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73190">#73190</a> (memcpy negative parameter _bc_new_num_ex).</li>
</ul>
<h2 id="Bz2"><a class="header-anchor" href="#Bz2">¶</a>Bz2</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72837">#72837</a> (integer overflow in bzdecompress caused heap corruption).</li>
<li>Fixed bug <a href="http://bugs.php.net/72613">#72613</a> (Inadequate error handling in bzread()).</li>
</ul>
<h2 id="Calendar"><a class="header-anchor" href="#Calendar">¶</a>Calendar</h2>
<ul>
<li>Fix integer overflows (Joshua Rogers)</li>
<li>Fixed bug <a href="http://bugs.php.net/67976">#67976</a> (cal_days_month() fails for final month of the French calendar).</li>
<li>Fixed bug <a href="http://bugs.php.net/71894">#71894</a> (AddressSanitizer: global-buffer-overflow in zif_cal_from_jd).</li>
</ul>
<h2 id="CLI-Server"><a class="header-anchor" href="#CLI-Server">¶</a>CLI Server</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73360">#73360</a> (Unable to work in root with unicode chars).</li>
<li>Fixed bug <a href="http://bugs.php.net/71276">#71276</a> (Built-in webserver does not send Date header).</li>
</ul>
<h2 id="COM"><a class="header-anchor" href="#COM">¶</a>COM</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73126">#73126</a> (Cannot pass parameter 1 by reference).</li>
<li>Fixed bug <a href="http://bugs.php.net/69579">#69579</a> (Invalid free in extension trait).</li>
<li>Fixed bug <a href="http://bugs.php.net/72922">#72922</a> (COM called from PHP does not return out parameters).</li>
<li>Fixed bug <a href="http://bugs.php.net/72569">#72569</a> (DOTNET/COM array parameters broke in PHP7).</li>
<li>Fixed bug <a href="http://bugs.php.net/72498">#72498</a> (variant_date_from_timestamp null dereference).</li>
</ul>
<h2 id="Curl"><a class="header-anchor" href="#Curl">¶</a>Curl</h2>
<ul>
<li>Implement support for handling <a href="https://zhuanlan.zhihu.com/p/26559480">HTTP/2</a> Server Push.</li>
<li>Add curl_multi_errno(), curl_share_errno() and curl_share_strerror() functions.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72674">#72674</a> (Heap overflow in curl_escape).</li>
<li>Fixed bug <a href="http://bugs.php.net/72541">#72541</a> (size_t overflow lead to heap corruption). (Stas).</li>
<li>Fixed bug <a href="http://bugs.php.net/71709">#71709</a> (curl_setopt segfault with empty CURLOPT_HTTPHEADER).</li>
<li>Fixed bug <a href="http://bugs.php.net/71929">#71929</a> (CURLINFO_CERTINFO data parsing error).</li>
</ul>
<h2 id="Date"><a class="header-anchor" href="#Date">¶</a>Date</h2>
<ul>
<li>Invalid serialization data for a DateTime or DatePeriod object will now throw an instance of Error from __wakeup() or __set_state() instead of resulting in a fatal error.</li>
<li>Timezone initialization failure from serialized data will now throw an instance of Error from __wakeup() or __set_state() instead of resulting in a fatal error.</li>
<li>Export date_get_interface_ce() for extension use.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/69587">#69587</a> (DateInterval properties and isset).</li>
<li>Fixed bug <a href="http://bugs.php.net/73426">#73426</a> (createFromFormat with ‘z’ format char results in incorrect time).</li>
<li>Fixed bug <a href="http://bugs.php.net/45554">#45554</a> (Inconsistent behavior of the u format char).</li>
<li>Fixed bug <a href="http://bugs.php.net/48225">#48225</a> (DateTime parser doesn’t set microseconds for “now”).</li>
<li>Fixed bug <a href="http://bugs.php.net/52514">#52514</a> (microseconds are missing in DateTime class).</li>
<li>Fixed bug <a href="http://bugs.php.net/52519">#52519</a> (microseconds in DateInterval are missing).</li>
<li>Fixed bug <a href="http://bugs.php.net/60089">#60089</a> (DateTime::createFromFormat() U after u nukes microtime).</li>
<li>Fixed bug <a href="http://bugs.php.net/64887">#64887</a> (Allow DateTime modification with subsecond items).</li>
<li>Fixed bug <a href="http://bugs.php.net/68506">#68506</a> (General DateTime improvments needed for microseconds to become useful).</li>
<li>Fixed bug <a href="http://bugs.php.net/73109">#73109</a> (timelib_meridian doesn’t parse dots correctly).</li>
<li>Fixed bug <a href="http://bugs.php.net/73247">#73247</a> (DateTime constructor does not initialise microseconds property).</li>
<li>Fixed bug <a href="http://bugs.php.net/73147">#73147</a> (Use After Free in PHP7 unserialize()).</li>
<li>Fixed bug <a href="http://bugs.php.net/73189">#73189</a> (Memcpy negative size parameter php_resolve_path).</li>
<li>Fixed bug <a href="http://bugs.php.net/66836">#66836</a> (DateTime::createFromFormat ‘U’ with pre 1970 dates fails parsing).</li>
<li>Fixed bug <a href="http://bugs.php.net/63740">#63740</a> (strtotime seems to use both sunday and monday as start of week).</li>
</ul>
<h2 id="Dba"><a class="header-anchor" href="#Dba">¶</a>Dba</h2>
<ul>
<li>Data modification functions (e.g.: dba_insert()) now throw an instance of Error instead of triggering a catchable fatal error if the key is does not contain exactly two elements.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70825">#70825</a> (Cannot fetch multiple values with group in ini file).</li>
</ul>
<h2 id="DOM"><a class="header-anchor" href="#DOM">¶</a>DOM</h2>
<ul>
<li>Invalid schema or RelaxNG validation contexts will throw an instance of Error instead of resulting in a fatal error.</li>
<li>Attempting to register a node class that does not extend the appropriate base class will now throw an instance of Error instead of resulting in a fatal error.</li>
<li>Attempting to read an invalid or write to a readonly property will throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73150">#73150</a> (missing NULL check in dom_document_save_html).</li>
<li>Fixed bug <a href="http://bugs.php.net/66502">#66502</a> (DOM document dangling reference).</li>
</ul>
<h2 id="DTrace"><a class="header-anchor" href="#DTrace">¶</a>DTrace</h2>
<ul>
<li>Disabled PHP call tracing by default (it makes significant overhead). This may be enabled again using envirionment variable USE_ZEND_DTRACE=1.</li>
</ul>
<h2 id="EXIF"><a class="header-anchor" href="#EXIF">¶</a>EXIF</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72735">#72735</a> (Samsung picture thumb not read (zero size)).</li>
<li>Fixed bug <a href="http://bugs.php.net/72627">#72627</a> (Memory Leakage In exif_process_IFD_in_TIFF).</li>
<li>Fixed bug <a href="http://bugs.php.net/72603">#72603</a> (Out of bound read in exif_process_IFD_in_MAKERNOTE).</li>
<li>Fixed bug <a href="http://bugs.php.net/72618">#72618</a> (NULL Pointer Dereference in exif_process_user_comment).</li>
</ul>
<h2 id="Filter"><a class="header-anchor" href="#Filter">¶</a>Filter</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72972">#72972</a> (Bad filter for the flags FILTER_FLAG_NO_RES_RANGE and FILTER_FLAG_NO_PRIV_RANGE).</li>
<li>Fixed bug <a href="http://bugs.php.net/73054">#73054</a> (default option ignored when object passed to int filter).</li>
<li>Fixed bug <a href="http://bugs.php.net/71745">#71745</a> (FILTER_FLAG_NO_RES_RANGE does not cover whole 127.0.0.0/8 range).</li>
</ul>
<h2 id="FPM"><a class="header-anchor" href="#FPM">¶</a>FPM</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72575">#72575</a> (using --allow-to-run-as-root should ignore missing user).</li>
</ul>
<h2 id="FTP"><a class="header-anchor" href="#FTP">¶</a>FTP</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/55651">#55651</a> (Option to ignore the returned FTP PASV address).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70195">#70195</a> (Cannot upload file using ftp_put to FTPES with require_ssl_reuse).</li>
</ul>
<h2 id="GD"><a class="header-anchor" href="#GD">¶</a>GD</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73213">#73213</a> (Integer overflow in imageline() with antialiasing).</li>
<li>Fixed bug <a href="http://bugs.php.net/73272">#73272</a> (imagescale() is not affected by, but affects imagesetinterpolation()).</li>
<li>Fixed bug <a href="http://bugs.php.net/73279">#73279</a> (Integer overflow in gdImageScaleBilinearPalette()).</li>
<li>Fixed bug <a href="http://bugs.php.net/73280">#73280</a> (Stack Buffer Overflow in GD dynamicGetbuf).</li>
<li>Fixed bug <a href="http://bugs.php.net/50194">#50194</a> (imagettftext broken on transparent background w/o alphablending).</li>
<li>Fixed bug <a href="http://bugs.php.net/73003">#73003</a> (Integer Overflow in gdImageWebpCtx of gd_webp.c).</li>
<li>Fixed bug <a href="http://bugs.php.net/53504">#53504</a> (imagettfbbox gives incorrect values for bounding box).</li>
<li>Fixed bug <a href="http://bugs.php.net/73157">#73157</a> (imagegd2() ignores 3rd param if 4 are given).</li>
<li>Fixed bug <a href="http://bugs.php.net/73155">#73155</a> (imagegd2() writes wrong chunk sizes on boundaries).</li>
<li>Fixed bug <a href="http://bugs.php.net/73159">#73159</a> (imagegd2(): unrecognized formats may result in corrupted files).</li>
<li>Fixed bug <a href="http://bugs.php.net/73161">#73161</a> (imagecreatefromgd2() may leak memory).</li>
<li>Fixed bug <a href="http://bugs.php.net/67325">#67325</a> (imagetruecolortopalette: white is duplicated in palette).</li>
<li>Fixed bug <a href="http://bugs.php.net/66005">#66005</a> (imagecopy does not support 1bit transparency on truecolor images).</li>
<li>Fixed bug <a href="http://bugs.php.net/72913">#72913</a> (imagecopy() loses single-color transparency on palette images).</li>
<li>Fixed bug <a href="http://bugs.php.net/68716">#68716</a> (possible resource leaks in _php_image_convert()).</li>
<li>Fixed bug <a href="http://bugs.php.net/72709">#72709</a> (imagesetstyle() causes OOB read for empty $styles).</li>
<li>Fixed bug <a href="http://bugs.php.net/72697">#72697</a> (select_colors write out-of-bounds).</li>
<li>Fixed bug <a href="http://bugs.php.net/72730">#72730</a> (imagegammacorrect allows arbitrary write access).</li>
<li>Fixed bug <a href="http://bugs.php.net/72596">#72596</a> (imagetypes function won’t advertise WEBP support).</li>
<li>Fixed bug <a href="http://bugs.php.net/72604">#72604</a> (imagearc() ignores thickness for full arcs).</li>
<li>Fixed bug <a href="http://bugs.php.net/70315">#70315</a> (500 Server Error but page is fully rendered).</li>
<li>Fixed bug <a href="http://bugs.php.net/43828">#43828</a> (broken transparency of imagearc for truecolor in blendingmode).</li>
<li>Fixed bug <a href="http://bugs.php.net/72512">#72512</a> (gdImageTrueColorToPaletteBody allows arbitrary write/read access).</li>
<li>Fixed bug <a href="http://bugs.php.net/72519">#72519</a> (imagegif/output out-of-bounds access).</li>
<li>Fixed bug <a href="http://bugs.php.net/72558">#72558</a> (Integer overflow error within _gdContributionsAlloc()).</li>
<li>Fixed bug <a href="http://bugs.php.net/72482">#72482</a> (Ilegal write/read access caused by gdImageAALine overflow).</li>
<li>Fixed bug <a href="http://bugs.php.net/72494">#72494</a> (imagecropauto out-of-bounds access).</li>
<li>Fixed bug <a href="http://bugs.php.net/72404">#72404</a> (imagecreatefromjpeg fails on selfie).</li>
<li>Fixed bug <a href="http://bugs.php.net/43475">#43475</a> (Thick styled lines have scrambled patterns).</li>
<li>Fixed bug <a href="http://bugs.php.net/53640">#53640</a> (XBM images require width to be multiple of 8).</li>
<li>Fixed bug <a href="http://bugs.php.net/64641">#64641</a> (imagefilledpolygon doesn’t draw horizontal line).</li>
</ul>
<h2 id="Hash"><a class="header-anchor" href="#Hash">¶</a>Hash</h2>
<ul>
<li>Added SHA3 fixed mode algorithms (224, 256, 384, and 512 bit).</li>
<li>Added SHA512/256 and SHA512/224 algorithms.</li>
</ul>
<h2 id="iconv"><a class="header-anchor" href="#iconv">¶</a>iconv</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72320">#72320</a> (iconv_substr returns false for empty strings).</li>
</ul>
<h2 id="IMAP"><a class="header-anchor" href="#IMAP">¶</a>IMAP</h2>
<ul>
<li>An email address longer than 16385 bytes will throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73418">#73418</a> (Integer Overflow in “_php_imap_mail” leads to crash).</li>
</ul>
<h2 id="Interbase"><a class="header-anchor" href="#Interbase">¶</a>Interbase</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73512">#73512</a> (Fails to find firebird headers as don’t use fb_config output).</li>
</ul>
<h2 id="Intl"><a class="header-anchor" href="#Intl">¶</a>Intl</h2>
<ul>
<li>Failure to call the parent constructor in a class extending Collator before invoking the parent methods will throw an instance of Error instead of resulting in a recoverable fatal error.</li>
<li>Cloning a Transliterator object may will now throw an instance of Error instead of resulting in a fatal error if cloning the internal transliterator fails.</li>
</ul>
<hr>
<ul>
<li>Added IntlTimeZone::getWindowsID() and IntlTimeZone::getIDForWindowsID().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73007">#73007</a> (add locale length check).</li>
<li>Fixed bug <a href="http://bugs.php.net/73218">#73218</a> (add mitigation for ICU int overflow).</li>
<li>Fixed bug <a href="http://bugs.php.net/65732">#65732</a> (grapheme_*() is not Unicode compliant on CR LF sequence).</li>
<li>Fixed bug <a href="http://bugs.php.net/73007">#73007</a> (add locale length check).</li>
<li>Fixed bug <a href="http://bugs.php.net/72639">#72639</a> (Segfault when instantiating class that extends IntlCalendar and adds a property).</li>
<li>Fixed bug <a href="http://bugs.php.net/72658">#72658</a> (Locale::lookup() / locale_lookup() hangs if no match found).</li>
<li>Partially fixed <a href="http://bugs.php.net/72506">#72506</a> (idn_to_ascii for UTS #46 incorrect for long domain names).</li>
<li>Fixed bug <a href="http://bugs.php.net/72533">#72533</a> (locale_accept_from_http out-of-bounds access).</li>
<li>Fixed bug <a href="http://bugs.php.net/69374">#69374</a> (IntlDateFormatter formatObject returns wrong utf8 value).</li>
<li>Fixed bug <a href="http://bugs.php.net/69398">#69398</a> (IntlDateFormatter formatObject returns wrong value when time style is NONE).</li>
</ul>
<h2 id="JSON"><a class="header-anchor" href="#JSON">¶</a>JSON</h2>
<ul>
<li>Exported JSON parser API including json_parser_method that can be used for implementing custom logic when parsing JSON.</li>
<li>Escaped U+2028 and U+2029 when JSON_UNESCAPED_UNICODE is supplied as json_encode options and added JSON_UNESCAPED_LINE_TERMINATORS to restore the previous behaviour.</li>
<li>Implemented FR <a href="http://bugs.php.net/46600">#46600</a> (“_empty_” key in objects).</li>
</ul>
<hr>
<ul>
<li>Implemented earlier return when json_encode fails, fixes bugs <a href="http://bugs.php.net/68992">#68992</a> (Stacking exceptions thrown by JsonSerializable) and <a href="http://bugs.php.net/70275">#70275</a> (On recursion error, json_encode can eat up all system memory).</li>
<li>Introduced encoder struct instead of global which fixes bugs <a href="http://bugs.php.net/66025">#66025</a> and <a href="http://bugs.php.net/73254">#73254</a> related to pretty print indentation.</li>
<li>Fixed bug <a href="http://bugs.php.net/73113">#73113</a> (Segfault with throwing JsonSerializable).</li>
</ul>
<h2 id="LDAP"><a class="header-anchor" href="#LDAP">¶</a>LDAP</h2>
<ul>
<li>Providing an unknown modification type to ldap_batch_modify() will now throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<h2 id="Mbstring"><a class="header-anchor" href="#Mbstring">¶</a>Mbstring</h2>
<ul>
<li>Deprecated mb_ereg_replace() eval option.</li>
</ul>
<hr>
<ul>
<li>mb_ereg() and mb_eregi() will now throw an instance of ParseError if an invalid PHP expression is provided and the ‘e’ option is used.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73532">#73532</a> (Null pointer dereference in mb_eregi).</li>
<li>Fixed bug <a href="http://bugs.php.net/66964">#66964</a> (mb_convert_variables() cannot detect recursion).</li>
<li>Fixed bug <a href="http://bugs.php.net/72992">#72992</a> (mbstring.internal_encoding doesn’t inherit default_charset).</li>
<li>Fixed bug <a href="http://bugs.php.net/66797">#66797</a> (mb_substr only takes 32-bit signed integer).</li>
<li>Fixed bug <a href="http://bugs.php.net/72711">#72711</a> (`mb_ereg` does not clear the `$regs` parameter on failure).</li>
<li>Fixed bug <a href="http://bugs.php.net/72691">#72691</a> (mb_ereg_search raises a warning if a match zero-width).</li>
<li>Fixed bug <a href="http://bugs.php.net/72693">#72693</a> (mb_ereg_search increments search position when a match zero-width).</li>
<li>Fixed bug <a href="http://bugs.php.net/72694">#72694</a> (mb_ereg_search_setpos does not accept a string’s last position).</li>
<li>Fixed bug <a href="http://bugs.php.net/72710">#72710</a> (`mb_ereg` causes buffer overflow on regexp compile error).</li>
<li>Fixed bug <a href="http://bugs.php.net/69151">#69151</a> (mb_ereg should reject ill-formed byte sequence).</li>
<li>Fixed bug <a href="http://bugs.php.net/72405">#72405</a> (mb_ereg_replace - mbc_to_code (oniguruma) - oob read access).</li>
<li>Fixed bug <a href="http://bugs.php.net/72399">#72399</a> (Use-After-Free in MBString (search_re)).</li>
</ul>
<h2 id="Mcrypt"><a class="header-anchor" href="#Mcrypt">¶</a>Mcrypt</h2>
<ul>
<li>Deprecated ext/mcrypt.</li>
</ul>
<hr>
<ul>
<li>mcrypt_encrypt() and mcrypt_decrypt() will throw an instance of Error instead of resulting in a fatal error if mcrypt cannot be initialized.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72782">#72782</a> (Heap Overflow due to integer overflows).</li>
<li>Fixed bug <a href="http://bugs.php.net/72551">#72551</a>, bug <a href="http://bugs.php.net/72552">#72552</a> (In correct casting from size_t to int lead to heap overflow in mdecrypt_generic).</li>
</ul>
<h2 id="Mysqli"><a class="header-anchor" href="#Mysqli">¶</a>Mysqli</h2>
<ul>
<li>Attempting to read an invalid or write to a readonly property will throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<h2 id="Mysqlnd"><a class="header-anchor" href="#Mysqlnd">¶</a>Mysqlnd</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/64526">#64526</a> (Add missing mysqlnd.* parameters to php.ini-*).</li>
<li>Fixed bug <a href="http://bugs.php.net/71863">#71863</a> (Segfault when EXPLAIN with “Unknown column” error when using MariaDB).</li>
<li>Fixed bug <a href="http://bugs.php.net/72701">#72701</a> (mysqli_get_host_info() wrong output).</li>
</ul>
<h2 id="OCI8"><a class="header-anchor" href="#OCI8">¶</a>OCI8</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/71148">#71148</a> (Bind reference overwritten on PHP 7).</li>
<li>Fixed invalid handle error with Implicit Result Sets.</li>
<li>Fixed bug <a href="http://bugs.php.net/72524">#72524</a> (Binding null values triggers ORA-24816 error).</li>
</ul>
<h2 id="ODBC"><a class="header-anchor" href="#ODBC">¶</a>ODBC</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73448">#73448</a> (odbc_errormsg returns trash, always 513 bytes).</li>
</ul>
<h2 id="Opcache"><a class="header-anchor" href="#Opcache">¶</a>Opcache</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73583">#73583</a> (Segfaults when conditionally declared class and function have the same name).</li>
<li>Fixed bug <a href="http://bugs.php.net/69090">#69090</a> (check cached files permissions)</li>
<li>Fixed bug <a href="http://bugs.php.net/72982">#72982</a> (Memory leak in zend_accel_blacklist_update_regexp() function).</li>
<li>Fixed bug <a href="http://bugs.php.net/72949">#72949</a> (Typo in opcache error message).</li>
<li>Fixed bug <a href="http://bugs.php.net/72762">#72762</a> (Infinite loop while parsing a file with opcache enabled).</li>
<li>Fixed bug <a href="http://bugs.php.net/72590">#72590</a> (Opcache restart with kill_all_lockers does not work).</li>
</ul>
<h2 id="OpenSSL"><a class="header-anchor" href="#OpenSSL">¶</a>OpenSSL</h2>
<ul>
<li>Dropped support for SSL2.</li>
</ul>
<hr>
<ul>
<li>Bumped a minimal version to 1.0.1.</li>
</ul>
<hr>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/61204">#61204</a> (Add elliptic curve support for OpenSSL).</li>
<li>Implemented FR <a href="http://bugs.php.net/67304">#67304</a> (Added AEAD support [CCM and GCM modes] to openssl_encrypt and openssl_decrypt).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73478">#73478</a> (openssl_pkey_new() generates wrong pub/priv keys with Diffie Hellman).</li>
<li>Fixed bug <a href="http://bugs.php.net/73276">#73276</a> (crash in openssl_random_pseudo_bytes function).</li>
<li>Fixed bug <a href="http://bugs.php.net/73072">#73072</a> (Invalid path SNI_server_certs causes segfault).</li>
<li>Fixed bug <a href="http://bugs.php.net/72360">#72360</a> (ext/openssl build failure with OpenSSL 1.1.0).</li>
<li>Implemented error storing to the global queue and cleaning up the OpenSSL error queue (resolves bugs <a href="http://bugs.php.net/68276">#68276</a> and <a href="http://bugs.php.net/69882">#69882</a>).</li>
</ul>
<h2 id="Pcntl"><a class="header-anchor" href="#Pcntl">¶</a>Pcntl</h2>
<ul>
<li>Implemented asynchronous signal handling without TICKS.</li>
<li>Added pcntl_signal_get_handler() that returns the current signal handler for a particular signal. Addresses FR <a href="http://bugs.php.net/72409">#72409</a>.</li>
<li>Add siginfo to pcntl_signal() handler args (Bishop Bettini, David Walker)</li>
</ul>
<h2 id="PCRE"><a class="header-anchor" href="#PCRE">¶</a>PCRE</h2>
<ul>
<li>Downgraded to PCRE 8.38.</li>
<li>Upgraded to PCRE 8.39.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73483">#73483</a> (Segmentation fault on pcre_replace_callback).</li>
<li>Fixed bug <a href="http://bugs.php.net/73612">#73612</a> (preg_*() may leak memory).</li>
<li>Fixed bug <a href="http://bugs.php.net/73392">#73392</a> (A use-after-free in zend allocator management).</li>
<li>Fixed bug <a href="http://bugs.php.net/73121">#73121</a> (Bundled PCRE doesn’t compile because JIT isn’t supported on s390).</li>
<li>Fixed bug <a href="http://bugs.php.net/72688">#72688</a> (preg_match missing group names in matches).</li>
<li>Fixed bug <a href="http://bugs.php.net/72476">#72476</a> (Memleak in jit_stack).</li>
<li>Fixed bug <a href="http://bugs.php.net/72463">#72463</a> (mail fails with invalid argument).</li>
</ul>
<h2 id="PDO"><a class="header-anchor" href="#PDO">¶</a>PDO</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72788">#72788</a> (Invalid memory access when using persistent PDO connection).</li>
<li>Fixed bug <a href="http://bugs.php.net/72791">#72791</a> (Memory leak in PDO persistent connection handling).</li>
<li>Fixed bug <a href="http://bugs.php.net/60665">#60665</a> (call to empty() on NULL result using PDO::FETCH_LAZY returns false).</li>
</ul>
<h2 id="PDO-DBlib"><a class="header-anchor" href="#PDO-DBlib">¶</a>PDO_DBlib</h2>
<ul>
<li>Allow \PDO::setAttribute() to set query timeouts.</li>
<li>Handle SQLDECIMAL/SQLNUMERIC types, which are used by later TDS versions.</li>
<li>Free error and message strings when cleaning up PDO instances.</li>
<li>Ignore potentially misleading dberr values.</li>
</ul>
<hr>
<ul>
<li>Add common PDO test suite.</li>
<li>Implemented stringify ‘uniqueidentifier’ fields.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72414">#72414</a> (Never quote values as raw binary data).</li>
<li>Fixed bug <a href="http://bugs.php.net/67130">#67130</a> (\PDOStatement::nextRowset() should succeed when all rows in current rowset haven’t been fetched).</li>
</ul>
<h2 id="PDO-Firebird"><a class="header-anchor" href="#PDO-Firebird">¶</a>PDO_Firebird</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73087">#73087</a>, <a href="http://bugs.php.net/61183">#61183</a>, <a href="http://bugs.php.net/71494">#71494</a> (Memory corruption in bindParam).</li>
<li>Fixed bug <a href="http://bugs.php.net/60052">#60052</a> (Integer returned as a 64bit integer on X86_64).</li>
</ul>
<h2 id="PDO-pgsql"><a class="header-anchor" href="#PDO-pgsql">¶</a>PDO_pgsql</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/72633">#72633</a> (Postgres PDO lastInsertId() should work without specifying a sequence).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/70313">#70313</a> (PDO statement fails to throw exception).</li>
<li>Fixed bug <a href="http://bugs.php.net/72570">#72570</a> (Segmentation fault when binding parameters on a query without placeholders).</li>
</ul>
<h2 id="Phar"><a class="header-anchor" href="#Phar">¶</a>Phar</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72928">#72928</a> (Out of bound when verify signature of zip phar in phar_parse_zipfile).</li>
<li>Fixed bug <a href="http://bugs.php.net/73035">#73035</a> (Out of bound when verify signature of tar phar in phar_parse_tarfile).</li>
</ul>
<h2 id="phpdbg"><a class="header-anchor" href="#phpdbg">¶</a>phpdbg</h2>
<ul>
<li>Added generator command for inspection of currently alive generators.</li>
</ul>
<h2 id="Postgres"><a class="header-anchor" href="#Postgres">¶</a>Postgres</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/31021">#31021</a> (pg_last_notice() is needed to get all notice messages).</li>
<li>Implemented FR <a href="http://bugs.php.net/48532">#48532</a> (Allow pg_fetch_all() to index numerically).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73498">#73498</a> (Incorrect SQL generated for pg_copy_to()).</li>
</ul>
<h2 id="Readline"><a class="header-anchor" href="#Readline">¶</a>Readline</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72538">#72538</a> (readline_redisplay crashes php).</li>
</ul>
<h2 id="Reflection"><a class="header-anchor" href="#Reflection">¶</a>Reflection</h2>
<ul>
<li>Undo backwards compatiblity break in ReflectionType-&gt;__toString() and deprecate via documentation instead.</li>
</ul>
<hr>
<ul>
<li>Failure to retrieve a reflection object or retrieve an object property will now throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<hr>
<ul>
<li>Reverted prepending \ for class names.</li>
<li>Implemented FR <a href="http://bugs.php.net/38992">#38992</a> (invoke() and invokeArgs() static method calls should match). (cmb).</li>
<li>Add ReflectionNamedType::getName(). This method should be used instead of ReflectionType::__toString()</li>
<li>Prepend \ for class names and ? for nullable types returned from ReflectionType::__toString().</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72661">#72661</a> (ReflectionType::__toString crashes with iterable).</li>
<li>Fixed bug <a href="http://bugs.php.net/72222">#72222</a> (ReflectionClass::export doesn’t handle array constants).</li>
<li>Fixed bug <a href="http://bugs.php.net/72209">#72209</a> (ReflectionProperty::getValue() doesn’t fail if object doesn’t match type).</li>
</ul>
<h2 id="Session"><a class="header-anchor" href="#Session">¶</a>Session</h2>
<ul>
<li>Custom session handlers that do not return strings for session IDs will now throw an instance of Error instead of resulting in a fatal error when a function is called that must generate a session ID.</li>
<li>An invalid setting for session.hash_function will throw an instance of Error instead of resulting in a fatal error when a session ID is created.</li>
</ul>
<hr>
<ul>
<li>Implemented session_gc() (Yasuo) <a href="https://wiki.php.net/rfc/session-create-id">https://wiki.php.net/rfc/session-create-id</a></li>
<li>Implemented session_create_id() (Yasuo) <a href="https://wiki.php.net/rfc/session-gc">https://wiki.php.net/rfc/session-gc</a></li>
<li>Implemented RFC: Session ID without hashing. (Yasuo) <a href="https://wiki.php.net/rfc/session-id-without-hashing">https://wiki.php.net/rfc/session-id-without-hashing</a></li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73273">#73273</a> (session_unset() empties values from all variables in which is $_session stored).</li>
<li>Fixed bug <a href="http://bugs.php.net/73100">#73100</a> (session_destroy null dereference in ps_files_path_create).</li>
<li>Fixed bug <a href="http://bugs.php.net/68015">#68015</a> (Session does not report invalid uid for files save handler).</li>
<li>Fixed bug <a href="http://bugs.php.net/72940">#72940</a> (SID always return “name=ID”, even if session cookie exist).</li>
<li>Fixed bug <a href="http://bugs.php.net/72531">#72531</a> (ps_files_cleanup_dir Buffer overflow).</li>
<li>Fixed bug <a href="http://bugs.php.net/72562">#72562</a> (Use After Free in unserialize() with Unexpected Session Deserialization).</li>
<li>Improved fix for bug <a href="http://bugs.php.net/68063">#68063</a> (Empty session IDs do still start sessions).</li>
<li>Fixed bug <a href="http://bugs.php.net/71038">#71038</a> (session_start() returns TRUE on failure). Session save handlers must return ‘string’ always for successful read. i.e. Non-existing session read must return empty string. PHP 7.0 is made not to tolerate buggy return value.</li>
<li>Fixed bug <a href="http://bugs.php.net/71394">#71394</a> (session_regenerate_id() must close opened session on errors).</li>
</ul>
<h2 id="SimpleXML"><a class="header-anchor" href="#SimpleXML">¶</a>SimpleXML</h2>
<ul>
<li>Creating an unnamed or duplicate attribute will throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73293">#73293</a> (NULL pointer dereference in SimpleXMLElement::asXML()).</li>
<li>Fixed bug <a href="http://bugs.php.net/72971">#72971</a> (SimpleXML isset/unset do not respect namespace).</li>
<li>Fixed bug <a href="http://bugs.php.net/72957">#72957</a> (Null coalescing operator doesn’t behave as expected with SimpleXMLElement).</li>
<li>Fixed bug <a href="http://bugs.php.net/72588">#72588</a> (Using global var doesn’t work while accessing SimpleXML element).</li>
</ul>
<h2 id="SNMP"><a class="header-anchor" href="#SNMP">¶</a>SNMP</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72708">#72708</a> (php_snmp_parse_oid integer overflow in memory allocation).</li>
<li>Fixed bug <a href="http://bugs.php.net/72479">#72479</a> (Use After Free Vulnerability in SNMP with GC and unserialize()).</li>
</ul>
<h2 id="Soap"><a class="header-anchor" href="#Soap">¶</a>Soap</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73538">#73538</a> (SoapClient::__setSoapHeaders doesn’t overwrite SOAP headers).</li>
<li>Fixed bug <a href="http://bugs.php.net/73452">#73452</a> (Segfault (Regression for <a href="http://bugs.php.net/69152">#69152</a>)).</li>
<li>Fixed bug <a href="http://bugs.php.net/73037">#73037</a> (SoapServer reports Bad Request when gzipped).</li>
<li>Fixed bug <a href="http://bugs.php.net/73237">#73237</a> (Nested object in “any” element overwrites other fields).</li>
<li>Fixed bug <a href="http://bugs.php.net/69137">#69137</a> (Peer verification fails when using a proxy with SoapClient).</li>
<li>Fixed bug <a href="http://bugs.php.net/71711">#71711</a> (Soap Server Member variables reference bug).</li>
<li>Fixed bug <a href="http://bugs.php.net/71996">#71996</a> (Using references in arrays doesn’t work like expected).</li>
</ul>
<h2 id="SPL"><a class="header-anchor" href="#SPL">¶</a>SPL</h2>
<ul>
<li>Attempting to clone an SplDirectory object will throw an instance of Error instead of resulting in a fatal error.</li>
<li>Calling ArrayIterator::append() when iterating over an object will throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73423">#73423</a> (Reproducible crash with GDB backtrace).</li>
<li>Fixed bug <a href="http://bugs.php.net/72888">#72888</a> (Segfault on clone on splFileObject).</li>
<li>Fixed bug <a href="http://bugs.php.net/73029">#73029</a> (Missing type check when unserializing SplArray).</li>
<li>Fixed bug <a href="http://bugs.php.net/72646">#72646</a> (SplFileObject::getCsvControl does not return the escape character).</li>
<li>Fixed bug <a href="http://bugs.php.net/72684">#72684</a> (AppendIterator segfault with closed generator).</li>
<li>Fixed bug <a href="http://bugs.php.net/55701">#55701</a> (GlobIterator throws LogicException).</li>
</ul>
<h2 id="SQLite3"><a class="header-anchor" href="#SQLite3">¶</a>SQLite3</h2>
<ul>
<li>Update to SQLite 3.15.1.</li>
</ul>
<hr>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/71159">#71159</a> (Upgraded bundled SQLite lib to 3.9.2).</li>
<li>Implemented FR <a href="http://bugs.php.net/72653">#72653</a> (SQLite should allow opening with empty filename).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73530">#73530</a> (Unsetting result set may reset other result set).</li>
<li>Fixed bug <a href="http://bugs.php.net/73333">#73333</a> (2147483647 is fetched as string).</li>
<li>Fixed bug <a href="http://bugs.php.net/72668">#72668</a> (Spurious warning when exception is thrown in user defined function).</li>
<li>Fixed bug <a href="http://bugs.php.net/70628">#70628</a> (Clearing bindings on an SQLite3 statement doesn’t work).</li>
</ul>
<h2 id="Standard"><a class="header-anchor" href="#Standard">¶</a>Standard</h2>
<ul>
<li>array_multisort now uses zend_sort instead zend_qsort.</li>
<li>assert() will throw a ParseError when evaluating a string given as the first argument if the PHP code is invalid instead of resulting in a catchable fatal error.</li>
<li>Calling forward_static_call() outside of a class scope will now throw an instance of Error instead of resulting in a fatal error.</li>
<li>unpack() function accepts an additional optional argument $offset.</li>
</ul>
<hr>
<ul>
<li>Implemented RFC: More precise float values.</li>
<li>Added is_iterable() function.</li>
<li>Implemented FR <a href="http://bugs.php.net/55716">#55716</a> (Add an option to pass a custom stream context to get_headers()).</li>
<li>Additional validation for parse_url() for login/pass components).</li>
<li>Implemented FR <a href="http://bugs.php.net/69359">#69359</a> (Provide a way to fetch the current environment variables).</li>
<li>Implemented FR <a href="http://bugs.php.net/51879">#51879</a> stream context socket option tcp_nodelay (Joe)</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73297">#73297</a> (HTTP stream wrapper should ignore HTTP 100 Continue).</li>
<li>Fixed bug <a href="http://bugs.php.net/73303">#73303</a> (Scope not inherited by eval in assert()).</li>
<li>Fixed bug <a href="http://bugs.php.net/73192">#73192</a> (parse_url return wrong hostname).</li>
<li>Fixed bug <a href="http://bugs.php.net/73203">#73203</a> (passing additional_parameters causes mail to fail).</li>
<li>Fixed bug <a href="http://bugs.php.net/73203">#73203</a> (passing additional_parameters causes mail to fail).</li>
<li>Fixed bug <a href="http://bugs.php.net/72920">#72920</a> (Accessing a private constant using constant() creates an exception AND warning).</li>
<li>Fixed bug <a href="http://bugs.php.net/65550">#65550</a> (get_browser() incorrectly parses entries with “+” sign).</li>
<li>Fixed bug <a href="http://bugs.php.net/71882">#71882</a> (Negative ftruncate() on php://memory exhausts memory).</li>
<li>Fixed bug <a href="http://bugs.php.net/55451">#55451</a> (substr_compare NULL length interpreted as 0).</li>
<li>Fixed bug <a href="http://bugs.php.net/72278">#72278</a> (getimagesize returning FALSE on valid jpg).</li>
<li>Fixed bug <a href="http://bugs.php.net/61967">#61967</a> (unset array item in array_walk_recursive cause inconsistent array).</li>
<li>Fixed bug <a href="http://bugs.php.net/62607">#62607</a> (array_walk_recursive move internal pointer).</li>
<li>Fixed bug <a href="http://bugs.php.net/69068">#69068</a> (Exchanging array during array_walk -&gt; memory errors).</li>
<li>Fixed bug <a href="http://bugs.php.net/70713">#70713</a> (Use After Free Vulnerability in array_walk()/ array_walk_recursive()).</li>
<li>Fixed bug <a href="http://bugs.php.net/72622">#72622</a> (array_walk + array_replace_recursive create references from nothing).</li>
<li>Fixed bug <a href="http://bugs.php.net/72330">#72330</a> (CSV fields incorrectly split if escape char followed by UTF chars).</li>
<li>Fixed bug <a href="http://bugs.php.net/72505">#72505</a> (readfile() mangles files larger than 2G).</li>
<li>Fixed bug <a href="http://bugs.php.net/72306">#72306</a> (Heap overflow through proc_open and $env parameter).</li>
<li>Fixed bug <a href="http://bugs.php.net/71100">#71100</a> (long2ip() doesn’t accept integers in strict mode).</li>
</ul>
<h2 id="Streams"><a class="header-anchor" href="#Streams">¶</a>Streams</h2>
<ul>
<li>Implemented FR <a href="http://bugs.php.net/27814">#27814</a> (Multiple small packets send for HTTP request).</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73586">#73586</a> (php_user_filter::$stream is not set to the stream the filter is working on).</li>
<li>Fixed bug <a href="http://bugs.php.net/72853">#72853</a> (stream_set_blocking doesn’t work).</li>
<li>Fixed bug <a href="http://bugs.php.net/72743">#72743</a> (Out-of-bound read in php_stream_filter_create).</li>
<li>Fixed bug <a href="http://bugs.php.net/72764">#72764</a> (ftps:// opendir wrapper data channel encryption fails with IIS FTP 7.5, 8.5).</li>
<li>Fixed bug <a href="http://bugs.php.net/72810">#72810</a> (Missing SKIP_ONLINE_TESTS checks).</li>
<li>Fixed bug <a href="http://bugs.php.net/41021">#41021</a> (Problems with the ftps wrapper).</li>
<li>Fixed bug <a href="http://bugs.php.net/54431">#54431</a> (opendir() does not work with ftps:// wrapper).</li>
<li>Fixed bug <a href="http://bugs.php.net/72667">#72667</a> (opendir() with ftp:// attempts to open data stream for non-existent directories).</li>
<li>Fixed bug <a href="http://bugs.php.net/72771">#72771</a> (ftps:// wrapper is vulnerable to protocol downgrade attack).</li>
<li>Fixed bug <a href="http://bugs.php.net/72534">#72534</a> (stream_socket_get_name crashes).</li>
<li>Fixed bug <a href="http://bugs.php.net/72439">#72439</a> (Stream socket with remote address leads to a segmentation fault).</li>
</ul>
<h2 id="sysvshm"><a class="header-anchor" href="#sysvshm">¶</a>sysvshm</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72858">#72858</a> (shm_attach null dereference).</li>
</ul>
<h2 id="Tidy"><a class="header-anchor" href="#Tidy">¶</a>Tidy</h2>
<ul>
<li>Implemented support for libtidy 5.0.0 and above.</li>
<li>Creating a tidyNode manually will now throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<h2 id="Wddx"><a class="header-anchor" href="#Wddx">¶</a>Wddx</h2>
<ul>
<li>A circular reference when serializing will now throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/73331">#73331</a> (NULL Pointer Dereference in WDDX Packet Deserialization with PDORow). (CVE-2016-9934)</li>
<li>Fixed bug <a href="http://bugs.php.net/72142">#72142</a> (WDDX Packet Injection Vulnerability in wddx_serialize_value()).</li>
<li>Fixed bug <a href="http://bugs.php.net/72749">#72749</a> (wddx_deserialize allows illegal memory access).</li>
<li>Fixed bug <a href="http://bugs.php.net/72750">#72750</a> (wddx_deserialize null dereference).</li>
<li>Fixed bug <a href="http://bugs.php.net/72790">#72790</a> (wddx_deserialize null dereference with invalid xml).</li>
<li>Fixed bug <a href="http://bugs.php.net/72799">#72799</a> (wddx_deserialize null dereference in php_wddx_pop_element).</li>
<li>Fixed bug <a href="http://bugs.php.net/72860">#72860</a> (wddx_deserialize use-after-free).</li>
<li>Fixed bug <a href="http://bugs.php.net/73065">#73065</a> (Out-Of-Bounds Read in php_wddx_push_element).</li>
<li>Fixed bug <a href="http://bugs.php.net/72564">#72564</a> (boolean always deserialized as “true”).</li>
</ul>
<h2 id="XML"><a class="header-anchor" href="#XML">¶</a>XML</h2>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72135">#72135</a> (malformed XML causes fault).</li>
<li>Fixed bug <a href="http://bugs.php.net/72714">#72714</a> (_xml_startElementHandler() segmentation fault).</li>
<li>Fixed bug <a href="http://bugs.php.net/72085">#72085</a> (SEGV on unknown address zif_xml_parse).</li>
</ul>
<h2 id="XMLRPC"><a class="header-anchor" href="#XMLRPC">¶</a>XMLRPC</h2>
<ul>
<li>A circular reference when serializing will now throw an instance of Error instead of resulting in a fatal error.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/72647">#72647</a> (xmlrpc_encode() unexpected output after referencing array elements).</li>
<li>Fixed bug <a href="http://bugs.php.net/72606">#72606</a> (heap-buffer-overflow (write) simplestring_addn simplestring.c).</li>
</ul>
<h2 id="Zip"><a class="header-anchor" href="#Zip">¶</a>Zip</h2>
<ul>
<li>ZipArchive::addGlob() will throw an instance of Error instead of resulting in a fatal error if glob support is not available.</li>
</ul>
<hr>
<ul>
<li>Fixed bug <a href="http://bugs.php.net/68302">#68302</a> (impossible to compile php with zip support).</li>
<li>Fixed bug <a href="http://bugs.php.net/72660">#72660</a> (NULL Pointer dereference in zend_virtual_cwd).</li>
<li>Fixed bug <a href="http://bugs.php.net/72520">#72520</a> (Stack-based buffer overflow vulnerability in php_stream_zip_opener).</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
        <tag>PHP7</tag>
        <tag>HTTP2</tag>
        <tag>SQLite3</tag>
        <tag>PCRE</tag>
        <tag>CURL</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 8.0.x</title>
    <url>/2020/11/26/PHP-8-0-x/</url>
    <content><![CDATA[<h1 id="目标及关键路径"><a class="header-anchor" href="#目标及关键路径">¶</a>目标及关键路径</h1>
<blockquote>
<p><a href="https://www.php.net/releases/8.0/zh.php">https://www.php.net/releases/8.0/zh.php</a></p>
</blockquote>
<ul>
<li>提升性能
<ul>
<li>基于缓存前置思想，使用CPU机器码缓存，绕过Zend VM及其过程开销来尽可能提升性能
<ul>
<li>JIT</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="从-PHP-7-4-x-移植到-PHP-8-0-x"><a class="header-anchor" href="#从-PHP-7-4-x-移植到-PHP-8-0-x">¶</a>从 PHP 7.4.x 移植到 PHP 8.0.x</h1>
<blockquote>
<p><a href="https://php.watch/versions/8.0">PHP 8.0: What’s New and Changed</a><br>
<a href="https://www.php.net/manual/zh/migration80.php">PHP Manual</a></p>
</blockquote>
<h2 id="不向后兼容的变更"><a class="header-anchor" href="#不向后兼容的变更">¶</a>不向后兼容的变更</h2>
<h3 id="PHP-Core"><a class="header-anchor" href="#PHP-Core">¶</a>PHP Core</h3>
<ul>
<li>
<p>字符串与数字的比较</p>
<ul>
<li>
<p><a href="https://wiki.php.net/rfc/saner-numeric-strings"><sup>v8.0.0</sup></a> 数字与非数字形式的字符串之间的非严格比较现在将首先将数字转为字符串，然后比较这两个字符串。 数字与数字形式的字符串之间的比较仍然像之前那样进行。 请注意，这意味着 0 == “not-a-number” 现在将被认为是 false 。</p>
<table>
<thead>
<tr>
<th>Comparison</th>
<th>Before</th>
<th>After</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0 == &quot;0&quot;</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>0 == &quot;0.0&quot;</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>0 == &quot;foo&quot;</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>0 == &quot;&quot;</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>42 == &quot; 42&quot;</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>42 == &quot;42foo&quot;</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
<li>
<p><a href="https://github.com/php/php-src/pull/5371"><sup>v8.0.0</sup></a> <code>match</code> 现在是一个保留字。</p>
<blockquote>
<p><a href="https://wiki.php.net/rfc/match_expression_v2">PHP RFC: Match expression v2</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/pull/5925"><sup>v8.0.0</sup></a> 断言（Assertion）失败现在默认抛出异常。如果想要改回之前的行为，可以在 INI 设置中设置 <code>assert.exception=0</code> 。</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/1a7c0d52dc31623bd88a87e03849ab915275c49d"><sup>8.0.0</sup></a> 与类名相同的方法名将不再被当做构造方法。应该使用<a href="https://www.php.net/manual/zh/language.oop5.decon.php#object.construct">__construct()</a> 来取代它。</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/6c73b50cf6cf71be26700ce168d5e69350637d71"><sup>8.0.0</sup></a> 不再允许通过静态调用的方式去调用非静态方法。因此<a href="https://www.php.net/manual/zh/function.is-callable.php">is_callable()</a>在检查一个类名与非静态方法 时将返回失败（应当检查一个类的实例）。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/language.types.type-juggling.php"><sup>v8.0.0</sup></a> <code>(real)</code> 和 <code>(unset)</code> 转换已被移除。</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/920b4b249f71e6cbfd795f81c6a08126a33c659e"><sup>v8.0.0</sup></a> The <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.track-errors">track_errors</a> ini directive has been removed. This means that php_errormsg is no longer available. The <a href="https://www.php.net/manual/zh/function.error-get-last.php">error_get_last()</a> function may be used instead.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/3d39479f4d7c86c66aa92fc5d0d97fb660109ee9"><sup>v8.0.0</sup></a> The ability to define case-insensitive constants has been removed. The third argument to <a href="https://www.php.net/manual/zh/function.define.php">define()</a> may no longer be <code>true</code>.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/0dfd918ee7a3520836b875b8c24f0a5f98fbee15"><sup>v8.0.0</sup></a> The ability to specify an autoloader using an <a href="https://www.php.net/manual/zh/function.autoload.php">__autoload()</a> function has been removed. <a href="https://www.php.net/manual/zh/function.spl-autoload-register.php">spl_autoload_register()</a> should be used instead.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/2f1f34952e9a0dfb3adcbec82ba69f4ac82b3a3d"><sup>v8.0.0</sup></a> The <code>errcontext</code> argument will no longer be passed to custom error handlers set with <a href="https://www.php.net/manual/zh/function.set-error-handler.php">set_error_handler()</a>.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/ee16d99504f0014c3d292809da927fb622293f41"><sup>v8.0.0</sup></a> <a href="https://www.php.net/manual/zh/function.create-function.php">create_function()</a> has been removed. Anonymous functions may be used instead.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/6db97f5e3ea3ac9774a06981226a0fe1bca02b38"><sup>v8.0.0</sup></a> <a href="https://www.php.net/manual/zh/function.each.php">each()</a> has been removed. <a href="https://www.php.net/manual/zh/control-structures.foreach.php">foreach</a> or <a href="https://www.php.net/manual/zh/class.arrayiterator.php">ArrayIterator</a> should be used instead.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/87fefd165a29091c3cb462431529107189c12d55"><sup>v8.0.0</sup></a> The ability to unbind this from closures that were created from a method, using <a href="https://www.php.net/manual/zh/closure.fromcallable.php">Closure::fromCallable()</a> or <a href="https://www.php.net/manual/zh/reflectionmethod.getclosure.php">ReflectionMethod::getClosure()</a>, has been removed.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/87fefd165a29091c3cb462431529107189c12d55"><sup>v8.0.0</sup></a> The ability to unbind this from proper closures that contain uses of this has also been removed.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/c46b2ed677aecfc2f07993eefad0326f31c5cc44"><sup>v8.0.0</sup></a> The ability to use <a href="https://www.php.net/manual/zh/function.array-key-exists.php">array_key_exists()</a> with objects has been removed. <a href="https://www.php.net/manual/zh/function.isset.php">isset()</a> or <a href="https://www.php.net/manual/zh/function.property-exists.php">property_exists()</a> may be used instead.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/14bdb0cfc7b62205c75f6d5c783e343259796776"><sup>v8.0.0</sup></a> The behavior of <a href="https://www.php.net/manual/zh/function.array-key-exists.php">array_key_exists()</a> regarding the type of the <code>key</code> parameter has been made consistent with <a href="https://www.php.net/manual/zh/function.isset.php">isset()</a> and normal array access. All key types now use the usual coercions and array/object keys throw a <a href="https://www.php.net/manual/zh/class.typeerror.php">TypeError</a>.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/6732028273b109cb342387ab5580c367f629d0ac"><sup>v8.0.0</sup></a> Any array that has a number n as its first numeric key will use n+1 for its next implicit key, even if n is negative.</p>
<blockquote>
<p><a href="https://wiki.php.net/rfc/negative_array_index">PHP RFC: Arrays starting with a negative index</a><br>
<a href="https://php.watch/versions/8.0/negative-array-keys">PHP 8.0: Implicit negative array key increments do not skip negative numbers</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/ea5854ca8c1193aacaee6fe059b2bfba636769e0"><sup>v8.0.0</sup></a> The default error_reporting level is now <code>E_ALL</code>. Previously it excluded <code>E_NOTICE</code> and <code>E_DEPRECATED</code>.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/790ed7d540aa04d22b1fc72a1f17e57ed6ef94e7"><sup>v8.0.0</sup></a> <a href="https://www.php.net/manual/zh/errorfunc.configuration.php#ini.display-startup-errors">display_startup_errors</a> is now enabled by default.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/5c24f8042d46f3dfbe8eb122a64792758fff5271"><sup>v8.0.0</sup></a> Using parent inside a class that has no parent will now result in a fatal compile-time error.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/pull/3685"><sup>v8.0.0</sup></a> The <code>@</code> operator will no longer silence fatal errors (<code>E_ERROR</code>, <code>E_CORE_ERROR</code>, <code>E_COMPILE_ERROR</code>, <code>E_USER_ERROR</code>, <code>E_RECOVERABLE_ERROR</code>, <code>E_PARSE</code>). Error handlers that expect error_reporting to be <code>0</code> when <code>@</code> is used, should be adjusted to use a mask check instead:</p>
<pre><code class="language-php">&lt;?php
// Replace
function my_error_handler($err_no, $err_msg, $filename, $linenum) &#123;
    if (error_reporting() == 0) &#123;
        return false; // Silenced
    &#125;
    // ...
&#125;

// With
function my_error_handler($err_no, $err_msg, $filename, $linenum) &#123;
    if (!(error_reporting() &amp; $err_no)) &#123;
        return false; // Silenced
    &#125;
    // ...
&#125;
?&gt;
</code></pre>
<p>Additionally, care should be taken that error messages are not displayed in production environments, which can result in information leaks. Please ensure that <code>display_errors=Off</code> is used in conjunction with error logging.</p>
<blockquote>
<p><a href="https://php.watch/versions/8.0/fatal-error-suppression">PHP 8.0: @ Error Suppression operator does not silent fatal errors</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/pull/5394"><sup>v8.0.0</sup></a> <code>#[</code> is no longer interpreted as the start of a comment, as this syntax is now used for attributes.</p>
<blockquote>
<p><a href="https://wiki.php.net/rfc/attributes_v2">PHP RFC: Attributes v2</a><br>
<a href="https://externals.io/message/108907">Discussion: Attributes v2</a><br>
<a href="https://php.watch/versions/8.0/attributes">PHP 8.0: Attributes</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/fd2db1192997f5778139ea8e9d25189c7c08af2c"><sup>v8.0.0</sup></a> Inheritance errors due to incompatible method signatures (<a href="https://microsoft.github.io/language-server-protocol/">LSP</a> violations) will now always generate a fatal error. Previously a warning was generated in some cases.</p>
<blockquote>
<p><a href="https://wiki.php.net/rfc/lsp_errors">PHP RFC: Always generate fatal error for incompatible method signatures</a><br>
<a href="https://github.com/php/php-src/pull/4000">Github Pull Request: Always generate fatal error for LSP failures #4000</a><br>
<a href="https://php.watch/versions/8.0/lsp-errors">PHP 8.0: Fatal errors on incompatible method signatures</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/3b23694aac62ad9c2dfdb60cafb304f9fc0b7c04"><sup>v7.4.0</sup></a> The precedence of the concatenation operator has changed relative to bitshifts and addition as well as subtraction.</p>
<pre><code class="language-php">&lt;?php
echo &quot;Sum: &quot; . $a + $b;
// was previously interpreted as:
echo (&quot;Sum: &quot; . $a) + $b;
// is now interpreted as:
echo &quot;Sum:&quot; . ($a + $b);
?&gt;
</code></pre>
<blockquote>
<p><a href="https://wiki.php.net/rfc/concatenation_precedence">PHP RFC: Change the precedence of the concatenation operator</a><br>
<a href="https://php.watch/versions/8.0/contact-add-sub-precedence">PHP 8.0: +/- operators take higher precedence when used with concat (.) operator</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/cdd4e591a46ad171aa5c0776671788cd710a9d4b"><sup>v8.0.0</sup></a> Arguments with a default value that resolves to <code>null</code> at runtime will no longer implicitly mark the argument type as nullable. Either an explicit nullable type, or an explicit <code>null</code> default value has to be used instead.</p>
<pre><code class="language-php">&lt;?php
// Replace
function test(int $arg = CONST_RESOLVING_TO_NULL) &#123;&#125;
// With
function test(?int $arg = CONST_RESOLVING_TO_NULL) &#123;&#125;
// Or
function test(int $arg = null) &#123;&#125;
?&gt;
</code></pre>
<blockquote>
<p><a href="https://github.com/php/php-src/pull/4720">Github Pull Request: Don’t make argument nullable based on AST null initializer #4720</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/e8b0163e0b6632c77cb8a3e863671c87793dbfc4"><sup>v8.0.0</sup></a> A number of warnings have been converted into <a href="https://www.php.net/manual/zh/class.error.php">Error</a> exceptions:</p>
<blockquote>
<p><a href="https://wiki.php.net/rfc/engine_warnings">PHP RFC: Reclassifying engine warnings</a></p>
</blockquote>
<ul>
<li>Attempting to write to a property of a non-object. Previously this implicitly created an stdClass object for null, false and empty strings.</li>
<li>Attempting to append an element to an array for which the PHP_INT_MAX key is already used.</li>
<li>Attempting to use an invalid type (array or object) as an array key or string offset.</li>
<li>Attempting to write to an array index of a scalar value.</li>
<li>Attempting to unpack a non-array/Traversable.</li>
<li>Attempting to access unqualified constants which are undefined. Previously, unqualified constant accesses resulted in a warning and were interpreted as strings.</li>
</ul>
<p>A number of notices have been converted into warnings:</p>
<ul>
<li>Attempting to read an undefined variable.</li>
<li>Attempting to read an undefined property.</li>
<li>Attempting to read an undefined array key.</li>
<li>Attempting to read a property of a non-object.</li>
<li>Attempting to access an array index of a non-array.</li>
<li>Attempting to convert an array to string.</li>
<li>Attempting to use a resource as an array key.</li>
<li>Attempting to use null, a boolean, or a float as a string offset.</li>
<li>Attempting to read an out-of-bounds string offset.</li>
<li>Attempting to assign an empty string to a string offset.</li>
</ul>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/66659d6cf6ae2547c0e582a6e3aa0d1ee0e3835f"><sup>v8.0.0</sup></a> Attempting to assign multiple bytes to a string offset will now emit a warning.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/d44cf9b539c5dfbd3ff0295bac25165e79214e09"><sup>v8.0.0</sup></a> Unexpected characters in source files (such as NUL bytes outside of strings) will now result in a <a href="https://www.php.net/manual/zh/class.parseerror.php">ParseError</a> exception instead of a compile warning.</p>
<blockquote>
<p><a href="https://github.com/php/php-src/pull/4767">Github Pull Request: Replace “unexpected character” warning with ParseError #4767</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/db233501ff9d56765ef4a870b777a643c2136711"><sup>v8.0.0</sup></a>  Uncaught exceptions now go through “clean shutdown”, which means that destructors will be called after an uncaught exception.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/64b40f69dca440e86e608847a39b795aedf75861"><sup>v8.0.0</sup></a> The compile time fatal error “Only variables can be passed by reference” has been delayed until runtime, and converted into an “Argument cannot be passed by reference” <a href="https://www.php.net/manual/zh/class.error.php">Error</a> exception.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/64b40f69dca440e86e608847a39b795aedf75861"><sup>v8.0.0</sup></a> Some “Only variables should be passed by reference” notices have been converted to “Argument cannot be passed by reference” exception.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/72bd55902d1908857f47555ad69458861e1acd94"><sup>v8.0.0</sup></a> The generated name for anonymous classes has changed. It will now include the name of the first parent or interface:</p>
<pre><code class="language-php">&lt;?php
new class extends ParentClass &#123;&#125;;
// -&gt; ParentClass@anonymous
new class implements FirstInterface, SecondInterface &#123;&#125;;
// -&gt; FirstInterface@anonymous
new class &#123;&#125;;
// -&gt; class@anonymous
?&gt;
</code></pre>
<p>The name shown above is still followed by a NUL byte and a unique suffix.</p>
<blockquote>
<p><a href="https://github.com/php/php-src/pull/5153">Github Pull Request: Improve generated names for anonymous classes #5153</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/fff5771cccaca49565c90349320f3c06cbe19328"><sup>v8.0.0</sup></a> Non-absolute trait method references in trait alias adaptations are now required to be unambiguous:</p>
<pre><code class="language-php">&lt;?php
class X &#123;
    use T1, T2 &#123;
        func as otherFunc;
    &#125;
    function func() &#123;&#125;
&#125;
?&gt;
</code></pre>
<p>If both <code>T1::func()</code> and <code>T2::func()</code> exist, this code was previously silently accepted, and func was assumed to refer to <code>T1::func</code>. Now it will generate a fatal error instead, and either <code>T1::func</code> or <code>T2::func</code> needs to be written explicitly.</p>
<blockquote>
<p><a href="https://github.com/php/php-src/pull/5232">Github Pull Request: Require non-absolute trait method refs to be unambiguous #5232</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/f74e30c07c2a94921fbfb7b8936324707505bd75"><sup>v8.0.0</sup></a> The signature of abstract methods defined in traits is now checked against the implementing class method:</p>
<pre><code class="language-php">
&lt;?php
trait MyTrait &#123;
    abstract private function neededByTrait(): string;
&#125;

class MyClass &#123;
    use MyTrait;

    // Error, because of return type mismatch.
    private function neededByTrait(): int &#123; return 42; &#125;
&#125;
?&gt;
</code></pre>
<blockquote>
<p><a href="https://wiki.php.net/rfc/abstract_trait_method_validation">PHP RFC: Validation for abstract trait methods</a><br>
<a href="https://github.com/php/php-src/pull/5068">Github Pull Request: Check abstract method signatures coming from traits #5068</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/53eee290b6f5ca531aef19885a392c939013ce36"><sup>v8.0.0</sup></a> Disabled functions are now treated exactly like non-existent functions. Calling a disabled function will report it as unknown, and redefining a disabled function is now possible.</p>
<blockquote>
<p><a href="https://github.com/php/php-src/pull/5473">Github Pull Request: Completely remove disabled functions from function table #5473</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/69888c3ff1f2301ead8e37b23ff8481d475e29d2"><sup>v8.0.0</sup></a> <code>data://</code> stream wrappers are no longer writable, which matches the documented behavior.</p>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/5bc1e224dbd660cea99c222baf8bd3c215d25073"><sup>v8.0.0</sup></a> The arithmetic and bitwise operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>++</code>, <code>--</code> will now consistently throw a <a href="https://www.php.net/manual/zh/class.typeerror.php">TypeError</a> when one of the operands is an array, <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a> or non-overloaded object. The only exception to this is the array <code>+</code> array merge operation, which remains supported.</p>
<blockquote>
<p><a href="https://wiki.php.net/rfc/arithmetic_operator_type_checks">PHP RFC: Stricter type checks for arithmetic/bitwise operators</a><br>
<a href="https://github.com/php/php-src/pull/5331">Github Pull Request: Make numeric operations on resources, arrays and objects type errors #5331</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/4a816584a4d483722485e5163396ea1bb2a6aee7"><sup>v8.0.0</sup></a> Float to string casting will now always behave locale-independently.</p>
<pre><code class="language-php">&lt;?php
setlocale(LC_ALL, &quot;de_DE&quot;);
$f = 3.14;
echo $f, &quot;\n&quot;;
// Previously: 3,14
// Now:        3.14
?&gt;
</code></pre>
<p>See <a href="https://www.php.net/manual/zh/function.printf.php">printf()</a>, <a href="https://www.php.net/manual/zh/function.number-format.php">number_format()</a> and <strong>NumberFormatter()</strong> for ways to customize number formatting.</p>
<blockquote>
<p><a href="https://wiki.php.net/rfc/locale_independent_float_to_string">PHP RFC: Locale-independent float to string cast</a><br>
<a href="https://github.com/php/php-src/pull/5224">Github Pull Request: Make float to string conversions locale-independent #5224</a></p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/php/php-src/commit/bc3ee2eeea1a3ca3ff33263861758d6ed54f3b16"><sup>v8.0.0</sup></a> Support for deprecated curly braces for offset access has been removed.</p>
<pre><code class="language-php">&lt;?php
// Instead of:
$array&#123;0&#125;;
$array&#123;&quot;key&quot;&#125;;
// Write:
$array[0];
$array[&quot;key&quot;];
?&gt;
</code></pre>
<blockquote>
<p><a href="https://wiki.php.net/rfc/deprecate_curly_braces_array_access">PHP RFC: Deprecate curly brace syntax for accessing array elements and string offsets</a><br>
<a href="https://github.com/php/php-src/pull/4416">Github Pull Request: Deprecate curly brace syntax for array/string offset access #4416</a></p>
</blockquote>
</li>
<li>
<p>Applying the final modifier on a private method will now produce a warning unless that method is the constructor.</p>
</li>
<li>
<p>If an object constructor <a href="https://www.php.net/manual/zh/function.exit.php">exit()</a>s, the object destructor will no longer be called. This matches the behavior when the constructor throws.</p>
</li>
<li>
<p>Namespaced names can no longer contain whitespace: While <code>Foo\Bar</code> will be recognized as a namespaced name, <code>Foo \ Bar</code> will not. Conversely, reserved keywords are now permitted as namespace segments, which may also change the interpretation of code: <code>new\x</code> is now the same as <code>constant('new\x')</code>, not <code>new \x()</code>.</p>
</li>
<li>
<p>Nested ternaries now require explicit parentheses.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.debug-backtrace.php">debug_backtrace()</a> and <a href="https://www.php.net/manual/zh/exception.gettrace.php">Exception::getTrace()</a> will no longer provide references to arguments. It will not be possible to change function arguments through the backtrace.</p>
</li>
<li>
<p>Numeric string handling has been altered to be more intuitive and less error-prone. Trailing whitespace is now allowed in numeric strings for consistency with how leading whitespace is treated. This mostly affects:</p>
<ul>
<li>The <a href="https://www.php.net/manual/zh/function.is-numeric.php">is_numeric()</a> function</li>
<li>String-to-string comparisons</li>
<li>Type declarations</li>
<li>Increment and decrement operations</li>
</ul>
<p>The concept of a “leading-numeric string” has been mostly dropped; the cases where this remains exist in order to ease migration. Strings which emitted an <code>E_NOTICE</code> “A non well-formed numeric value encountered” will now emit an <code>E_WARNING</code> “A non-numeric value encountered” and all strings which emitted an <code>E_WARNING</code> “A non-numeric value encountered” will now throw a <a href="https://www.php.net/manual/zh/class.typeerror.php">TypeError</a>. This mostly affects:</p>
<ul>
<li>Arithmetic operations</li>
<li>Bitwise operations</li>
</ul>
<p>This <code>E_WARNING</code> to <a href="https://www.php.net/manual/zh/class.typeerror.php">TypeError</a> change also affects the <code>E_WARNING</code> “Illegal string offset ‘string’” for illegal string offsets. The behavior of explicit casts to int/float from strings has not been changed.</p>
</li>
<li>
<p>Magic Methods will now have their arguments and return types checked if they have them declared. The signatures should match the following list:</p>
<ul>
<li><code>__call(string $name, array $arguments): mixed</code></li>
<li><code>__callStatic(string $name, array $arguments): mixed</code></li>
<li><code>__clone(): void</code></li>
<li><code>__debugInfo(): ?array</code></li>
<li><code>__get(string $name): mixed</code></li>
<li><code>__invoke(mixed $arguments): mixed</code></li>
<li><code>__isset(string $name): bool</code></li>
<li><code>__serialize(): array</code></li>
<li><code>__set(string $name, mixed $value): void</code></li>
<li><code>__set_state(array $properties): object</code></li>
<li><code>__sleep(): array</code></li>
<li><code>__unserialize(array $data): void</code></li>
<li><code>__unset(string $name): void</code></li>
<li><code>__wakeup(): void</code></li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.call-user-func-array.php">call_user_func_array()</a> array keys will now be interpreted as parameter names, instead of being silently ignored.</p>
</li>
<li>
<p>Declaring a function called <code>assert()</code> inside a namespace is no longer allowed, and issues <code>E_COMPILE_ERROR</code>. The <a href="https://www.php.net/manual/zh/function.assert.php">assert()</a> function is subject to special handling by the engine, which may lead to inconsistent behavior when defining a namespaced function with the same name.</p>
</li>
<li>
<p>如果带有默认值的参数后面跟着一个必要的参数，那么默认值就会无效。这在 PHP 8.0.0 中已被废弃，通常可以通过删除默认值，不影响现有功能：</p>
<pre><code class="language-php">&lt;?php
function test($a = [], $b) &#123;&#125; // 之前
function test($a, $b) &#123;&#125;      // 之后
?&gt;
</code></pre>
<p>这条规则的一个例外是 <code>Type $param = null</code> 形式的参数，其中 null 的默认值使得类型隐式为空。这种用法仍然是允许的，但仍建议使用显式可空类型。</p>
<pre><code class="language-php">&lt;?php
function test(A $a = null, $b) &#123;&#125; // 旧写法，仍可用
function test(?A $a, $b) &#123;&#125;       // 推荐写法
?&gt;
</code></pre>
</li>
<li>
<p>参数 <code>exclude_disabled</code> 不能设置为 <code>false</code> 来调用 <a href="https://www.php.net/manual/zh/function.get-defined-functions.php">get_defined_functions()</a>，该参数已被废弃，不再起作用。 <a href="https://www.php.net/manual/zh/function.get-defined-functions.php">get_defined_functions()</a> 绝不会再包含禁用的函数。</p>
</li>
</ul>
<h3 id="Resource-to-Object-Migration"><a class="header-anchor" href="#Resource-to-Object-Migration">¶</a>Resource to Object Migration</h3>
<p>Several <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>s have been migrated to objects. Return value checks using <a href="https://www.php.net/manual/zh/function.is-resource.php">is_resource()</a> should be replaced with checks for <code>false</code>.</p>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.curl-init.php">curl_init()</a> will now return a <a href="https://www.php.net/manual/zh/class.curlhandle.php">CurlHandle</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. The <a href="https://www.php.net/manual/zh/function.curl-close.php">curl_close()</a> function no longer has an effect, instead the <a href="https://www.php.net/manual/zh/class.curlhandle.php">CurlHandle</a> instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.curl-multi-init.php">curl_multi_init()</a> will now return a <a href="https://www.php.net/manual/zh/class.curlmultihandle.php">CurlMultiHandle</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. The <a href="https://www.php.net/manual/zh/function.curl-multi-close.php">curl_multi_close()</a> function no longer has an effect, instead the <a href="https://www.php.net/manual/zh/class.curlmultihandle.php">CurlMultiHandle</a> instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.curl-share-init.php">curl_share_init()</a> will now return a <a href="https://www.php.net/manual/zh/class.curlsharehandle.php">CurlShareHandle</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. The <a href="https://www.php.net/manual/zh/function.curl-share-close.php">curl_share_close()</a> function no longer has an effect, instead the <a href="https://www.php.net/manual/zh/class.curlsharehandle.php">CurlShareHandle</a> instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.enchant-broker-init.php">enchant_broker_init()</a> will now return an <a href="https://www.php.net/manual/zh/class.enchantbroker.php">EnchantBroker</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.enchant-broker-request-dict.php">enchant_broker_request_dict()</a> and <a href="https://www.php.net/manual/zh/function.enchant-broker-request-pwl-dict.php">enchant_broker_request_pwl_dict()</a> will now return an <a href="https://www.php.net/manual/zh/class.enchantdictionary.php">EnchantDictionary</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
<li>
<p>The GD extension now uses <a href="https://www.php.net/manual/zh/class.gdimage.php">GdImage</a> objects as the underlying data structure for images, rather than <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>s. The <a href="https://www.php.net/manual/zh/function.imagedestroy.php">imagedestroy()</a> function no longer has an effect; instead the <a href="https://www.php.net/manual/zh/class.gdimage.php">GdImage</a> instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.openssl-x509-read.php">openssl_x509_read()</a> and <a href="https://www.php.net/manual/zh/function.openssl-csr-sign.php">openssl_csr_sign()</a> will now return an <a href="https://www.php.net/manual/zh/class.opensslcertificate.php">OpenSSLCertificate</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. The <a href="https://www.php.net/manual/zh/function.openssl-x509-free.php">openssl_x509_free()</a> function is deprecated and no longer has an effect, instead the <a href="https://www.php.net/manual/zh/class.opensslcertificate.php">OpenSSLCertificate</a> instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.openssl-csr-new.php">openssl_csr_new()</a> will now return an <a href="https://www.php.net/manual/zh/class.opensslcertificatesigningrequest.php">OpenSSLCertificateSigningRequest</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.openssl-pkey-new.php">openssl_pkey_new()</a> will now return an <a href="https://www.php.net/manual/zh/class.opensslasymmetrickey.php">OpenSSLAsymmetricKey</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. The <a href="https://www.php.net/manual/zh/function.openssl-pkey-free.php">openssl_pkey_free()</a> function is deprecated and no longer has an effect, instead the <a href="https://www.php.net/manual/zh/class.opensslasymmetrickey.php">OpenSSLAsymmetricKey</a> instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.shmop-open.php">shmop_open()</a> will now return a <a href="https://www.php.net/manual/zh/class.shmop.php">Shmop</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. The <a href="https://www.php.net/manual/zh/function.shmop-close.php">shmop_close()</a> function no longer has an effect, and is deprecated; instead the <a href="https://www.php.net/manual/zh/class.shmop.php">Shmop</a> instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.socket-create.php">socket_create()</a>, <a href="https://www.php.net/manual/zh/function.socket-create-listen.php">socket_create_listen()</a>, <a href="https://www.php.net/manual/zh/function.socket-accept.php">socket_accept()</a>, <a href="https://www.php.net/manual/zh/function.socket-import-stream.php">socket_import_stream()</a>, <a href="https://www.php.net/manual/zh/function.socket-addrinfo-connect.php">socket_addrinfo_connect()</a>, <a href="https://www.php.net/manual/zh/function.socket-addrinfo-bind.php">socket_addrinfo_bind()</a>, and <a href="https://www.php.net/manual/zh/function.socket-wsaprotocol-info-import.php">socket_wsaprotocol_info_import()</a> will now return a <a href="https://www.php.net/manual/zh/class.socket.php">Socket</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. <a href="https://www.php.net/manual/zh/function.socket-addrinfo-lookup.php">socket_addrinfo_lookup()</a> will now return an array of <a href="https://www.php.net/manual/zh/class.addressinfo.php">AddressInfo</a> objects rather than <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>s.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.msg-get-queue.php">msg_get_queue()</a> will now return an SysvMessageQueue object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.sem-get.php">sem_get()</a> will now return an SysvSemaphore object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.shm-attach.php">shm_attach()</a> will now return an SysvSharedMemory object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.xml-parser-create.php">xml_parser_create()</a> and <a href="https://www.php.net/manual/zh/function.xml-parser-create-ns.php">xml_parser_create_ns()</a> will now return an <a href="https://www.php.net/manual/zh/class.xmlparser.php">XMLParser</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>. The <a href="https://www.php.net/manual/zh/function.xml-parser-free.php">xml_parser_free()</a> function no longer has an effect, instead the XmlParser instance is automatically destroyed if it is no longer referenced.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/book.xmlwriter.php">XMLWriter</a> functions now accept and return, respectively, <a href="https://www.php.net/manual/zh/class.xmlwriter.php">XMLWriter</a> objects instead of <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>s.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.inflate-init.php">inflate_init()</a> will now return an <a href="https://www.php.net/manual/zh/class.inflatecontext.php">InflateContext</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.deflate-init.php">deflate_init()</a> will now return a <a href="https://www.php.net/manual/zh/class.deflatecontext.php">DeflateContext</a> object rather than a <a href="https://www.php.net/manual/zh/language.types.resource.php">资源(resource)</a>.</p>
</li>
</ul>
<h3 id="COM-and-Net-Windows"><a class="header-anchor" href="#COM-and-Net-Windows">¶</a>COM and .Net (Windows)</h3>
<ul>
<li>The ability to import case-insensitive constants from type libraries has been removed. The second argument to <a href="https://www.php.net/manual/zh/function.com-load-typelib.php">com_load_typelib()</a> may no longer be false; <a href="https://www.php.net/manual/zh/com.configuration.php#ini.com.autoregister-casesensitive">com.autoregister_casesensitive</a> may no longer be disabled; case-insensitive markers in <a href="https://www.php.net/manual/zh/com.configuration.php#ini.com.typelib-file">com.typelib_file</a> are ignored.</li>
</ul>
<h3 id="CURL"><a class="header-anchor" href="#CURL">¶</a>CURL</h3>
<ul>
<li>
<p><code>CURLOPT_POSTFIELDS</code> no longer accepts objects as arrays. To interpret an object as an array, perform an explicit <code>(array)</code> cast. The same applies to other options accepting arrays as well.</p>
</li>
<li>
<p>现在 CURL 扩展要求 libcurl 版本至少为 7.29.0。</p>
</li>
<li>
<p>移除了 <a href="https://www.php.net/manual/zh/function.curl-version.php">curl_version()</a> 废弃的参数 <code>version</code>。</p>
</li>
</ul>
<h3 id="Date-and-Time"><a class="header-anchor" href="#Date-and-Time">¶</a>Date and Time</h3>
<ul>
<li><a href="https://www.php.net/manual/zh/function.mktime.php">mktime()</a> and <a href="https://www.php.net/manual/zh/function.gmmktime.php">gmmktime()</a> now require at least one argument. <a href="https://www.php.net/manual/zh/function.time.php">time()</a> can be used to get the current timestamp.</li>
</ul>
<h3 id="DOM"><a class="header-anchor" href="#DOM">¶</a>DOM</h3>
<ul>
<li>
<p>Unimplemented classes from the DOM extension that had no behavior and contained test data have been removed. These classes have also been removed in the latest version of the DOM standard:</p>
<ul>
<li>DOMNameList</li>
<li>DomImplementationList</li>
<li>DOMConfiguration</li>
<li>DomError</li>
<li>DomErrorHandler</li>
<li>DOMImplementationSource</li>
<li>DOMLocator</li>
<li>DOMUserDataHandler</li>
<li>DOMTypeInfo</li>
</ul>
</li>
</ul>
<h3 id="Enchant"><a class="header-anchor" href="#Enchant">¶</a>Enchant</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.enchant-broker-list-dicts.php">enchant_broker_list_dicts()</a>, <a href="https://www.php.net/manual/zh/function.enchant-broker-describe.php">enchant_broker_describe()</a> and <a href="https://www.php.net/manual/zh/function.enchant-dict-suggest.php">enchant_dict_suggest()</a> will now return an empty array instead of <code>null</code>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.enchant-broker-set-dict-path.php">enchant_broker_set_dict_path()</a> and <a href="https://www.php.net/manual/zh/function.enchant-broker-get-dict-path.php">enchant_broker_get_dict_path()</a> are deprecated, because that functionality is neither available in libenchant &lt; 1.5 nor in libenchant-2.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.enchant-dict-add-to-personal.php">enchant_dict_add_to_personal()</a> is deprecated; use <a href="https://www.php.net/manual/zh/function.enchant-dict-add.php">enchant_dict_add()</a> instead.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.enchant-dict-is-in-session.php">enchant_dict_is_in_session()</a> is deprecated; use <a href="https://www.php.net/manual/zh/function.enchant-dict-is-added.php">enchant_dict_is_added()</a> instead.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.enchant-broker-free.php">enchant_broker_free()</a> and <a href="https://www.php.net/manual/zh/function.enchant-broker-free-dict.php">enchant_broker_free_dict()</a> are deprecated; unset the object instead.</p>
</li>
<li>
<p>The <code>ENCHANT_MYSPELL</code> and <code>ENCHANT_ISPELL</code> constants are deprecated.</p>
</li>
<li>
<p>现在环境允许时，enchant 会默认使用 libenchant-2。 仍然支持 libenchant 1，但已经废弃，并将在未来移除。</p>
</li>
</ul>
<h3 id="Exif"><a class="header-anchor" href="#Exif">¶</a>Exif</h3>
<ul>
<li><a href="https://www.php.net/manual/zh/function.read-exif-data.php">read_exif_data()</a> has been removed; <a href="https://www.php.net/manual/zh/function.exif-read-data.php">exif_read_data()</a> should be used instead.</li>
</ul>
<h3 id="Filter"><a class="header-anchor" href="#Filter">¶</a>Filter</h3>
<ul>
<li>
<p>The <code>FILTER_FLAG_SCHEME_REQUIRED</code> and <code>FILTER_FLAG_HOST_REQUIRED</code> flags for the <code>FILTER_VALIDATE_URL</code> filter have been removed. The <code>scheme</code> and <code>host</code> are (and have been) always required.</p>
</li>
<li>
<p>The <code>INPUT_REQUEST</code> and <code>INPUT_SESSION</code> source for <a href="https://www.php.net/manual/zh/function.filter-input.php">filter_input()</a> etc. have been removed. These were never implemented and their use always generated a warning.</p>
</li>
</ul>
<h3 id="GD"><a class="header-anchor" href="#GD">¶</a>GD</h3>
<ul>
<li>
<p>The deprecated functions <a href="https://www.php.net/manual/zh/function.image2wbmp.php">image2wbmp()</a> has been removed.</p>
</li>
<li>
<p>The deprecated functions <a href="https://www.php.net/manual/zh/function.png2wbmp.php">png2wbmp()</a> and <a href="https://www.php.net/manual/zh/function.jpeg2wbmp.php">jpeg2wbmp()</a> have been removed.</p>
</li>
<li>
<p>The default <code>mode</code> parameter of <a href="https://www.php.net/manual/zh/function.imagecropauto.php">imagecropauto()</a> no longer accepts <code>-1</code>. <code>IMG_CROP_DEFAULT</code> should be used instead.</p>
</li>
<li>
<p>On Windows, php_gd2.dll has been renamed to php_gd.dll.</p>
</li>
</ul>
<h3 id="GMP"><a class="header-anchor" href="#GMP">¶</a>GMP</h3>
<ul>
<li><a href="https://www.php.net/manual/zh/function.gmp-random.php">gmp_random()</a> has been removed. One of <a href="https://www.php.net/manual/zh/function.gmp-random-range.php">gmp_random_range()</a> or <a href="https://www.php.net/manual/zh/function.gmp-random-bits.php">gmp_random_bits()</a> should be used instead.</li>
</ul>
<h3 id="Iconv"><a class="header-anchor" href="#Iconv">¶</a>Iconv</h3>
<ul>
<li>iconv implementations which do not properly set errno in case of errors are no longer supported.</li>
</ul>
<h3 id="IMAP"><a class="header-anchor" href="#IMAP">¶</a>IMAP</h3>
<ul>
<li>
<p>The unused <code>default_host</code> argument of <a href="https://www.php.net/manual/zh/function.imap-headerinfo.php">imap_headerinfo()</a> has been removed.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/function.imap-header.php">imap_header()</a> function which is an alias of <a href="https://www.php.net/manual/zh/function.imap-headerinfo.php">imap_headerinfo()</a> has been removed.</p>
</li>
</ul>
<h3 id="Internationalization-Functions"><a class="header-anchor" href="#Internationalization-Functions">¶</a>Internationalization Functions</h3>
<ul>
<li>
<p>The deprecated constant <code>INTL_IDNA_VARIANT_2003</code> has been removed.</p>
</li>
<li>
<p>The deprecated <code>Normalizer::NONE</code> constant has been removed.</p>
</li>
</ul>
<h3 id="LDAP"><a class="header-anchor" href="#LDAP">¶</a>LDAP</h3>
<ul>
<li>
<p>The deprecated functions <a href="https://www.php.net/manual/zh/function.ldap-sort.php">ldap_sort()</a>, <a href="https://www.php.net/manual/zh/function.ldap-control-paged-result.php">ldap_control_paged_result()</a> and <a href="https://www.php.net/manual/zh/function.ldap-control-paged-result-response.php">ldap_control_paged_result_response()</a> have been removed.</p>
</li>
<li>
<p>The interface of <a href="https://www.php.net/manual/zh/function.ldap-set-rebind-proc.php">ldap_set_rebind_proc()</a> has changed; the <code>callback</code> parameter does not accept empty strings anymore; <code>null</code> should be used instead.</p>
</li>
</ul>
<h3 id="MBString"><a class="header-anchor" href="#MBString">¶</a>MBString</h3>
<ul>
<li>
<p>The <a href="https://www.php.net/manual/zh/mbstring.configuration.php#ini.mbstring.func-overload">mbstring.func_overload</a> directive has been removed. The related <code>MB_OVERLOAD_MAIL</code>, <code>MB_OVERLOAD_STRING</code>, and <code>MB_OVERLOAD_REGEX</code> constants have also been removed. Finally, the <code>&quot;func_overload&quot;</code> and <code>&quot;func_overload_list&quot;</code> entries in <a href="https://www.php.net/manual/zh/function.mb-get-info.php">mb_get_info()</a> have been removed.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.mb-parse-str.php">mb_parse_str()</a> can no longer be used without specifying a result array.</p>
</li>
<li>
<p>A number of deprecated mbregex aliases have been removed. See the following list for which functions should be used instead:</p>
<ul>
<li><strong>mbregex_encoding()</strong> → <a href="https://www.php.net/manual/zh/function.mb-regex-encoding.php">mb_regex_encoding()</a></li>
<li><strong>mbereg()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg.php">mb_ereg()</a></li>
<li><strong>mberegi()</strong> → <a href="https://www.php.net/manual/zh/function.mb-eregi.php">mb_eregi()</a></li>
<li><strong>mbereg_replace()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-replace.php">mb_ereg_replace()</a></li>
<li><strong>mberegi_replace()</strong> → <a href="https://www.php.net/manual/zh/function.mb-eregi-replace.php">mb_eregi_replace()</a></li>
<li><strong>mbsplit()</strong> → <a href="https://www.php.net/manual/zh/function.mb-split.php">mb_split()</a></li>
<li><strong>mbereg_match()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-match.php">mb_ereg_match()</a></li>
<li><strong>mbereg_search()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-search.php">mb_ereg_search()</a></li>
<li><strong>mbereg_search_pos()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-search-pos.php">mb_ereg_search_pos()</a></li>
<li><strong>mbereg_search_regs()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-search-regs.php">mb_ereg_search_regs()</a></li>
<li><strong>mbereg_search_init()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-search-init.php">mb_ereg_search_init()</a></li>
<li><strong>mbereg_search_getregs()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-search-getregs.php">mb_ereg_search_getregs()</a></li>
<li><strong>mbereg_search_getpos()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-search-getpos.php">mb_ereg_search_getpos()</a></li>
<li><strong>mbereg_search_setpos()</strong> → <a href="https://www.php.net/manual/zh/function.mb-ereg-search-setpos.php">mb_ereg_search_setpos()</a></li>
</ul>
</li>
<li>
<p>The <code>e</code> modifier for <a href="https://www.php.net/manual/zh/function.mb-ereg-replace.php">mb_ereg_replace()</a> has been removed. <a href="https://www.php.net/manual/zh/function.mb-ereg-replace-callback.php">mb_ereg_replace_callback()</a> should be used instead.</p>
</li>
<li>
<p>A non-string pattern argument to <a href="https://www.php.net/manual/zh/function.mb-ereg-replace.php">mb_ereg_replace()</a> will now be interpreted as a string instead of an ASCII codepoint. The previous behavior may be restored with an explicit call to <a href="https://www.php.net/manual/zh/function.chr.php">chr()</a>.</p>
</li>
<li>
<p>The <code>needle</code> argument for <a href="https://www.php.net/manual/zh/function.mb-strpos.php">mb_strpos()</a>, <a href="https://www.php.net/manual/zh/function.mb-strrpos.php">mb_strrpos()</a>, <a href="https://www.php.net/manual/zh/function.mb-stripos.php">mb_stripos()</a>, <a href="https://www.php.net/manual/zh/function.mb-strripos.php">mb_strripos()</a>, <a href="https://www.php.net/manual/zh/function.mb-strstr.php">mb_strstr()</a>, <a href="https://www.php.net/manual/zh/function.mb-stristr.php">mb_stristr()</a>, <a href="https://www.php.net/manual/zh/function.mb-strrchr.php">mb_strrchr()</a> and <a href="https://www.php.net/manual/zh/function.mb-strrichr.php">mb_strrichr()</a> can now be empty.</p>
</li>
<li>
<p>The <code>is_hex</code> parameter, which was not used internally, has been removed from <a href="https://www.php.net/manual/zh/function.mb-decode-numericentity.php">mb_decode_numericentity()</a>.</p>
</li>
<li>
<p>The legacy behavior of passing the encoding as the third argument instead of an offset for the <a href="https://www.php.net/manual/zh/function.mb-strrpos.php">mb_strrpos()</a> function has been removed; an explicit <code>0</code> offset with the encoding should be provided as the fourth argument instead.</p>
</li>
<li>
<p>The <code>ISO_8859-*</code> character encoding aliases have been replaced by <code>ISO8859-*</code> aliases for better interoperability with the iconv extension. The mbregex ISO 8859 aliases with underscores (<code>ISO_8859_*</code> and <code>ISO8859_*</code>) have also been removed.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.mb-ereg.php">mb_ereg()</a> and <a href="https://www.php.net/manual/zh/function.mb-eregi.php">mb_eregi()</a> will now return boolean <code>true</code> on a successful match. Previously they returned integer <code>1</code> if <code>matches</code> was not passed, or <code>max(1, strlen($matches[0]))</code> if <code>matches</code> was passed.</p>
</li>
</ul>
<h3 id="OCI8"><a class="header-anchor" href="#OCI8">¶</a>OCI8</h3>
<ul>
<li>
<p>The <strong>OCI-Lob</strong> class is now called <a href="https://www.php.net/manual/zh/class.OCI-Lob.php">OCILob</a>, and the <strong>OCI-Collection</strong> class is now called <a href="https://www.php.net/manual/zh/class.OCI-Collection.php">OCICollection</a> for name compliance enforced by PHP 8 arginfo type annotation tooling.</p>
</li>
<li>
<p>Several alias functions have been marked as deprecated.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.oci-internal-debug.php">oci_internal_debug()</a> and its alias <a href="https://www.php.net/manual/zh/function.ociinternaldebug.php">ociinternaldebug()</a> have been removed.</p>
</li>
</ul>
<h3 id="ODBC"><a class="header-anchor" href="#ODBC">¶</a>ODBC</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.odbc-connect.php">odbc_connect()</a> no longer reuses connections.</p>
</li>
<li>
<p>The unused <code>flags</code> parameter of <a href="https://www.php.net/manual/zh/function.odbc-exec.php">odbc_exec()</a> has been removed.</p>
</li>
</ul>
<h3 id="OpenSSL"><a class="header-anchor" href="#OpenSSL">¶</a>OpenSSL</h3>
<ul>
<li><a href="https://www.php.net/manual/zh/function.openssl-seal.php">openssl_seal()</a> and <a href="https://www.php.net/manual/zh/function.openssl-open.php">openssl_open()</a> now require <code>method</code> to be passed, as the previous default of <code>&quot;RC4&quot;</code> is considered insecure.</li>
</ul>
<h3 id="Regular-Expressions-Perl-Compatible"><a class="header-anchor" href="#Regular-Expressions-Perl-Compatible">¶</a>Regular Expressions (Perl-Compatible)</h3>
<ul>
<li>When passing invalid escape sequences they are no longer interpreted as literals. This behavior previously required the X modifier – which is now ignored.</li>
</ul>
<h3 id="PHP-Data-Objects-PDO"><a class="header-anchor" href="#PHP-Data-Objects-PDO">¶</a>PHP Data Objects (PDO)</h3>
<ul>
<li>
<p>The default error handling mode has been changed from “silent” to “exceptions”. See <a href="https://www.php.net/manual/zh/pdo.error-handling.php">Errors and error handling</a> for details.</p>
</li>
<li>
<p>The signatures of some PDO methods have changed:</p>
<ul>
<li><code>PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs)</code></li>
<li><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></li>
</ul>
</li>
</ul>
<h3 id="PDO-ODBC"><a class="header-anchor" href="#PDO-ODBC">¶</a>PDO ODBC</h3>
<ul>
<li>The php.ini directive <a href="https://www.php.net/manual/zh/ref.pdo-odbc.php#ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</a> has been removed.</li>
</ul>
<h3 id="PDO-MySQL"><a class="header-anchor" href="#PDO-MySQL">¶</a>PDO MySQL</h3>
<ul>
<li><a href="https://www.php.net/manual/zh/pdo.intransaction.php">PDO::inTransaction()</a> now reports the actual transaction state of the connection, rather than an approximation maintained by PDO. If a query that is subject to “implicit commit” is executed, <a href="https://www.php.net/manual/zh/pdo.intransaction.php">PDO::inTransaction()</a> will subsequently return <code>false</code>, as a transaction is no longer active.</li>
</ul>
<h3 id="PostgreSQL-PGSQL-PDO-PGSQL"><a class="header-anchor" href="#PostgreSQL-PGSQL-PDO-PGSQL">¶</a>PostgreSQL (PGSQL) / PDO PGSQL</h3>
<ul>
<li>
<p>PGSQL 与 PDO PGSQL 扩展需要 libpq 的版本号至少为 9.1。</p>
</li>
<li>
<p>The deprecated <a href="https://www.php.net/manual/zh/function.pg-connect.php">pg_connect()</a> syntax using multiple parameters instead of a connection string is no longer supported.</p>
</li>
<li>
<p>The deprecated <a href="https://www.php.net/manual/zh/function.pg-lo-import.php">pg_lo_import()</a> and <a href="https://www.php.net/manual/zh/function.pg-lo-export.php">pg_lo_export()</a> signature that passes the connection as the last argument is no longer supported. The connection should be passed as first argument instead.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.pg-fetch-all.php">pg_fetch_all()</a> will now return an empty array instead of <code>false</code> for result sets with zero rows.</p>
</li>
<li>
<p>The constant <code>PGSQL_LIBPQ_VERSION_STR</code> now has the same value as <code>PGSQL_LIBPQ_VERSION</code>, and thus is deprecated.</p>
</li>
<li>
<p>Function aliases in the pgsql extension have been deprecated. See the following list for which functions should be used instead:</p>
<ul>
<li><strong>pg_errormessage()</strong> → <a href="https://www.php.net/manual/zh/function.pg-last-error.php">pg_last_error()</a></li>
<li><strong>pg_numrows()</strong> → <a href="https://www.php.net/manual/zh/function.pg-num-rows.php">pg_num_rows()</a></li>
<li><strong>pg_numfields()</strong> → <a href="https://www.php.net/manual/zh/function.pg-num-fields.php">pg_num_fields()</a></li>
<li><strong>pg_cmdtuples()</strong> → <a href="https://www.php.net/manual/zh/function.pg-affected-rows.php">pg_affected_rows()</a></li>
<li><strong>pg_fieldname()</strong> → <a href="https://www.php.net/manual/zh/function.pg-field-name.php">pg_field_name()</a></li>
<li><strong>pg_fieldsize()</strong> → <a href="https://www.php.net/manual/zh/function.pg-field-size.php">pg_field_size()</a></li>
<li><strong>pg_fieldtype()</strong> → <a href="https://www.php.net/manual/zh/function.pg-field-type.php">pg_field_type()</a></li>
<li><strong>pg_fieldnum()</strong> → <a href="https://www.php.net/manual/zh/function.pg-field-num.php">pg_field_num()</a></li>
<li><strong>pg_result()</strong> → <a href="https://www.php.net/manual/zh/function.pg-fetch-result.php">pg_fetch_result()</a></li>
<li><strong>pg_fieldprtlen()</strong> → <a href="https://www.php.net/manual/zh/function.pg-field-prtlen.php">pg_field_prtlen()</a></li>
<li><strong>pg_fieldisnull()</strong> → <a href="https://www.php.net/manual/zh/function.pg-field-is-null.php">pg_field_is_null()</a></li>
<li><strong>pg_freeresult()</strong> → <a href="https://www.php.net/manual/zh/function.pg-free-result.php">pg_free_result()</a></li>
<li><strong>pg_getlastoid()</strong> → <a href="https://www.php.net/manual/zh/function.pg-last-oid.php">pg_last_oid()</a></li>
<li><strong>pg_locreate()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-create.php">pg_lo_create()</a></li>
<li><strong>pg_lounlink()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-unlink.php">pg_lo_unlink()</a></li>
<li><strong>pg_loopen()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-open.php">pg_lo_open()</a></li>
<li><strong>pg_loclose()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-close.php">pg_lo_close()</a></li>
<li><strong>pg_loread()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-read.php">pg_lo_read()</a></li>
<li><strong>pg_lowrite()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-write.php">pg_lo_write()</a></li>
<li><strong>pg_loreadall()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-read-all.php">pg_lo_read_all()</a></li>
<li><strong>pg_loimport()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-import.php">pg_lo_import()</a></li>
<li><strong>pg_loexport()</strong> → <a href="https://www.php.net/manual/zh/function.pg-lo-export.php">pg_lo_export()</a></li>
<li><strong>pg_setclientencoding()</strong> → <a href="https://www.php.net/manual/zh/function.pg-set-client-encoding.php">pg_set_client_encoding()</a></li>
<li><strong>pg_clientencoding()</strong> -&gt; <a href="https://www.php.net/manual/zh/function.pg-client-encoding.php">pg_client_encoding()</a></li>
</ul>
</li>
</ul>
<h3 id="Phar"><a class="header-anchor" href="#Phar">¶</a>Phar</h3>
<ul>
<li>Metadata associated with a phar will no longer be automatically unserialized, to fix potential security vulnerabilities due to object instantiation, autoloading, etc.</li>
</ul>
<h3 id="Reflection"><a class="header-anchor" href="#Reflection">¶</a>Reflection</h3>
<ul>
<li>
<p>The method signatures</p>
<ul>
<li><code>ReflectionClass::newInstance($args)</code></li>
<li><code>ReflectionFunction::invoke($args)</code></li>
<li><code>ReflectionMethod::invoke($object, $args)</code></li>
</ul>
<p>have been changed to:</p>
<ul>
<li><code>ReflectionClass::newInstance(...$args)</code></li>
<li><code>ReflectionFunction::invoke(...$args)</code></li>
<li><code>ReflectionMethod::invoke($object, ...$args)</code></li>
</ul>
<p>Code that must be compatible with both PHP 7 and PHP 8 can use the following signatures to be compatible with both versions:</p>
<ul>
<li><code>ReflectionClass::newInstance($arg = null, ...$args)</code></li>
<li><code>ReflectionFunction::invoke($arg = null, ...$args)</code></li>
<li><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></li>
</ul>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/reflectiontype.tostring.php">ReflectionType::__toString()</a> method will now return a complete debug representation of the type, and is no longer deprecated. In particular the result will include a nullability indicator for nullable types. The format of the return value is not stable and may change between PHP versions.</p>
</li>
<li>
<p>Reflection export() methods have been removed. Instead reflection objects can be cast to string.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/reflectionmethod.isconstructor.php">ReflectionMethod::isConstructor()</a> and <a href="https://www.php.net/manual/zh/reflectionmethod.isdestructor.php">ReflectionMethod::isDestructor()</a> now also return <code>true</code> for <a href="https://www.php.net/manual/zh/language.oop5.decon.php#object.construct">__construct()</a> and <a href="https://www.php.net/manual/zh/language.oop5.decon.php#object.destruct">__destruct()</a> methods of interfaces. Previously, this would only be true for methods of classes and traits.</p>
</li>
<li>
<p><strong>ReflectionType::isBuiltin()</strong> method has been moved to <strong>ReflectionNamedType</strong>. <strong>ReflectionUnionType</strong> does not have it.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/reflectionfunction.isdisabled.php">ReflectionFunction::isDisabled()</a> is deprecated, as it is no longer possible to create a <a href="https://www.php.net/manual/zh/class.reflectionfunction.php">ReflectionFunction</a> for a disabled function. This method now always returns <code>false</code>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/reflectionparameter.getclass.php">ReflectionParameter::getClass()</a>, <a href="https://www.php.net/manual/zh/reflectionparameter.isarray.php">ReflectionParameter::isArray()</a>, and <a href="https://www.php.net/manual/zh/reflectionparameter.iscallable.php">ReflectionParameter::isCallable()</a> are deprecated. <a href="https://www.php.net/manual/zh/reflectionparameter.gettype.php">ReflectionParameter::getType()</a> and the <a href="https://www.php.net/manual/zh/class.reflectiontype.php">ReflectionType</a> APIs should be used instead.</p>
</li>
</ul>
<h3 id="Sockets"><a class="header-anchor" href="#Sockets">¶</a>Sockets</h3>
<ul>
<li>The deprecated <code>AI_IDN_ALLOW_UNASSIGNED</code> and <code>AI_IDN_USE_STD3_ASCII_RULES</code> <code>flags</code> for <a href="https://www.php.net/manual/zh/function.socket-addrinfo-lookup.php">socket_addrinfo_lookup()</a> have been removed.</li>
</ul>
<h3 id="Standard-PHP-Library-SPL"><a class="header-anchor" href="#Standard-PHP-Library-SPL">¶</a>Standard PHP Library (SPL)</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/splfileobject.fgetss.php">SplFileObject::fgetss()</a> has been removed.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/splfileobject.seek.php">SplFileObject::seek()</a> now always seeks to the beginning of the line. Previously, positions <code>=1</code> sought to the beginning of the next line.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/splheap.compare.php">SplHeap::compare()</a> now specifies a method signature. Inheriting classes implementing this method will now have to use a compatible method signature.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/spldoublylinkedlist.push.php">SplDoublyLinkedList::push()</a>, <a href="https://www.php.net/manual/zh/spldoublylinkedlist.unshift.php">SplDoublyLinkedList::unshift()</a> and <a href="https://www.php.net/manual/zh/splqueue.enqueue.php">SplQueue::enqueue()</a> now return void instead of <code>true</code>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.spl-autoload-register.php">spl_autoload_register()</a> will now always throw a <a href="https://www.php.net/manual/zh/class.typeerror.php">TypeError</a> on invalid arguments, therefore the second argument <code>do_throw</code> is ignored and a notice will be emitted if it is set to <code>false</code>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/class.splfixedarray.php">SplFixedArray</a> is now an <strong>IteratorAggregate</strong> and not an <strong>Iterator</strong>. <a href="https://www.php.net/manual/zh/splfixedarray.rewind.php">SplFixedArray::rewind()</a>, <a href="https://www.php.net/manual/zh/splfixedarray.current.php">SplFixedArray::current()</a>, <a href="https://www.php.net/manual/zh/splfixedarray.key.php">SplFixedArray::key()</a>, <a href="https://www.php.net/manual/zh/splfixedarray.next.php">SplFixedArray::next()</a>, and <a href="https://www.php.net/manual/zh/splfixedarray.valid.php">SplFixedArray::valid()</a> have been removed. In their place, <strong>SplFixedArray::getIterator()</strong> has been added. Any code which uses explicit iteration over SplFixedArray must now obtain an <strong>Iterator</strong> through <strong>SplFixedArray::getIterator()</strong>. This means that <a href="https://www.php.net/manual/zh/class.splfixedarray.php">SplFixedArray</a> is now safe to use in nested loops.</p>
</li>
</ul>
<h3 id="Standard-Library"><a class="header-anchor" href="#Standard-Library">¶</a>Standard Library</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.assert.php">assert()</a> will no longer evaluate string arguments, instead they will be treated like any other argument. <code>assert($a == $b)</code> should be used instead of <code>assert('$a == $b')</code>. The <a href="https://www.php.net/manual/zh/info.configuration.php#ini.assert.quiet-eval">assert.quiet_eval</a> ini directive and the <code>ASSERT_QUIET_EVAL</code> constant have also been removed, as they would no longer have any effect.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.parse-str.php">parse_str()</a> can no longer be used without specifying a result array.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/filters.string.strip_tags.php">string.strip_tags</a> filter has been removed.</p>
</li>
<li>
<p>The <code>needle</code> argument of <a href="https://www.php.net/manual/zh/function.strpos.php">strpos()</a>, <a href="https://www.php.net/manual/zh/function.strrpos.php">strrpos()</a>, <a href="https://www.php.net/manual/zh/function.stripos.php">stripos()</a>, <a href="https://www.php.net/manual/zh/function.strripos.php">strripos()</a>, <a href="https://www.php.net/manual/zh/function.strstr.php">strstr()</a>, <a href="https://www.php.net/manual/zh/function.strchr.php">strchr()</a>, <a href="https://www.php.net/manual/zh/function.strrchr.php">strrchr()</a>, and <a href="https://www.php.net/manual/zh/function.stristr.php">stristr()</a> will now always be interpreted as a string. Previously non-string needles were interpreted as an ASCII code point. An explicit call to <a href="https://www.php.net/manual/zh/function.chr.php">chr()</a> can be used to restore the previous behavior.</p>
</li>
<li>
<p>The <code>needle</code> argument for <a href="https://www.php.net/manual/zh/function.strpos.php">strpos()</a>, <a href="https://www.php.net/manual/zh/function.strrpos.php">strrpos()</a>, <a href="https://www.php.net/manual/zh/function.stripos.php">stripos()</a>, <a href="https://www.php.net/manual/zh/function.strripos.php">strripos()</a>, <a href="https://www.php.net/manual/zh/function.strstr.php">strstr()</a>, <a href="https://www.php.net/manual/zh/function.stristr.php">stristr()</a> and <a href="https://www.php.net/manual/zh/function.strrchr.php">strrchr()</a> can now be empty.</p>
</li>
<li>
<p>The <code>length</code> argument for <a href="https://www.php.net/manual/zh/function.substr.php">substr()</a>, <a href="https://www.php.net/manual/zh/function.substr-count.php">substr_count()</a>, <a href="https://www.php.net/manual/zh/function.substr-compare.php">substr_compare()</a>, and <a href="https://www.php.net/manual/zh/function.iconv-substr.php">iconv_substr()</a> can now be <code>null</code>. <code>null</code> values will behave as if no length argument was provided and will therefore return the remainder of the string instead of an empty string.</p>
</li>
<li>
<p>The <code>length</code> argument for <a href="https://www.php.net/manual/zh/function.array-splice.php">array_splice()</a> can now be <code>null</code>. <code>null</code>** values will behave identically to omitting the argument, thus removing everything from the <code>offset</code> to the end of the array.</p>
</li>
<li>
<p>The <code>args</code> argument of <a href="https://www.php.net/manual/zh/function.vsprintf.php">vsprintf()</a>, <a href="https://www.php.net/manual/zh/function.vfprintf.php">vfprintf()</a>, and <a href="https://www.php.net/manual/zh/function.vprintf.php">vprintf()</a> must now be an array. Previously any type was accepted.</p>
</li>
<li>
<p>The <code>'salt'</code> option of <a href="https://www.php.net/manual/zh/function.password-hash.php">password_hash()</a> is no longer supported. If the <code>'salt'</code> option is used a warning is generated, the provided salt is ignored, and a generated salt is used instead.</p>
</li>
<li>
<p>The <a href="https://www.php.net/manual/zh/function.quotemeta.php">quotemeta()</a> function will now return an empty string if an empty string was passed. Previously <code>false</code> was returned.</p>
</li>
<li>
<p>The following functions have been removed:</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.hebrevc.php">hebrevc()</a></li>
<li><a href="https://www.php.net/manual/zh/function.convert-cyr-string.php">convert_cyr_string()</a></li>
<li><a href="https://www.php.net/manual/zh/function.money-format.php">money_format()</a></li>
<li><a href="https://www.php.net/manual/zh/function.ezmlm-hash.php">ezmlm_hash()</a></li>
<li><a href="https://www.php.net/manual/zh/function.restore-include-path.php">restore_include_path()</a></li>
<li><a href="https://www.php.net/manual/zh/function.get-magic-quotes-gpc.php">get_magic_quotes_gpc()</a></li>
<li><a href="https://www.php.net/manual/zh/function.get-magic-quotes-runtime.php">get_magic_quotes_runtime()</a></li>
<li><a href="https://www.php.net/manual/zh/function.fgetss.php">fgetss()</a></li>
</ul>
</li>
<li>
<p><code>FILTER_SANITIZE_MAGIC_QUOTES</code> has been removed.</p>
</li>
<li>
<p>Calling <a href="https://www.php.net/manual/zh/function.implode.php">implode()</a> with parameters in a reverse order <code>($pieces, $glue)</code> is no longer supported.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.parse-url.php">parse_url()</a> will now distinguish absent and empty queries and fragments:</p>
<ul>
<li><code>http://example.com/foo → query = null, fragment = null</code></li>
<li><code>http://example.com/foo? → query = &quot;&quot;, fragment = null</code></li>
<li><code>http://example.com/foo# → query = null, fragment = &quot;&quot;</code></li>
<li><code>http://example.com/foo?# → query = &quot;&quot;, fragment = &quot;&quot;</code></li>
</ul>
<p>Previously all cases resulted in query and fragment being <code>null</code>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.var-dump.php">var_dump()</a> and <a href="https://www.php.net/manual/zh/function.debug-zval-dump.php">debug_zval_dump()</a> will now print floating-point numbers using <a href="https://www.php.net/manual/zh/ini.core.php#ini.serialize-precision">serialize_precision</a> rather than <a href="https://www.php.net/manual/zh/ini.core.php#ini.precision">precision</a>. In a default configuration, this means that floating-point numbers are now printed with full accuracy by these debugging functions.</p>
</li>
<li>
<p>If the array returned by <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.sleep">__sleep()</a> contains non-existing properties, these are now silently ignored. Previously, such properties would have been serialized as if they had the value <code>null</code>.</p>
</li>
<li>
<p>The default locale on startup is now always <code>&quot;C&quot;</code>. No locales are inherited from the environment by default. Previously, <code>LC_ALL</code> was set to <code>&quot;C&quot;</code>, while <code>LC_CTYPE</code> was inherited from the environment. However, some functions did not respect the inherited locale without an explicit <a href="https://www.php.net/manual/zh/function.setlocale.php">setlocale()</a> call. An explicit <a href="https://www.php.net/manual/zh/function.setlocale.php">setlocale()</a> call is now always required if a locale component should be changed from the default.</p>
</li>
<li>
<p>The deprecated DES fallback in <a href="https://www.php.net/manual/zh/function.crypt.php">crypt()</a> has been removed. If an unknown salt format is passed to <a href="https://www.php.net/manual/zh/function.crypt.php">crypt()</a>, the function will fail with <code>*0</code> instead of falling back to a weak DES hash now.</p>
</li>
<li>
<p>Specifying out of range rounds for SHA256/SHA512 <a href="https://www.php.net/manual/zh/function.crypt.php">crypt()</a> will now fail with <code>*0</code> instead of clamping to the closest limit. This matches glibc behavior.</p>
</li>
<li>
<p>The result of sorting functions may have changed, if the array contains elements that compare as equal.</p>
</li>
<li>
<p>Any functions accepting callbacks that are not explicitly specified to accept parameters by reference will now warn if a callback with reference parameters is used. Examples include <a href="https://www.php.net/manual/zh/function.array-filter.php">array_filter()</a> and <a href="https://www.php.net/manual/zh/function.array-reduce.php">array_reduce()</a>. This was already the case for most, but not all, functions previously.</p>
</li>
<li>
<p>The HTTP stream wrapper as used by functions like <a href="https://www.php.net/manual/zh/function.file-get-contents.php">file_get_contents()</a> now advertises HTTP/1.1 rather than HTTP/1.0 by default. This does not change the behavior of the client, but may cause servers to respond differently. To retain the old behavior, set the <code>'protocol_version'</code> stream context option, e.g.</p>
<pre><code class="language-php">&lt;?php
$ctx = stream_context_create(['http' =&gt; ['protocol_version' =&gt; '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?&gt;
</code></pre>
</li>
<li>
<p>Calling <a href="https://www.php.net/manual/zh/function.crypt.php">crypt()</a> without an explicit salt is no longer supported. If you would like to produce a strong hash with an auto-generated salt, use <a href="https://www.php.net/manual/zh/function.password-hash.php">password_hash()</a> instead.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.substr.php">substr()</a>, <a href="https://www.php.net/manual/zh/function.mb-substr.php">mb_substr()</a>, <a href="https://www.php.net/manual/zh/function.iconv-substr.php">iconv_substr()</a> and <a href="https://www.php.net/manual/zh/function.grapheme-substr.php">grapheme_substr()</a> now consistently clamp out-of-bounds offsets to the string boundary. Previously, <code>false</code> was returned instead of the empty string in some cases.</p>
</li>
<li>
<p>On Windows, the program execution functions (<a href="https://www.php.net/manual/zh/function.proc-open.php">proc_open()</a>, <a href="https://www.php.net/manual/zh/function.exec.php">exec()</a>, <a href="https://www.php.net/manual/zh/function.popen.php">popen()</a> etc.) using the shell, now consistently execute <strong>%comspec% /s /c “$commandline”</strong>, which has the same effect as executing <strong>$commandline</strong> (without additional quotes).</p>
</li>
<li>
<p>Sort comparison functions that return <code>true</code> or <code>false</code> will now throw a deprecation warning, and should be replaced with an implementation that returns an integer less than, equal to, or greater than zero.</p>
<pre><code class="language-php">&lt;?php
// Replace
usort($array, fn($a, $b) =&gt; $a &gt; $b);
// With
usort($array, fn($a, $b) =&gt; $a &lt;=&gt; $b);
?&gt;
</code></pre>
</li>
</ul>
<h3 id="Sysvsem"><a class="header-anchor" href="#Sysvsem">¶</a>Sysvsem</h3>
<ul>
<li>The <code>auto_release</code> parameter of <a href="https://www.php.net/manual/zh/function.sem-get.php">sem_get()</a> was changed to accept bool values rather than int.</li>
</ul>
<h3 id="Tidy"><a class="header-anchor" href="#Tidy">¶</a>Tidy</h3>
<ul>
<li>
<p>The <code>use_include_path</code> parameter, which was not used internally, has been removed from <a href="https://www.php.net/manual/zh/tidy.repairstring.php">tidy_repair_string()</a>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/tidy.repairstring.php">tidy::repairString()</a> and <a href="https://www.php.net/manual/zh/tidy.repairfile.php">tidy::repairFile()</a> became static methods.</p>
</li>
</ul>
<h3 id="Tokenizer"><a class="header-anchor" href="#Tokenizer">¶</a>Tokenizer</h3>
<ul>
<li>
<p><code>T_COMMENT</code> tokens will no longer include a trailing newline. The newline will instead be part of a following <code>T_WHITESPACE</code> token. It should be noted that <code>T_COMMENT</code> is not always followed by whitespace, it may also be followed by <code>T_CLOSE_TAG</code> or end-of-file.</p>
</li>
<li>
<p>Namespaced names are now represented using the <code>T_NAME_QUALIFIED</code> (<code>Foo\Bar</code>), <code>T_NAME_FULLY_QUALIFIED</code> (<code>\Foo\Bar</code>) and <code>T_NAME_RELATIVE</code> (<code>namespace\Foo\Bar</code>) tokens. <code>T_NS_SEPARATOR</code> is only used for standalone namespace separators, and only syntactially valid in conjunction with group use declarations.</p>
</li>
</ul>
<h3 id="XMLReader"><a class="header-anchor" href="#XMLReader">¶</a>XMLReader</h3>
<ul>
<li><a href="https://www.php.net/manual/zh/xmlreader.open.php">XMLReader::open()</a> and <a href="https://www.php.net/manual/zh/xmlreader.xml.php">XMLReader::xml()</a> are now static methods. They can still be called as instance methods, but inheriting classes need to declare them as static if they override these methods.</li>
</ul>
<h3 id="XML-RPC"><a class="header-anchor" href="#XML-RPC">¶</a>XML-RPC</h3>
<ul>
<li>The XML-RPC extension has been moved to PECL and is no longer part of the PHP distribution.</li>
</ul>
<h3 id="Zip"><a class="header-anchor" href="#Zip">¶</a>Zip</h3>
<ul>
<li>
<p><code>ZipArchive::OPSYS_Z_CPM</code> has been removed (this name was a typo). Use <code>ZipArchive::OPSYS_CPM</code> instead.</p>
</li>
<li>
<p>Using an empty file as ZipArchive is deprecated. Libzip 1.6.0 does not accept empty files as valid zip archives any longer. The existing workaround will be removed in the next version.</p>
</li>
<li>
<p>The procedural API of Zip is deprecated. Use <a href="https://www.php.net/manual/zh/class.ziparchive.php">ZipArchive</a> instead. Iteration over all entries can be accomplished using <a href="https://www.php.net/manual/zh/ziparchive.statindex.php">ZipArchive::statIndex()</a> and a <a href="https://www.php.net/manual/zh/control-structures.for.php">for</a> loop:</p>
<pre><code class="language-php">&lt;?php
// iterate using the procedural API
assert(is_resource($zip));
while ($entry = zip_read($zip)) &#123;
    echo zip_entry_name($entry);
&#125;

// iterate using the object-oriented API
assert($zip instanceof ZipArchive);
for ($i = 0; $entry = $zip-&gt;statIndex($i); $i++) &#123;
    echo $entry['name'];
&#125;
?&gt;
</code></pre>
</li>
</ul>
<h3 id="Zlib"><a class="header-anchor" href="#Zlib">¶</a>Zlib</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.gzgetss.php">gzgetss()</a> has been removed.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/zlib.configuration.php#ini.zlib.output-compression">zlib.output_compression</a> is no longer automatically disabled for <code>Content-Type: image/*</code>.</p>
</li>
</ul>
<h3 id="Windows-PHP-Test-Packs"><a class="header-anchor" href="#Windows-PHP-Test-Packs">¶</a>Windows PHP Test Packs</h3>
<ul>
<li>The test runner has been renamed from run-test.php to run-tests.php, to match its name in php-src.</li>
</ul>
<h3 id="LibXML"><a class="header-anchor" href="#LibXML">¶</a>LibXML</h3>
<ul>
<li><a href="https://www.php.net/manual/zh/function.libxml-disable-entity-loader.php">libxml_disable_entity_loader()</a> has been deprecated. As libxml 2.9.0 is now required, external entity loading is guaranteed to be disabled by default, and this function is no longer needed to protect against XXE attacks, unless the (still vulnerable). <code>LIBXML_NOENT</code> is used. In that case, it is recommended to refactor the code using <a href="https://www.php.net/manual/zh/function.libxml-set-external-entity-loader.php">libxml_set_external_entity_loader()</a> to suppress loading of external entities.</li>
</ul>
<h3 id="EBCDIC"><a class="header-anchor" href="#EBCDIC">¶</a>EBCDIC</h3>
<p>不再支持 EBCDIC targets，虽然它不太可能还在当初的地方继续运行。</p>
<h3 id="SAPI"><a class="header-anchor" href="#SAPI">¶</a>SAPI</h3>
<ul>
<li>Apache 2 Handler
<ul>
<li><a href="https://php.watch/versions/8.0/mod_php-rename">PHP 模块从 php7_module 重命名为 php_module。</a></li>
</ul>
</li>
</ul>
<h2 id="新特性"><a class="header-anchor" href="#新特性">¶</a>新特性</h2>
<h3 id="PHP-Core-v2"><a class="header-anchor" href="#PHP-Core-v2">¶</a>PHP Core</h3>
<ul>
<li>
<p>新增<a href="https://www.php.net/manual/zh/functions.arguments.php#functions.named-arguments">命名参数</a>的功能。</p>
</li>
<li>
<p>新增<a href="https://www.php.net/manual/zh/language.attributes.php">注解</a>的功能。</p>
</li>
<li>
<p>新增<a href="https://www.php.net/manual/zh/language.oop5.decon.php#language.oop5.decon.constructor.promotion">构造器属性提升</a>功能 在构造函数中声明类的属性）。</p>
</li>
<li>
<p>新增 <a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.union">联合类型</a>。</p>
</li>
<li>
<p>新增 <a href="https://www.php.net/manual/zh/control-structures.match.php"><code>match</code> 表达式</a>。</p>
</li>
<li>
<p>新增<a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.nullsafe">Nullsafe 运算符</a>(<code>?-&gt;</code>)。</p>
</li>
<li>
<p>新增 <a href="https://www.php.net/manual/zh/class.weakmap.php">WeakMap</a> 类。</p>
</li>
<li>
<p>新增 <strong>ValueError</strong> 类。</p>
</li>
<li>
<p>现在，只要类型兼容，任意数量的函数参数都可以用一个可变参数替换。 例如允许编写下面的代码：</p>
<pre><code class="language-php">&lt;?php
class A &#123;
     public function method(int $many, string $parameters, $here) &#123;&#125;
&#125;
class B extends A &#123;
     public function method(...$everything) &#123;&#125;
&#125;
?&gt;
</code></pre>
</li>
<li>
<p>static (&quot;后期静态绑定&quot;中) 可以作为返回类型：</p>
<pre><code class="language-php">&lt;?php
class Test &#123;
     public function create(): static &#123;
          return new static();
     &#125;
&#125;
?&gt;
</code></pre>
</li>
<li>
<p>现在可以通过 <code>$object::class</code> 获取类名，返回的结果和 <code>get_class($object)</code> 一致。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.new"><code>new</code></a>、<a href="https://www.php.net/manual/zh/language.operators.type.php"><code>instanceof</code></a> 可用于任何表达式， 用法为 <code>new (expression)(...$args)</code> 和 <code>$obj instanceof (expression)</code>。</p>
</li>
<li>
<p>添加对一些变量语法一致性的修复，例如现在能够编写 <code>Foo::BAR::$baz</code>。</p>
</li>
<li>
<p>添加 <a href="https://www.php.net/manual/zh/class.stringable.php">Stringable</a> interface， 当一个类定义 <a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.tostring">__toString()</a> 方法后会自动实现该接口。</p>
</li>
<li>
<p>Trait 可以定义私有抽象方法（abstract private method）。 类必须实现 trait 定义的该方法。</p>
</li>
<li>
<p>可作为表达式使用 <code>throw</code>。 使得可以编写以下用法：</p>
<pre><code class="language-php">&lt;?php
$fn = fn() =&gt; throw new Exception('Exception in arrow function');
$user = $session-&gt;user ?? throw new Exception('Must have user');
</code></pre>
</li>
<li>
<p>参数列表中的末尾逗号为可选。</p>
<pre><code class="language-php">&lt;?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // &lt;-- 这个逗号也被允许了
) &#123;
&#125;
</code></pre>
</li>
<li>
<p>现在允许 <code>catch (Exception)</code> 一个 exception 而无需捕获到变量中。</p>
</li>
<li>
<p>支持 <a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed">mixed</a> 类型。</p>
</li>
<li>
<p>Private methods declared on a parent class no longer enforce any inheritance rules on the methods of a child class (with the exception of final private constructors). The following example illustrates which restrictions have been removed:</p>
<pre><code class="language-php">&lt;?php
class ParentClass &#123;
    private function method1() &#123;&#125;
    private function method2() &#123;&#125;
    private static function method3() &#123;&#125;
    // Throws a warning, as &quot;final&quot; no longer has an effect:
    private final function method4() &#123;&#125;
&#125;
class ChildClass extends ParentClass &#123;
    // All of the following are now allowed, even though the modifiers aren't
    // the same as for the private methods in the parent class.
    public abstract function method1() &#123;&#125;
    public static function method2() &#123;&#125;
    public function method3() &#123;&#125;
    public function method4() &#123;&#125;
&#125;
?&gt;
</code></pre>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.get-resource-id.php">get_resource_id()</a> has been added, which returns the same value as <code>(int) $resource</code>. It provides the same functionality under a clearer API.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.array-slice.php">array_slice()</a> 用于没有空隙的数组时， 将不会扫描整个数组去查找开始的位移（offset）。 在 offset 较大、长度较小时，会显著减少函数的运行时间。</p>
</li>
<li>
<p><sup>[&lt;!–swig￼0–&gt;]</sup> 当本地化 <code>LC_CTYPE</code> 为 <code>&quot;C&quot;</code> 时（也是默认值）， <a href="https://www.php.net/manual/zh/function.strtolower.php">strtolower()</a> 会使用 SIMD 的实现。</p>
<ul>
<li>
<blockquote>
<p><a href="https://www.laruence.com/2020/06/16/5916.html">是怎样使用SSE2 (Streaming SIMD Extensions 2) 的实现来提升strtolower性能的呢？</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="Date-and-Time-v2"><a class="header-anchor" href="#Date-and-Time-v2">¶</a>Date and Time</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/datetime.createfrominterface.php">DateTime::createFromInterface()</a> and <a href="https://www.php.net/manual/zh/datetimeimmutable.createfrominterface.php">DateTimeImmutable::createFromInterface()</a> have been added.</p>
</li>
<li>
<p>The DateTime format specifier <code>p</code> has been added, which is the same as <code>P</code> but returns <code>Z</code> rather than <code>+00:00</code> for UTC.</p>
</li>
</ul>
<h3 id="DOM-v2"><a class="header-anchor" href="#DOM-v2">¶</a>DOM</h3>
<p><strong>DOMParentNode</strong> and <strong>DOMChildNode</strong> with new traversal and manipulation APIs have been added.</p>
<h3 id="Filter-v2"><a class="header-anchor" href="#Filter-v2">¶</a>Filter</h3>
<p><code>FILTER_VALIDATE_BOOL</code> has been added as an alias for <code>FILTER_VALIDATE_BOOLEAN</code>. The new name is preferred, as it uses the canonical type name.</p>
<h3 id="Enchant-v2"><a class="header-anchor" href="#Enchant-v2">¶</a>Enchant</h3>
<p><a href="https://www.php.net/manual/zh/function.enchant-dict-add.php">enchant_dict_add()</a>, <a href="https://www.php.net/manual/zh/function.enchant-dict-is-added.php">enchant_dict_is_added()</a>, and <code>LIBENCHANT_VERSION</code> have been added.</p>
<h3 id="FPM"><a class="header-anchor" href="#FPM">¶</a>FPM</h3>
<p>Added a new option pm.status_listen that allows getting the status from different endpoint (e.g. port or UDS file) which is useful for getting the status when all children are busy with serving long running requests.</p>
<h3 id="Hash"><a class="header-anchor" href="#Hash">¶</a>Hash</h3>
<p><strong>HashContext</strong> objects can now be serialized.</p>
<h3 id="Internationalization-Functions-v2"><a class="header-anchor" href="#Internationalization-Functions-v2">¶</a>Internationalization Functions</h3>
<p>The <code>IntlDateFormatter::RELATIVE_FULL</code>, <code>IntlDateFormatter::RELATIVE_LONG</code>, <code>IntlDateFormatter::RELATIVE_MEDIUM</code>, and <code>IntlDateFormatter::RELATIVE_SHORT</code> constants have been added.</p>
<h3 id="LDAP-v2"><a class="header-anchor" href="#LDAP-v2">¶</a>LDAP</h3>
<p><a href="https://www.php.net/manual/zh/function.ldap-count-references.php">ldap_count_references()</a> has been added, which returns the number of reference messages in a search result.</p>
<h3 id="OPcache"><a class="header-anchor" href="#OPcache">¶</a>OPcache</h3>
<ul>
<li>
<p>opcache 扩展新增了即时编译(JIT) 支持。</p>
</li>
<li>
<p><a href="https://www.laruence.com/2020/06/27/5963.html">PHP8的Opcache JIT要怎样用，有什么要注意，性能提升效果咋样？</a></p>
</li>
<li>
<p>If the opcache.record_warnings ini setting is enabled, OPcache will record compile-time warnings and replay them on the next include, even if it is served from cache.</p>
</li>
</ul>
<h3 id="OpenSSL-v2"><a class="header-anchor" href="#OpenSSL-v2">¶</a>OpenSSL</h3>
<p>Added <a href="https://www.vocal.com/secure-communication/cryptographic-message-syntax-cms/">Cryptographic Message Syntax (CMS)</a> (<a href="http://www.faqs.org/rfcs/rfc5652">» RFC 5652</a>) support composed of functions for encryption, decryption, signing, verifying and reading. The API is similar to the API for PKCS #7 functions with an addition of new encoding constants: <code>OPENSSL_ENCODING_DER</code>, <code>OPENSSL_ENCODING_SMIME</code> and <code>OPENSSL_ENCODING_PEM</code>:</p>
<ul>
<li><a href="https://www.php.net/manual/zh/function.openssl-cms-encrypt.php">openssl_cms_encrypt()</a> encrypts the message in the file with the certificates and outputs the result to the supplied file.</li>
<li><a href="https://www.php.net/manual/zh/function.openssl-cms-decrypt.php">openssl_cms_decrypt()</a> that decrypts the S/MIME message in the file and outputs the results to the supplied file.</li>
<li><a href="https://www.php.net/manual/zh/function.openssl-cms-read.php">openssl_cms_read()</a> that exports the CMS file to an array of PEM certificates.</li>
<li><a href="https://www.php.net/manual/zh/function.openssl-cms-sign.php">openssl_cms_sign()</a> that signs the MIME message in the file with a cert and key and output the result to the supplied file.</li>
<li><a href="https://www.php.net/manual/zh/function.openssl-cms-verify.php">openssl_cms_verify()</a> that verifies that the data block is intact, the signer is who they say they are, and returns the certs of the signers.</li>
</ul>
<h3 id="Regular-Expressions-Perl-Compatible-v2"><a class="header-anchor" href="#Regular-Expressions-Perl-Compatible-v2">¶</a>Regular Expressions (Perl-Compatible)</h3>
<p><a href="https://www.php.net/manual/zh/function.preg-last-error-msg.php">preg_last_error_msg()</a> has been added, which returns a human-readable message for the last PCRE error. It complements <a href="https://www.php.net/manual/zh/function.preg-last-error.php">preg_last_error()</a>, which returns an integer enum value instead.</p>
<h3 id="Reflection-v2"><a class="header-anchor" href="#Reflection-v2">¶</a>Reflection</h3>
<ul>
<li>
<p>The following methods can now return information about default values of parameters of internal functions:</p>
<ul>
<li><a href="https://www.php.net/manual/zh/reflectionparameter.isdefaultvalueavailable.php">ReflectionParameter::isDefaultValueAvailable()</a></li>
<li><a href="https://www.php.net/manual/zh/reflectionparameter.getdefaultvalue.php">ReflectionParameter::getDefaultValue()</a></li>
<li><a href="https://www.php.net/manual/zh/reflectionparameter.isdefaultvalueconstant.php">ReflectionParameter::isDefaultValueConstant()</a></li>
<li><a href="https://www.php.net/manual/zh/reflectionparameter.getdefaultvalueconstantname.php">ReflectionParameter::getDefaultValueConstantName()</a></li>
</ul>
</li>
<li>
<p>可通过新参数 <code>filter</code> 来过滤 <a href="https://www.php.net/manual/zh/reflectionclass.getconstants.php">ReflectionClass::getConstants()</a> 和 <a href="https://www.php.net/manual/zh/reflectionclass.getreflectionconstants.php">ReflectionClass::getReflectionConstants()</a> 的返回结果。 新增三个常量，搭配使用：</p>
<ul>
<li><code>ReflectionClassConstant::IS_PUBLIC</code></li>
<li><code>ReflectionClassConstant::IS_PROTECTED</code></li>
<li><code>ReflectionClassConstant::IS_PRIVATE</code></li>
</ul>
</li>
</ul>
<h3 id="SQLite3"><a class="header-anchor" href="#SQLite3">¶</a>SQLite3</h3>
<p><a href="https://www.php.net/manual/zh/sqlite3.setauthorizer.php">SQLite3::setAuthorizer()</a> and respective class constants have been added to set a userland callback that will be used to authorize or not an action on the database.</p>
<h3 id="Standard-Library-v2"><a class="header-anchor" href="#Standard-Library-v2">¶</a>Standard Library</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.str-contains.php">str_contains()</a>, <a href="https://www.php.net/manual/zh/function.str-starts-with.php">str_starts_with()</a> and <a href="https://www.php.net/manual/zh/function.str-ends-with.php">str_ends_with()</a> have been added, which check whether <code>haystack</code> contains, starts with or ends with <code>needle</code>, respectively.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.fdiv.php">fdiv()</a> has been added, which performs a floating-point division under IEEE 754 semantics. Division by zero is considered well-defined and will return one of <code>Inf</code>, <code>-Inf</code> or <code>NaN</code>.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.get-debug-type.php">get_debug_type()</a> has been added, which returns a type useful for error messages. Unlike <a href="https://www.php.net/manual/zh/function.gettype.php">gettype()</a>, it uses canonical type names, returns class names for objects, and indicates the resource type for resources.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.printf.php">printf()</a> and friends now support the <code>%h</code> and <code>%H</code> format specifiers. These are the same as <code>%g</code> and <code>%G</code>, but always use <code>&quot;.&quot;</code> as the decimal separator, rather than determining it through the <code>LC_NUMERIC</code> locale.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.printf.php">printf()</a> and friends now support using <code>&quot;*&quot;</code> as width or precision, in which case the width/precision is passed as an argument to printf. This also allows using precision <code>-1</code> with <code>%g</code>, <code>%G</code>, <code>%h</code> and <code>%H</code>. For example, the following code can be used to reproduce PHP’s default floating point formatting:</p>
<pre><code class="language-php">&lt;?php
printf(&quot;%.*H&quot;, (int) ini_get(&quot;precision&quot;), $float);
printf(&quot;%.*H&quot;, (int) ini_get(&quot;serialize_precision&quot;), $float);
?&gt;
</code></pre>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.proc-open.php">proc_open()</a> now supports <a href="https://www.gnu.org/software/libc/manual/html_node/Pseudo_002dTerminals.html">pseudo-terminal (PTY)</a> descriptors. The following attaches <code>stdin</code>, <code>stdout</code> and <code>stderr</code> to the same PTY:</p>
<pre><code class="language-php">&lt;?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?&gt;
</code></pre>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.proc-open.php">proc_open()</a> now supports <a href="https://www.gnu.org/software/libc/manual/html_node/Socket-Pairs.html">socket pair</a> descriptors. The following attaches a distinct socket pair to <code>stdin</code>, <code>stdout</code> and <code>stderr</code>:</p>
<pre><code class="language-php">&lt;?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?&gt;
</code></pre>
<p>Unlike pipes, sockets do not suffer from blocking I/O issues on Windows. However, not all programs may work correctly with stdio sockets.</p>
</li>
<li>
<p>Sorting functions are now stable, which means that equal-comparing elements will retain their original order.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/function.array-diff.php">array_diff()</a>, <a href="https://www.php.net/manual/zh/function.array-intersect.php">array_intersect()</a> and their variations can now be used with a single array as argument. This means that usages like the following are now possible:</p>
<pre><code class="language-php">&lt;?php
// OK even if $excludes is empty:
array_diff($array, ...$excludes);
// OK even if $arrays only contains a single array:
array_intersect(...$arrays);
?&gt;
</code></pre>
</li>
<li>
<p>The <code>flag</code> parameter of <a href="https://www.php.net/manual/zh/function.ob-implicit-flush.php">ob_implicit_flush()</a> was changed to accept a bool rather than an int.</p>
</li>
</ul>
<h3 id="Tokenizer-v2"><a class="header-anchor" href="#Tokenizer-v2">¶</a>Tokenizer</h3>
<p><a href="https://www.php.net/manual/zh/class.phptoken.php">PhpToken</a> adds an object-based interface to the tokenizer. It provides a more uniform and ergonomic representation, while being more memory efficient and faster.</p>
<h3 id="Zip-v2"><a class="header-anchor" href="#Zip-v2">¶</a>Zip</h3>
<ul>
<li>
<p>The Zip extension has been updated to version 1.19.1.</p>
</li>
<li>
<p>New <a href="https://www.php.net/manual/zh/ziparchive.setmtimename.php">ZipArchive::setMtimeName()</a> and <a href="https://www.php.net/manual/zh/ziparchive.setmtimeindex.php">ZipArchive::setMtimeIndex()</a> to set the modification time of an entry.</p>
</li>
<li>
<p>New <a href="https://www.php.net/manual/zh/ziparchive.registerprogresscallback.php">ZipArchive::registerProgressCallback()</a> to provide updates during archive close.</p>
</li>
<li>
<p>New <a href="https://www.php.net/manual/zh/ziparchive.registercancelcallback.php">ZipArchive::registerCancelCallback()</a> to allow cancellation during archive close.</p>
</li>
<li>
<p>New <a href="https://www.php.net/manual/zh/ziparchive.replacefile.php">ZipArchive::replaceFile()</a> to replace an entry content.</p>
</li>
<li>
<p>New <a href="https://www.php.net/manual/zh/ziparchive.iscompressionmethoddupported.php">ZipArchive::isCompressionMethodSupported()</a> to check optional compression features.</p>
</li>
<li>
<p>New <a href="https://www.php.net/manual/zh/ziparchive.isencryptionmethoddupported.php">ZipArchive::isEncryptionMethodSupported()</a> to check optional encryption features.</p>
</li>
<li>
<p>The ZipArchive::lastId property to get the index value of the last added entry has been added.</p>
</li>
<li>
<p>Errors can now be checked after an archive has been closed using the ZipArchive::status and ZipArchive::statusSys properties, or the <a href="https://www.php.net/manual/zh/ziparchive.getstatusstring.php">ZipArchive::getStatusString()</a> method.</p>
</li>
<li>
<p>The <code>'remove_path'</code> option of <a href="https://www.php.net/manual/zh/ziparchive.addglob.php">ZipArchive::addGlob()</a> and <a href="https://www.php.net/manual/zh/ziparchive.addpattern.php">ZipArchive::addPattern()</a> is now treated as an arbitrary string prefix (for consistency with the <code>'add_path'</code> option), whereas formerly it was treated as a directory name.</p>
</li>
<li>
<p>Optional compression / encryption features are now listed in phpinfo.</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/ziparchive.addglob.php">ZipArchive::addGlob()</a> 和 <a href="https://www.php.net/manual/zh/ziparchive.addpattern.php">ZipArchive::addPattern()</a> 方法中 <code>options</code> 数组参数可接受更多的值：</p>
<ul>
<li><code>flags</code></li>
<li><code>comp_method</code></li>
<li><code>comp_flags</code></li>
<li><code>env_method</code></li>
<li><code>enc_password</code></li>
</ul>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/ziparchive.addemptydir.php">ZipArchive::addEmptyDir()</a>、<a href="https://www.php.net/manual/zh/ziparchive.addfile.php">ZipArchive::addFile()</a>、 <a href="https://www.php.net/manual/zh/ziparchive.addfromstring.php">ZipArchive::addFromString()</a> 方法新增 <code>flags</code> 参数。 可用于名称编码 (<code>ZipArchive::FL_ENC_*</code>) 与条目（entry）替换 (<code>ZipArchive::FL_OVERWRITE</code>)。</p>
</li>
<li>
<p><a href="https://www.php.net/manual/zh/ziparchive.extractto.php">ZipArchive::extractTo()</a> 现在会储存文件的修改时间。</p>
</li>
</ul>
<h3 id="JSON"><a class="header-anchor" href="#JSON">¶</a>JSON</h3>
<p>现在无法禁用 JSON 扩展，将是任意 PHP 版本的内置功能，类似 date 扩展。</p>
<h3 id="GD-v2"><a class="header-anchor" href="#GD-v2">¶</a>GD</h3>
<ul>
<li>
<p><a href="https://www.php.net/manual/zh/function.imagepolygon.php">imagepolygon()</a>、 <a href="https://www.php.net/manual/zh/function.imageopenpolygon.php">imageopenpolygon()</a>、<a href="https://www.php.net/manual/zh/function.imagefilledpolygon.php">imagefilledpolygon()</a> 的参数 <code>num_points</code> 现在为可选参数。 这些函数可用三或四个参数去调用。 省略参数时，会按 <code>count($points)/2</code> 计算。</p>
</li>
<li>
<p>新增函数 <a href="https://www.php.net/manual/zh/function.imagegetinterpolation.php">imagegetinterpolation()</a>，可获取当前的插值（interpolation）。</p>
</li>
</ul>
<h3 id="SimpleXML"><a class="header-anchor" href="#SimpleXML">¶</a>SimpleXML</h3>
<p>现在 <a href="https://www.php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> 实现（implements）了 <a href="https://www.php.net/manual/zh/class.recursiveiterator.php">RecursiveIterator</a> 并吸收了 <a href="https://www.php.net/manual/zh/class.simplexmliterator.php">SimpleXMLIterator</a> 的功能。 <a href="https://www.php.net/manual/zh/class.simplexmliterator.php">SimpleXMLIterator</a> 是 <a href="https://www.php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> 的一个空扩展。</p>
<h3 id="INI-文件处理的变更"><a class="header-anchor" href="#INI-文件处理的变更">¶</a>INI 文件处理的变更</h3>
<ul>
<li>
<p>com.dotnet_version 是一个新的 INI 指令，用于选择 <a href="https://www.php.net/manual/zh/class.dotnet.php">dotnet</a> 对象的 .NET framework 版本。</p>
</li>
<li>
<p>zend.exception_string_param_max_len 是一个新的 INI 指令，用于设置字符串化的调用栈（stack strace）的最大字符串长度。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
        <category>编程语言</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>历史</tag>
        <tag>PHP发展史</tag>
        <tag>技术发展史</tag>
        <tag>PHP8</tag>
        <tag>Cryptographic Message Syntax</tag>
        <tag>Pseudo Terminals</tag>
        <tag>Socket Pairs</tag>
        <tag>PHP Zip</tag>
        <tag>PHP Tokenizer</tag>
        <tag>Just-In-Time</tag>
        <tag>JIT</tag>
        <tag>Streaming SIMD Extensions 2</tag>
        <tag>SSE2</tag>
        <tag>LSP</tag>
      </tags>
  </entry>
</search>
